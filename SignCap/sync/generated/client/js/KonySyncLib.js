//  ****************Sync Version:Sync-GA-5.5.1_v201306211442*******************
//  **************** Start jsonWriter.js*******************
/*Generated by Lua2JS*/
//function jsonGetType (node)
kony.sync = {}
kony.sync.jsonGetType = function(node) {
    if (kony.type(node) == "table") {
        for (var key in node) {
            var value = node[kony.decrement(key)];
            if ((key == 1)) {
                return 1;
            } else if (key == "1") {
                return 1;
            } else {
                return 2;
            }
        }
        return 1;
    }
    return 0;
};
//function createJson (key,data)
kony.sync.createJson = function(key, data) {
    kony.sync.jsonBegin();
    kony.sync.jsonWriteKeyValue(key, data);
    kony.sync.jsonEnd();
    return js;
};
//function jsonWriteKeyValue (key, data)
kony.sync.jsonWriteKeyValue = function(key, data) {
    kony.sync.jsonBeginElement(key);
    kony.sync.jsonWriteValue(data);
};
//function jsonWriteValue (data) 
kony.sync.jsonWriteValue = function(data) {
    datatype = kony.sync.jsonGetType(data);
    if (datatype == 0) {
        kony.sync.jsonString(data);
    } else if (datatype == 1) {
        kony.sync.jsonBeginArray();
        var len = kony.sync.jsonwriter_ipairs_length(data);
        var count1 = 0;
        for (var i = 1;
        ((data) != null) && i <= data.length; i++) {
            var v = data[kony.decrement(i)];
            count1 = count1 + 1;
            kony.sync.jsonWriteValue(v);
            if ((count1 != len)) {
                js = js + ",";
            }
        }
        kony.sync.jsonEndArray();
    } else {
        kony.sync.jsonBeginHash();
        var len = kony.sync.jsonwriter_pairs_length(data) 
        ;
        var count2 = 0;
        for (var key in data) {
            var value = data[kony.decrement(key)];
            count2 = count2 + 1;
            kony.sync.jsonWriteKeyValue(key, value);
            if ((count2 != len)) {
                js = js + ",";
            }
        }
        kony.sync.jsonEndHash();
    }
};
//function jsonBegin()
kony.sync.jsonBegin = function() {
    js = "{";
};
//function jsonEnd()
kony.sync.jsonEnd = function() {
    js = js + " }";
};
//function jsonBeginElement(elementName)
kony.sync.jsonBeginElement = function(elementName) {
    js = js + "\"" + elementName + "\"" + " : ";
};
//function jsonBeginArray ()
kony.sync.jsonBeginArray = function() {
    js = js + " \[";
};
//function jsonEndArray ()
kony.sync.jsonEndArray = function() {
    js = js + " \]";
};
//function jsonBeginHash ()
kony.sync.jsonBeginHash = function() {
    js = js + " \{";
};
//function jsonEndHash ()
kony.sync.jsonEndHash = function() {
    js = js + " \}";
};
//function jsonAddValue (key,value)
kony.sync.jsonAddValue = function(key, value) {
    js = js + " \"" + key + "\" : " + "\"" + value + "\"";
};
//function jsonString(value) 
kony.sync.jsonString = function(value) {
    if ((value == "null")) {
        js = js + "null";
    } else {
        js = js + "\"" + value + "\"";
    }
};
//function jsonwriter_pairs_length(tab)
kony.sync.jsonwriter_pairs_length = function(tab) {
    var count = 0;
    if ((tab != null)) {
        for (var key in tab) {
            var value = tab[kony.decrement(key)];
            count = count + 1;
        }
    }
    return count;
};
//function jsonwriter_ipairs_length(tab)
kony.sync.jsonwriter_ipairs_length = function(tab) {
    var count = 0;
    if ((tab != null)) {
        for (var key = 1;
        ((tab) != null) && key <= tab.length; key++) {
            var value = tab[kony.decrement(key)];
            count = count + 1;
        }
    }
    return count;
};
/*End generated*/
//  **************** End jsonWriter.js*******************


//  **************** Start KonySyncAPI.js*******************
// Device Auto Registration and Validation Starts here --
kony.sync.syncLoadDeviceID = function(config) {
    if (kony.sync.isSessionInProgress) {
        kony.sync.verifyAndCallClosure(config[kony.sync.onSyncError], kony.sync.getErrorTable(kony.sync.errorCodeSessionInProgress,kony.sync.getErrorMessage(kony.sync.errorCodeSessionInProgress),null));
        return;
    }
	kony.sync.isSessionInProgress = true;
	
	if ((config == null)) {
        kony.sync.currentSyncConfigParams = [];
    }
    config.appVersion = konysyncClientSyncConfig.Version;
    kony.sync.currentSyncConfigParams = config;
    kony.sync.syncPrint("Current Config Params : " + config);
    kony.sync.resetsyncsessionglobals();
    kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onSyncStart], kony.sync.currentSyncReturnParams);
	var registerSuccess = true;
	var alreadyRegistered = false;
	var isError = false;
	
 	function single_transaction_callback(tx) {
		var query = kony.sync.qb_createQuery();
        kony.sync.qb_select(query, [kony.sync.syncConfigurationColumnDeviceIDName]);
        kony.sync.qb_from(query, kony.sync.syncConfigurationTableName);
        var query_compile = kony.sync.qb_compile(query);
        var sql = query_compile[0];
        var params = query_compile[1];
        var resultSet = kony.sync.executeSql(tx, sql, params,kony.sync.currentSyncConfigParams[kony.sync.onSyncError]);
		if(resultSet===false){
			registerSuccess = false;
			isError = true;
			return;
		}	
        var record = kony.db.sqlResultsetRowItem(tx, resultSet, 0);
		kony.sync.syncPrint("Device Record" + record + " ID=" + record.DeviceID);
        kony.sync.syncPrint("Device ID" + record.DeviceID);
        if ((record.DeviceID == "")) {
			kony.sync.konyRegisterDevice(registerDeviceCallback);
			kony.sync.syncPrint("Registering Device...");
        }
		else {
			alreadyRegistered = true;
			kony.sync.syncPrint("Device already registered");
		}		
    }
	
	function registerDeviceCallback(serverResponse) {
		kony.sync.syncPrint("Register Device Response : " + serverResponse);            
		if ((serverResponse[kony.decrement("opstatus")] != null && serverResponse[kony.decrement("opstatus")] != 0)) {
			if ((serverResponse[kony.decrement("d")] != null)) {                    
				kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], kony.sync.getServerError(
				serverResponse[kony.decrement("d")]));
				kony.sync.isSessionInProgress = false;
			} else {                   
				kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], kony.sync.getServerError(serverResponse) );
				kony.sync.isSessionInProgress = false;
			}
			registerSuccess = false;
			return;
		}
		if ((serverResponse[kony.decrement("d")][kony.decrement("error")] == "true")) {                
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], kony.sync.getServerError(
			serverResponse[kony.decrement("d")]));
			kony.sync.isSessionInProgress = false;
			registerSuccess = false;
			return;
		} 
		
		var connection2 = kony.sync.getConnectionOnly(kony.sync.syncConfigurationDBName,kony.sync.syncConfigurationDBName, kony.sync.currentSyncConfigParams[kony.sync.onSyncError], "Load device id");
		if(connection2 !== null){
			kony.sync.startTransaction(connection2, single_device_register_callback, single_transaction_success_callback, single_transaction_error_callback, "Load device id");
		}
		function single_device_register_callback(tx) {
			kony.sync.instanceId = serverResponse[kony.decrement("d")][kony.decrement("__registerdevice")]["instanceID"];
			
			var insertTab = {};
			insertTab[kony.decrement(kony.sync.syncConfigurationColumnInstanceIDName)] = kony.sync.instanceId;
			insertTab[kony.decrement(kony.sync.syncConfigurationColumnDeviceIDName)] = kony.os.deviceInfo().deviceid;
			
			var wcs = {};
			kony.table.insert(wcs, {key: kony.sync.syncConfigurationColumnDeviceIDName, value: ""});
			
			query = kony.sync.qb_createQuery();
			kony.sync.qb_update(query, kony.sync.syncConfigurationTableName);
			kony.sync.qb_set(query, insertTab);
			kony.sync.qb_where(query, wcs);
			query_compile = kony.sync.qb_compile(query);
			
			var sql = query_compile[0];
			var params = query_compile[1];
			if(kony.sync.executeSql(tx, sql, params)===false){
				isError = true;
				return;
			}
			alreadyRegistered = true;
			kony.sync.syncPrint("Register Device success");
		}	
	}

    function single_transaction_error_callback() {
        kony.sync.syncPrint("Register Device failed");
        //kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], kony.sync.getSyncRegisterationFailed());
		kony.sync.isSessionInProgress = false;
		kony.sync.callTransactionError(isError, kony.sync.currentSyncConfigParams[kony.sync.onSyncError]);
   }

    function single_transaction_success_callback() {
        if(registerSuccess && alreadyRegistered) {
			kony.sync.syncPrint("Calling syncStartSession...");
			kony.sync.syncStartSession(config);
		}
    }
	
	var connection = kony.sync.getConnectionOnly(kony.sync.syncConfigurationDBName,kony.sync.syncConfigurationDBName, kony.sync.currentSyncConfigParams[kony.sync.onSyncError], "Device Registration");
	if(connection !==null){
		kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback, "Device Registration");
	}
};

kony.sync.syncStartSession = function(config) {    

    //kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onSyncStart], kony.sync.currentSyncReturnParams);
    kony.sync.isErrorInAnyScope = false;
	kony.sync.syncErrorMessage = {};
	kony.sync.validateScopeSession();
};

kony.sync.validateScopeSession = function() {
   var isSyncComplete = kony.sync.resetscopesessionglobals();
   var isError = false;
    if (isSyncComplete != null && isSyncComplete == true) {
		if(!kony.sync.isErrorInAnyScope){
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncSuccess)], kony.sync.currentSyncReturnParams);
		}
		else{
			//kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], kony.sync.syncErrorMessage);
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)],kony.sync.getErrorTable(kony.sync.errorCodeSyncError,kony.sync.getErrorMessage(kony.sync.errorCodeSyncError),kony.sync.syncErrorMessage));
		}
		kony.sync.isSessionInProgress = false;
        return;
    } // Sync Completes here.
   
	function validateTransaction(tx) {
       var query = kony.sync.qb_createQuery();
        kony.sync.qb_select(query, [kony.sync.metaTableSyncTimeColumn, kony.sync.metaTableSyncVersionCloumn]);
        kony.sync.qb_from(query, kony.sync.metaTableName);
        kony.sync.qb_where(query, [{
            key: kony.sync.metaTableScopeColumn,
            value: kony.sync.currentScope[kony.sync.scopeName]
        }, {
            key: kony.sync.metaTableFilterValue,
            value: "no filter"
        }]);
        var query_compile = kony.sync.qb_compile(query);
        var sql = query_compile[0];
        var params = query_compile[1];
        var resultSet = kony.sync.executeSql(tx, sql, params);
        if(resultSet === false){
			isError = true;
			return;
		}
		if (resultSet.rows.length != 1) {
            errorScopeSession();
            return;
        }
        var record = kony.db.sqlResultsetRowItem(tx, resultSet, 0);
        kony.sync.currentSyncReturnParams["currentScope"] = kony.sync.currentScope[kony.sync.scopeName];
    }

    function startScopeSession() {
        kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onScopeStart)], kony.sync.currentSyncReturnParams);
        kony.sync.startUpload();
    }

    function errorScopeSession() {
       var isbreak = kony.sync.callTransactionError(isError, kony.sync.currentSyncConfigParams[kony.sync.onScopeError]);
        if (isbreak === true) {
			kony.sync.callTransactionError(isError, kony.sync.currentSyncConfigParams[kony.sync.onSyncError]);
			kony.sync.isSessionInProgress = false;
			return;
		}
		kony.sync.validateScopeSession();
    }
 	var connection = kony.sync.getConnectionOnly(kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)],kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.currentSyncConfigParams[kony.sync.onScopeError], "validate scope session");
	if(connection !== null){
		kony.sync.startTransaction(connection, validateTransaction, startScopeSession, errorScopeSession, "validate scope session");
	}
}

kony.sync.startUpload = function() {
    if ((kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)] == null)) {
        kony.sync.syncUploadChanges(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.uploadCompleted);
    } else {
        var scopename = kony.sync.currentScope[kony.sync.scopeName];
        if ((kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)][kony.decrement(scopename)] != null && kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)][kony.decrement(scopename)][kony.decrement(kony.sync.sessionTaskDoUpload)])) {
            kony.sync.syncUploadChanges(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.uploadCompleted);
        } else {
            kony.sync.syncPrint("Skipping Upload for Scope : " + kony.sync.currentScope[kony.sync.scopeName]);
            kony.sync.uploadCompleted();
        }
    }
};

kony.sync.uploadCompleted = function(error,msg) {
	if(error){
		kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onScopeError)], msg);
		kony.sync.isErrorInAnyScope = true;
		kony.sync.syncErrorMessage[kony.sync.currentScope[kony.sync.scopeName]] = msg;
		/*if(kony.sync.currentScope.Index == kony.sync.scopes.scopecount){
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], msg);
			kony.sync.isSessionInProgress = false;
			return;	
		}*/
		kony.sync.validateScopeSession();
	}else{
		if ((kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)] == null)) {
			kony.sync.syncDownloadChanges(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.downloadCompletedCallback);
		} else {
			var scopename = kony.sync.currentScope[kony.sync.scopeName];
			if ((kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)][kony.decrement(scopename)] != null && kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.sessionTasks)][kony.decrement(scopename)][kony.decrement(kony.sync.sessionTaskDoDownload)])) {
				kony.sync.syncDownloadChanges(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.downloadCompletedCallback);
			} else {
				kony.sync.syncPrint("Skipping Download for Scope : " + kony.sync.currentScope[kony.sync.scopeName]);
				kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onScopeSuccess)], kony.sync.currentSyncReturnParams);
				//In case of OTA scope and dodownload is false, the records for corresponding ack's will be deleted
				if (kony.sync.currentScope[kony.sync.syncStrategy] === kony.sync.syncStrategy_OTA){
					kony.sync.deleteRecordsAfterUpload(deleteRecordsAfterUploadCallback);
				}
				else{
					kony.sync.validateScopeSession();
				}
				
			}
		}
	}
	
	function deleteRecordsAfterUploadCallback(code){
		if(code!==0){
			kony.sync.isErrorInAnyScope = true;
			var errObject = null;
			
			//statement error
			if(code===kony.sync.errorCodeSQLStatement){
				errObject = kony.sync.errorObject;
			}
			//transaction error
			else{
				errObject = kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null);
			}
			kony.sync.syncErrorMessage[kony.sync.currentScope[kony.sync.scopeName]] = errorObject;
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onScopeError], errorObject);
		}
		kony.sync.validateScopeSession();
	}
    
};

kony.sync.downloadCompletedCallback = function(error, msg) {
	if(error){
		kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onScopeError)], msg);
		kony.sync.isErrorInAnyScope = true;
		kony.sync.syncErrorMessage[kony.sync.currentScope[kony.sync.scopeName]] = msg;
		/*if(kony.sync.currentScope.Index == kony.sync.scopes.scopecount){
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onSyncError)], msg);
			kony.sync.isSessionInProgress = false;
			return;
		}*/
	}
	else{
		kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onScopeSuccess)], kony.sync.currentSyncReturnParams);
	}
	kony.sync.validateScopeSession();
};
//  **************** End KonySyncAPI.js*******************


//  **************** Start KonySyncDBOperations.js*******************
kony.sync.insert = function (tx, tablename, values, insert_callback, markForUpload) {
	var scopename = kony.sync.scopes.syncTableScopeDic[tablename];
	if (markForUpload == "false" || markForUpload == false) {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.insertColStatusDI;
	} else {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.insertColStatus;
	}
	values[kony.sync.mainTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
	var scope = kony.sync.scopes[scopename];
	var generatedPK = kony.sync.replaceautogeneratedPK(scopename, scope.syncTableDic[tablename], values, tx, insert_callback);
	if (generatedPK === false) {
		return false;
	}
	//Check if it is original or save the original state.

	if (markForUpload == "false" || markForUpload == false) {
		if (kony.sync.addToRollBack(tx, tablename, values, kony.sync.insertColStatusDI, null, insert_callback) === false) {
			return false;
		}
	} else {
		if (kony.sync.addToRollBack(tx, tablename, values, kony.sync.insertColStatus, null, insert_callback) === false) {
			return false;
		}
	}

	if (kony.sync.insertEx(tx, tablename, values, insert_callback) === false) {
		return false;
	}
	var syncorder = kony.sync.getSyncOrder(scopename, tx, insert_callback);
	if (syncorder != null || syncorder !== false) {
		values[kony.sync.mainTableChangeTypeColumn] = null;
		values[kony.sync.mainTableSyncVersionColumn] = null;

		if (markForUpload == "false" || markForUpload == false) {
			values[kony.sync.historyTableChangeTypeColumn] = kony.sync.insertColStatusDI;
		} else {
			values[kony.sync.historyTableChangeTypeColumn] = kony.sync.insertColStatus;
		}
		values[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
		values[kony.sync.historyTableReplaySequenceColumn] = syncorder + 1;

		if (kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, values, insert_callback) === false) {
			return false;
		}

		if (kony.sync.setSyncOrder(scopename, syncorder + 1, tx, insert_callback) === false) {
			return false;
		}
	} else {
		// not expected to come here
		kony.sync.syncPrint("Invalid sync order in insert function");
	}
	return generatedPK;
};
//function insertEx (tx, tablename, values,succ_callback,err_callback)
kony.sync.insertEx = function (tx, tablename, values, errorcallback, rollback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_set(query, values);
	kony.sync.qb_insert(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params, errorcallback, rollback);
};

kony.sync.purgeInsertEx = function (tx, tablename, values, rollback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_purgeInsert(query, tablename, values);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params, null, rollback);
};

kony.sync.error_callbackdb = function (error) {
	kony.sync.syncPrint("@@@@@@@@@@@@@ -" + error.message + " @@@ " + error.code)
}

kony.sync.update = function (tx, tablename, values, wc, markForUpload, errorCallback) {
	//Check if it is original or save the original state.

	if (markForUpload == "false" || markForUpload == false) {
		if(kony.sync.addToRollBack(tx, tablename, values, kony.sync.updateColStatusDU, wc, errorCallback)===false){
			return false;
		}
	} else {
		if(kony.sync.addToRollBack(tx, tablename, values, kony.sync.updateColStatus, wc, errorCallback)===false){
			return false;
		}
	}

	var scopename = kony.sync.scopes.syncTableScopeDic[tablename];
	if (markForUpload == "false" || markForUpload == false) {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.updateColStatusDU;
	} else {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.updateColStatus;
	}
	values[kony.sync.mainTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
	// update the flag only if this record is present on server

	var resultSet = kony.sync.updateEx(tx, tablename, values, wc, errorCallback);

	var updateResult = {}
	if(resultSet===false){
		return false;
	}else{
		updateResult[kony.sync.numberOfRowsUpdated] = resultSet.rowsAffected
		//kony.sync.verifyAndCallClosure(update_callback, {kony.sync.numberOfRowsUpdated:resultSet.rowsAffected});
	}
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_select(query, null);

	kony.sync.qb_from(query, tablename);

	kony.sync.qb_where(query, wc);
	//local sql = "select * from "..tablename..wc;
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];

	var syncorder = kony.sync.getSyncOrder(scopename, tx, errorCallback);
	if(syncorder===false){
		return false;
	}
	resultset = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultset == false) {
		return false;
	}
	var record = kony.db.sqlResultsetRowItem(tx, resultset, 0);
	if ((syncorder != null)) {
		record[kony.sync.historyTableReplaySequenceColumn] = syncorder + 1;
		if (markForUpload == "false" || markForUpload == false) {
			record[kony.sync.historyTableChangeTypeColumn] = kony.sync.updateColStatusDU;
		} else {
			record[kony.sync.historyTableChangeTypeColumn] = kony.sync.updateColStatus;
		}
		record[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
		if(kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, record, errorCallback) === false){
			return false;
		}
		if(kony.sync.setSyncOrder(scopename, syncorder + 1, tx, errorCallback) === false) {
			return false;
		}
	} else {
		// not expected to come here
		kony.sync.syncPrint("Invalid sync order in insert function");
	}
	//}
	//kony.sync.verifyAndCallClosure(update_callback, updateResult);
	return updateResult;
};
//function updateBatch(tx, tablename, values, wc, update_callback, isTrack)
kony.sync.updateBatch = function (tx, tablename, values, wc, markForUpload, errorCallback, primaryKey) {
	
	//adding original values to rollback tables if exists
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0] + " " + wc;
	var params = query_compile[1];
	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback, null, "Adding original values to rollback tables if exists");
	if (resultSet == false) {
		return false;
	}
	var num_records = resultSet.rows.length;
	for (var i = 0; i < num_records; i++) {
		var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
		if (markForUpload == "false" || markForUpload == false) {
			record[kony.sync.originalTableChangeTypeColumn] = kony.sync.updateColStatusDU;
		} else {
			record[kony.sync.originalTableChangeTypeColumn] = kony.sync.updateColStatus;
		}
		record[kony.sync.originalTableSyncVersionColumn] = record[kony.sync.originalTableChangeTypeColumn];
		record[kony.sync.mainTableChangeTypeColumn] = null;
		record[kony.sync.mainTableSyncVersionColumn] = null;
		//record[kony.sync.mainTableHashSumColumn] = null;
		kony.sync.insertEx(tx, tablename + kony.sync.originalTableName, record, null, false);
	}
	
	//Get Primary Key from where clause
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0] + " " + wc;
	var params = query_compile[1];

	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultSet === false) {
		return false;
	}
	var num_records = resultSet.rows.length;
	var pkSet = [];
	for (var i = 0; i < num_records; i++) {
		var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
		var pkRecord = [];
		for(var j in primaryKey){
			pkRecord.push({"key":primaryKey[j], "value":record[primaryKey[j]]})
		}
		pkSet.push(pkRecord);
	}
	
	
	//updating main tables
	var scopename = kony.sync.scopes.syncTableScopeDic[tablename];
	if (markForUpload == "false" || markForUpload == false) {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.updateColStatusDU;
	} else {
		values[kony.sync.mainTableChangeTypeColumn] = kony.sync.updateColStatus;
	}
	values[kony.sync.mainTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
	// update the flag only if this record is present on server
	resultSet = kony.sync.updateEx(tx, tablename, values, wc, errorCallback, true);
	var updateResult = {}
	if(resultSet===false){
		return false;
	}else{
		updateResult[kony.sync.numberOfRowsUpdated] = resultSet.rowsAffected
		//kony.sync.verifyAndCallClosure(update_callback, {kony.sync.numberOfRowsUpdated:resultSet.rowsAffected});
	}
	//adding change replay to history tables
/*	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0] + " " + wc;
	var params = query_compile[1];
	var syncorder = kony.sync.getSyncOrder(scopename, tx, errorCallback);
	if(syncorder === false){
		throw("");
	}
	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultSet === false) {
		throw("");
	}
	var num_records = resultSet.rows.length;
	if ((syncorder != null)) {
		for (var i = 0; i < num_records; i++) {
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			syncorder = syncorder + 1;
			record[kony.sync.historyTableReplaySequenceColumn] = syncorder;
			if (markForUpload == false || markForUpload == "false") {
				values[kony.sync.historyTableChangeTypeColumn] = kony.sync.updateColStatusDU;
			} else {
				values[kony.sync.historyTableChangeTypeColumn] = kony.sync.updateColStatus;
			}
			record[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
			if(kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, record, null)===false){
				throw("");
			}
		}
		if(kony.sync.setSyncOrder(scopename, syncorder, tx, errorCallback)===false){
				throw("");
		}
	} else {
		//not expected to come here
		kony.sync.syncPrint("Invalid sync order in insert function");
	}
	*/
	var syncorder = kony.sync.getSyncOrder(scopename, tx, errorCallback);
	if(syncorder === false){
		return false;
	}
	for(var i in pkSet){
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_select(query, null);
		kony.sync.qb_from(query, tablename);
		kony.sync.qb_where(query, pkSet[i]);
		var query_compile = kony.sync.qb_compile(query);
		var sql = query_compile[0];
		var params = query_compile[1];
		var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
		if (resultSet === false) {
			return false;
		}
		var record = kony.db.sqlResultsetRowItem(tx, resultSet, 0);
		syncorder = syncorder + 1;
		record[kony.sync.historyTableReplaySequenceColumn] = syncorder;
		record[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
		if(kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, record, null)===false){
			return false;
		}		
	}
	if(kony.sync.setSyncOrder(scopename, syncorder, tx, errorCallback)===false){
		return false;
	}
	//kony.sync.verifyAndCallClosure(update_callback, updateResult);
	return updateResult;
}

//function updateEx (tx, tablename, values,wc,update_callback, isBatch)
kony.sync.updateEx = function (tx, tablename, values, wc, update_callback, isBatch) {
	var syncTable = kony.sync.getSyncTable(tablename);
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_set(query, values);
	kony.sync.qb_update(query, tablename);
	if ((null == isBatch)) {
		kony.sync.qb_where(query, wc);
	}
	//local sqlUpdate = "update "..tablename.." set "..updateStr..wc;
	var query_compile = kony.sync.qb_compile(query);
	var sqlUpdate = "";
	if ((null != isBatch && isBatch == true)) {
		sqlUpdate = query_compile[0] + " " + wc;
	} else {
		sqlUpdate = query_compile[0];
	}
	var params = query_compile[1];

	return kony.sync.executeSql(tx, sqlUpdate, params, update_callback);

}; 

kony.sync.upsertEx = function (tx, tablename, values, wc, callback) {
	//#ifdef android
	//Check whether row exists or not
	//OLD Implementation
	if ((kony.sync.isrowexists(tx, tablename, wc, callback))) {
		//Do an update
		kony.sync.serverUpdateCount = kony.sync.serverUpdateCount + 1;
		// update if the user hasn't changed the record
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] + 1;
		kony.sync.updateEx(tx, tablename, values, wc);
	} else {
		//Do an Insert
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] + 1;
		kony.sync.insertEx(tx, tablename, values, callback);
		kony.sync.serverInsertCount = kony.sync.serverInsertCount + 1;
	}
	//#else
	var result = kony.sync.purgeInsertEx(tx, tablename, values, callback);
	if (result != null && result["rowsAffected"] == 0) {
		kony.sync.serverUpdateCount = kony.sync.serverUpdateCount + 1;
		// update if the user hasn't changed the record
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] + 1;
		kony.sync.updateEx(tx, tablename, values, wc);
	} else {
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] + 1;
		kony.sync.serverInsertCount = kony.sync.serverInsertCount + 1;
	}
	//#endif
};
//function isrowexists(tx,tablename, wc)
kony.sync.isrowexists = function (tx, tablename, wc, errorCallback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	kony.sync.qb_where(query, wc);
	//local sql = "select * from "..tablename..wc;
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	var resultset = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultset === false) {
		return false;
	}
	if (resultset.rows.length == 1) {
		return true;
	} else {
		return null; //if row already exists, we should add to rollback table
	}
};

//Function to delete one(batch)change
kony.sync.remove = function (tx, tablename, wc, isLocal, markForUpload, errorCallback) {

	//Check if it is original or save the original state.
	if (isLocal != "true" && isLocal != true) {
		if (markForUpload == "false" || markForUpload == false) {
			if(kony.sync.addToRollBack(tx, tablename, null, kony.sync.deleteColStatusDD, wc, errorCallback) === false) {
				return false;
			}
		} else {
			if(kony.sync.addToRollBack(tx, tablename, null, kony.sync.deleteColStatus, wc, errorCallback) === false) {
				return false;
			}
		}
	}

	//Getting the records with the where clause
	var scopename = kony.sync.scopes.syncTableScopeDic[tablename];
	var scope = kony.sync.scopes[scopename];
	var syncTable = scope.syncTableDic[tablename];

	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	kony.sync.qb_where(query, wc);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultSet == false) {
		return false;
	}
	var num_records = resultSet.rows.length;
	var rowsDeleted = 0;
	for (var i = 0; i <= num_records - 1; i++) {
		//adding changes to history table
		if(isLocal != "true" && isLocal != true) {
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			var values = [];
			values[kony.sync.historyTableHashSumColumn] = record[kony.sync.mainTableHashSumColumn];
			for (var i = 1;
				((syncTable.Columns) != null) && i <= syncTable.Columns.length; i++) {
				var column = syncTable.Columns[kony.decrement(i)];
				values[column.Name] = record[column.Name];
			}
			var syncorder = kony.sync.getSyncOrder(scopename, tx, errorCallback);
			if(syncorder ===false){
				return false;
			}
			if ((syncorder != null)) {
				values[kony.sync.historyTableReplaySequenceColumn] = syncorder + 1;
				if (markForUpload == false || markForUpload == "false") {
					values[kony.sync.historyTableChangeTypeColumn] = kony.sync.deleteColStatusDD;
				} else {
					values[kony.sync.historyTableChangeTypeColumn] = kony.sync.deleteColStatus;
				}
				values[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
				if(kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, values, null, errorCallback) === false){
					return false;
				}
				if(kony.sync.setSyncOrder(scopename, syncorder + 1, tx, errorCallback) === false) {
					return false;
				}
			} else {
				// not expected to come here
				kony.sync.syncPrint("Invalid sync order in insert function");
			}
		} else {
			//deleting all local changes from history
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			kony.sync.syncPrint("Removing Local Changes:" + record);
			var query = kony.sync.qb_createQuery();
			kony.sync.qb_delete(query, null);
			kony.sync.qb_from(query, tablename + kony.sync.historyTableName);
			kony.sync.qb_where(query, wc);
			var query_compile = kony.sync.qb_compile(query);
			var sql = "";
			var params = query_compile[1];
			sql = query_compile[0];
			if(kony.sync.executeSql(tx, sql, params, errorCallback) === false){
				return false;
			}

			//deleting all local changes from original
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			kony.sync.syncPrint("Removing Local Changes from original:" + record);
			var query = kony.sync.qb_createQuery();
			kony.sync.qb_delete(query, null);
			kony.sync.qb_from(query, tablename + kony.sync.originalTableName);
			kony.sync.qb_where(query, wc);
			var query_compile = kony.sync.qb_compile(query);
			var sql = query_compile[0];
			var params = query_compile[1];
			if(kony.sync.executeSql(tx, sql, params, errorCallback) === false){
				return false;
			}
		}
		//deleting from main table
		var resultSet1 = kony.sync.removeEx(tx, tablename, wc, null , errorCallback);
		if(resultSet1===false){
			return false;
		}
		rowsDeleted = rowsDeleted + resultSet1.rowsAffected
	}
	var deleteResult = {}
	deleteResult[kony.sync.numberOfRowsDeleted] = rowsDeleted;
	return deleteResult;
};

//Function to delete more than one(batch)changes
kony.sync.deleteBatch = function (tx, tablename, wc, isLocal, markForUpload, errorCallback) {

	var scopename = kony.sync.scopes.syncTableScopeDic[tablename];
	var scope = kony.sync.scopes[scopename];
	var syncTable = scope.syncTableDic[tablename];

	//adding original values to rollback tables if exists
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0] + " " + wc;
	var params = query_compile[1];
	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultSet === false) {
		return false;
	}
	var num_records = resultSet.rows.length;
	for (var i = 0; i <= num_records - 1; i++) {
		var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
		record[kony.sync.originalTableChangeTypeColumn] = kony.sync.deleteColStatus;
		record[kony.sync.originalTableSyncVersionColumn] = record[kony.sync.originalTableChangeTypeColumn];
		record[kony.sync.mainTableChangeTypeColumn] = null;
		record[kony.sync.mainTableSyncVersionColumn] = null;
		//record[kony.sync.mainTableHashSumColumn] = null;
		kony.sync.insertEx(tx, tablename + kony.sync.originalTableName, record, null, false);
	}

	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0] + " " + wc;
	var params = query_compile[1];
	var syncorder = kony.sync.getSyncOrder(scopename, tx, errorCallback);
	if(syncorder === false){
		return false;
	}
	var resultSet = kony.sync.executeSql(tx, sql, params, errorCallback);
	if(resultSet === false){
		return false;
	}
	var num_records = resultSet.rows.length;
	if ((syncorder != null)) {
		for (var i = 0; i <= num_records - 1; i++) {
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			//adding change replay to history tables
			if (isLocal == false) {
				var values = [];
				syncorder = syncorder + 1;
				record[kony.sync.historyTableReplaySequenceColumn] = syncorder;
				if (markForUpload == false || markForUpload == "false") {
					record[kony.sync.historyTableChangeTypeColumn] = kony.sync.deleteColStatusDD;
				} else {
					record[kony.sync.historyTableChangeTypeColumn] = kony.sync.deleteColStatus;
				}
				record[kony.sync.historyTableSyncVersionColumn] = kony.sync.currentSyncScopesState[scopename];
				if(kony.sync.insertEx(tx, tablename + kony.sync.historyTableName, record, errorCallback)===false){
					return false;
				}
			}
			//deleting local changes from history table
			else {
				kony.sync.syncPrint("Removing Local Changes:" + record);
				var query = kony.sync.qb_createQuery();
				kony.sync.qb_delete(query, null);
				kony.sync.qb_from(query, tablename + kony.sync.historyTableName);
				var query_compile = kony.sync.qb_compile(query);
				var sql = query_compile[0] + " " + wc;
				var params = query_compile[1];				
				if(kony.sync.executeSql(tx, sql, params, errorCallback)===false){
					return false;
				}
			}
		}
		if(kony.sync.setSyncOrder(scopename, syncorder, tx, errorCallback)===false){
			return false;
		}
	} else {
		// not expected to come here
		kony.sync.syncPrint("Invalid sync order in insert function");
	}
	//deleting main tables
	resultSet = kony.sync.removeEx(tx, tablename, wc, true, errorCallback);
	if(resultSet === false){
		return false;
	}
	var deleteResult = {}
	deleteResult[kony.sync.numberOfRowsDeleted] = resultSet.rowsAffected;
	return deleteResult;
};

//function deleteEx (tx, tablename, wc, isBatch)
kony.sync.removeEx = function (tx, tablename, wc, isBatch, errorcallback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_delete(query, tablename);
	if ((null == isBatch)) {
		kony.sync.qb_where(query, wc);
	}
	//local sql = "delete from "..tablename.." "..wc;
	var query_compile = kony.sync.qb_compile(query);
	var sql = "";
	if ((null != isBatch && isBatch == true)) {
		sql = query_compile[0] + " " + wc;
	} else {
		sql = query_compile[0];
	}
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params, errorcallback);
};
//function addToRollBack(tx,tablename,values,changetype,wcs)
kony.sync.addToRollBack = function (tx, tablename, values, changetype, wcs, errorCallback) {
	var originalwcs = kony.sync.CreateCopy(wcs);
	var originalvalues = kony.sync.CreateCopy(values);

	if ((changetype == kony.sync.insertColStatus) || (changetype == kony.sync.insertColStatusDI)) {
		originalvalues[kony.sync.originalTableChangeTypeColumn] = changetype;
		originalvalues[kony.sync.originalTableSyncVersionColumn] = null;
		originalvalues[kony.sync.mainTableChangeTypeColumn] = null;
		originalvalues[kony.sync.mainTableSyncVersionColumn] = null;
		originalvalues[kony.sync.mainTableHashSumColumn] = null;

		if (kony.sync.insertEx(tx, tablename + kony.sync.originalTableName, originalvalues, null, false) === false) {
			return false;
		} else {
			return true;
		}
	}
	var rowExists = kony.sync.isrowexists(tx, tablename + kony.sync.originalTableName, wcs)
		if (rowExists === true) {
			//Original State is already saved, no need to save again
		} else if (rowExists === false) {
			return false;
		} else {
			//local originalwcs1 = originalwcs;
			kony.table.insert(originalwcs, {
				key : kony.sync.mainTableChangeTypeColumn,
				value : "nil"
			});
			//table.insert(originalwcs,{key = kony.sync.mainTableChangeTypeColumn, value = "-1"})
			var record = kony.sync.getOriginalRow(tx, tablename, originalwcs, errorCallback);
			if (record === false) {
				return false;
			}
			if ((record == null)) {
				kony.table.remove(originalwcs);
				kony.table.insert(originalwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : "-1",
					optype : "EQ",
					comptype : "OR"
				});
				kony.table.insert(originalwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : changetype,
					optype : "EQ",
					comptype : "OR"
				});
				kony.table.insert(originalwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : "90",
					optype : "EQ",
					comptype : "OR"
				})
				kony.table.insert(originalwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : "91",
					optype : "EQ"
				})
				record = kony.sync.getOriginalRow(tx, tablename, originalwcs, errorCallback);
				if (record === false) {
					return false;
				}
			}
			if ((record != null)) {
				//Records not equal to nil means that it is not pending to be uploaded. So original state has to saved.
				record[kony.sync.originalTableChangeTypeColumn] = changetype;
				record[kony.sync.originalTableSyncVersionColumn] = record[kony.sync.mainTableSyncVersionColumn];
				record[kony.sync.mainTableChangeTypeColumn] = null;
				record[kony.sync.mainTableSyncVersionColumn] = null;
				//record[kony.sync.mainTableHashSumColumn] = null;
				record[kony.sync.mainTableHashSumColumn] = record[kony.sync.originalTableHashSumColumn];
				return kony.sync.insertEx(tx, tablename + kony.sync.originalTableName, record);
			}
		}
};
//function getOriginalRow(tx,tablename,wcs)
kony.sync.getOriginalRow = function (tx, tablename, wcs, errorcallback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, tablename);
	kony.sync.qb_where(query, wcs);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	var resultset = kony.sync.executeSql(tx, sql, params, errorcallback);
	if (!resultset) {
		return false;
	}
	if (resultset.rows.length == 1) {
		return kony.db.sqlResultsetRowItem(tx, resultset, 0);
	} else {
		return null;
	}
};

kony.sync.syncDropDatabase = function (dbList, successcallback, errorcallback) {
	kony.sync.syncPrint("Dropping database list " + dbList);
	var callback_result = [];
	var isError = false;

	function single_transaction_success_callback(res) {
		kony.sync.syncPrint("Single Select callback result:" + res);
		if ((null != dbList && null != dbList[0] && null != dbList[0].dbname)) {
			dbname = dbList[0].dbname;
			//var connection1 = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
			//kony.db.transaction(connection1, single_transaction_callback, single_transaction_error_callback, single_transaction_success_callback);
			var connection1 = kony.sync.getConnectionOnly(dbname, dbname);
			kony.sync.startTransaction(connection1, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback);
		} else {
			kony.sync.syncPrint("Reinitializing...");
			sync.init(successcallback, errorcallback);
		}
	}

	function single_transaction_callback(tx) {
		kony.sync.syncPrint("Dropping database " + dbList[0].dbname);
		for (var i in dbList[0].tableList) {
			var v = dbList[0].tableList[kony.decrement(i)];
			if(kony.sync.dropTable(tx, v)===false){
				isError = true;
				return;
			}
		}
		dbList = dbList.slice(1);
	}

	function single_transaction_error_callback(res) {
		kony.sync.syncPrint("Sync Reset failed " + res);
		//kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getSyncResetFailed());
		kony.sync.isResetInProgress = false;
		kony.sync.callTransactionError(isError, errorcallback);
	}
	var dbname = dbList[0].dbname;
	var connection = kony.sync.getConnectionOnly(dbname, dbname);
	kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback);
};

kony.sync.dropTable = function (tx, tablename) {
	kony.sync.syncPrint("Dropping tablename " + tablename);
	var query = null;
	if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLCE)) {
		query = "Drop Table " + tablename;
	} else if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLLite)) {
		query = "Drop Table if exists " + tablename;
	}
	return kony.sync.executeSql(tx, query, null);
};
//  **************** End KonySyncDBOperations.js*******************


//  **************** Start KonySyncDownload.js*******************
kony.sync.syncDownloadChanges = function (sname, dbname, onCompletion){
	kony.sync.onDownloadCompletion = onCompletion;
	kony.sync.resetbatchsessionglobals();
	kony.sync.syncPrint("[KonySync]Download started for scope :" + sname);
	current_sync_scopefilter = null;
	if ((kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)] != null && (kony.type(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)]) == "table" || kony.type(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)]) == "Object" || kony.type(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)]) == "object"))) {
		var scopeFilter = kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)][kony.decrement(kony.sync.currentScope[kony.sync.scopeName])];
		kony.sync.syncPrint("scope Filter for " + kony.sync.currentScope[kony.sync.scopeName] + " is :" + scopeFilter);
		if ((scopeFilter == null)) {
			kony.sync.getLastSynctime(sname, dbname, kony.sync.syncDownloadchangesGetLastSynctime);
		} else {
			current_sync_scopefilter_index = 1;
			kony.sync.syncDownloadbyFilter(current_sync_scopefilter_index);
		}
	} else {
		kony.sync.getLastSynctime(sname, dbname, kony.sync.syncDownloadchangesGetLastSynctime);
	}
};

kony.sync.syncDownloadbyFilter = function (index) {
	var scopeFilter = kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.filterParams)][kony.decrement(kony.sync.currentScope[kony.sync.scopeName])];
	if ((index <= scopeFilter.length)) {
		var scopejsonfilter = {
			"d" : scopeFilter[kony.decrement(index)]
		}
		var filtervaluejson = JSON.stringify(scopejsonfilter);
		kony.sync.syncPrint(filtervaluejson);
		current_sync_scopefilter = scopeFilter[kony.decrement(index)];
		kony.sync.getLastSynctimeFilter(kony.sync.currentScope[kony.sync.scopeName], filtervaluejson, kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.syncDownloadchangesGetLastSynctime);
	} else {
		kony.sync.globalIsDownloadStarted = true;
		kony.sync.onDownloadCompletion(false, null);
	}
};
//function syncDownloadchangesGetLastSynctime(rowItem)
kony.sync.syncDownloadchangesGetLastSynctime = function(rowItem) {
    var lastsynctime = rowItem[0][kony.decrement(kony.sync.metaTableSyncTimeColumn)];
    kony.sync.syncPrint("Last Sync Time with Server : " + lastsynctime);     
	//kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.lastSyncTimestamp)] = lastsynctime;    
    
    var serverChanges = null;
    var startTime = new Date();
	var isError = false;
	
    function downloadNextBatch(tx) {
        //kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onDownloadStart],kony.sync.currentSyncReturnParams);
        kony.sync.syncPrint("[KonySync] ServerChanges:" + serverChanges);
        if ((serverChanges[kony.decrement("opstatus")] != null && serverChanges[kony.decrement("opstatus")] != 0)) {
            kony.sync.globalIsDownloadStarted = true;
			if (serverChanges.d != null) {
				kony.sync.onDownloadCompletion(true, kony.sync.getServerError(serverChanges.d, "download"));
			} else {                   
				kony.sync.onDownloadCompletion(true, kony.sync.getServerError(serverChanges));
			}
            return;
        }
        if ((serverChanges[kony.decrement("d")][kony.decrement("error")] == "true")) {            
            kony.sync.globalIsDownloadStarted = true;
            //kony.sync.onDownloadCompletion(true,serverChanges[kony.decrement("d")]);
			kony.sync.onDownloadCompletion(true,kony.sync.getServerError(serverChanges["d"],"download"));
            return;
        }
        //kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onDownloadSuccess],kony.sync.currentSyncReturnParams);		
        var morechanges = serverChanges["d"]["__sync"]["moreChangesAvailable"];
        var serverblob = serverChanges["d"]["__sync"]["serverblob"];
		kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.lastSyncTimestamp)] = serverblob;    
        if(kony.sync.isApplyChangesSync()){
        	if(kony.sync.applyChanges(tx, kony.sync.currentScope, serverChanges)===false){
				isError = true;
				return;
			}
        	if(kony.sync.postApplyChanges(tx,serverblob, morechanges)===false){
				isError = true;
				return;
			}
        }else{
        	kony.sync.applyChangesAsync(tx, kony.sync.currentScope, serverChanges, serverblob, morechanges)
        }    
    }

    function downloadCompleted() {		
    	if(kony.sync.globalIsDownloadStarted){
    		//This means that download has failed and variable is reset;
    		return;
    	}
		var endTime = new Date();
		var diff = endTime.getTime() - startTime.getTime();
		kony.sync.syncPrint("Time Taken for Batch Insertion Download : "+diff);		
		kony.sync.batchInsertionTimer = kony.sync.batchInsertionTimer + diff;	
        var params = {};
       params[kony.decrement("pending_batches")] = kony.sync.tonumber(kony.sync.syncPendingBatchesNo)  
        ;
        //params[kony.decrement("totalchanges")] = "Total Changes :" + totalChanges;
        params[kony.decrement("serverinsertcount")] = "Server Insert Count :" + kony.sync.serverInsertCount;
        params[kony.decrement("serverupdatecount")] = "Server Update Count :" + kony.sync.serverUpdateCount;
        params[kony.decrement("serverinsertackcount")] = "Server Insert Ack Count :" + kony.sync.serverInsertAckCount;
        params[kony.decrement("serverupdateackcount")] = "Server Update Ack Count :" + kony.sync.serverUpdateAckCount;
        kony.sync.syncPrint("@@@@@@" + params);
        kony.table.insert(kony.sync.currentSyncLog, params);
        var batchcontext = {};
        kony.sync.syncPrint(kony.sync.serverInsertCount);
        batchcontext[kony.decrement(kony.sync.numberOfRowsDownloaded)] = kony.sync.serverInsertCount + kony.sync.serverUpdateCount + kony.sync.serverDeleteCount;
        batchcontext[kony.decrement(kony.sync.numberOfRowsInserted)] = kony.sync.serverInsertCount;
        batchcontext[kony.decrement(kony.sync.numberOfRowsUpdated)] = kony.sync.serverUpdateCount;
        batchcontext[kony.decrement(kony.sync.numberOfRowsDeleted)] = kony.sync.serverDeleteCount;
		batchcontext[kony.sync.numberOfRowsFailedtoUpload] = kony.sync.serverFailedCount;
		batchcontext[kony.sync.failedRowInfo] = kony.sync.uploadSummary;
		batchcontext[kony.sync.objectLevelInfo] = kony.sync.objectLevelInfoMap;

		kony.sync.objectLevelInfoMap = {};
		if ((kony.sync.currentScope[kony.sync.syncStrategy] != kony.sync.syncStrategy_OTA)) {
			batchcontext[kony.decrement(kony.sync.numberOfRowsAcknowledged)] = kony.sync.serverInsertAckCount + kony.sync.serverUpdateAckCount + kony.sync.serverDeleteAckCount;
			batchcontext[kony.decrement(kony.sync.numberOfRowsInsertedAck)] = kony.sync.serverInsertAckCount;
			batchcontext[kony.decrement(kony.sync.numberOfRowsUpdatedAck)] = kony.sync.serverUpdateAckCount;
			batchcontext[kony.decrement(kony.sync.numberOfRowsDeletedAck)] = kony.sync.serverDeleteAckCount;
		}
		batchcontext[kony.decrement(kony.sync.pendingBatches)] = kony.sync.tonumber(kony.sync.syncPendingBatchesNo);
		kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.batchContext)] = batchcontext;
		kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onBatchProcessingSuccess)], kony.sync.currentSyncReturnParams);
		if ((kony.sync.moreChangesAvailable)) {
			kony.sync.syncDownloadChanges(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.onDownloadCompletion);
		} else {
			kony.sync.printScopeLog(kony.sync.currentSyncLog);
			delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.batchContext)]

			//clearing sync order and then deleting records after upload
			if (kony.sync.isUploadErrorPolicyCOE(kony.sync.currentScope)) {
				kony.sync.updateSyncOrderForScope(removeAfterUpload);
			} else {
				removeAfterUpload();
			}
		}
	}
	//wrapper for removeafterupload
	function removeAfterUpload() {
		kony.sync.deleteRecordsAfterUpload(postDownloadProcessing);
	}

	//This function should be called after finishing all post download tasks like removeafterupload
	function postDownloadProcessing(code) {
		if(code===0){
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onDownloadSuccess)], kony.sync.currentSyncReturnParams);
			if ((current_sync_scopefilter != null)) {
				kony.sync.syncDownloadbyFilter(current_sync_scopefilter_index + 1);
			} else {
				kony.sync.globalIsDownloadStarted = true;
				kony.sync.onDownloadCompletion(false, null);
			}
		}
		else{
			//statement error
			if(code===kony.sync.errorCodeSQLStatement){
				kony.sync.downloadFailed(true);
			}
			//transaction error
			else{
				kony.sync.downloadFailed(false);
			}
		}
	}

	function downloadcallback(serverChangesResult) {
		var endTime = new Date();
		var diff = endTime.getTime() - startTime.getTime();
		kony.sync.syncPrint("Time Taken for Network Batch Download : "+diff);		
		kony.sync.batchDownloadTimer = kony.sync.batchDownloadTimer + diff;	
    	serverChanges = serverChangesResult;
    	var dbname = kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)];
    	//var dbconnection = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
		var dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
    	if(kony.sync.isApplyChangesSync()){
        	kony.db.transaction(dbconnection, downloadNextBatch, downloadNextBatchFailed, downloadCompleted);
        }else{
        	kony.db.transaction(dbconnection, downloadNextBatch, downloadNextBatchFailed, downloadCompleted,{isCommitTransaction:false});
        }     	
    }
    function downloadNextBatchFailed(){
		kony.sync.downloadFailed(isError);
	}
	
	function scopeSettingsCallback(isInitialized) {
		kony.sync.konyDownloadChanges(lastsynctime, null, downloadcallback, isInitialized);
	}
	kony.sync.isScopeInitialized(kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.sync.scopeDataSource], scopeSettingsCallback);
};

kony.sync.downloadFailed = function (dbError) {
	kony.sync.gSyncFailed = true;
	kony.sync.globalIsDownloadStarted = true;
	//kony.sync.onDownloadCompletion(true, JSON.stringify(connection));
	kony.sync.syncPrint("[KonySync]Scope Download Failed");
	if (!dbError) {
		kony.sync.onDownloadCompletion(true, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
	}
	else{
		kony.sync.onDownloadCompletion(true, kony.sync.errorObject);
		kony.sync.errorObject = null;
	}
}

//function applyChanges (tx,currentScope, serverChanges)
kony.sync.applyChanges = function (tx, currentScope, serverChanges) {
	kony.sync.syncPrint("Applying Changes from Server................... ----------->");
	var results = serverChanges[kony.decrement("d")][kony.decrement("results")];
	if (results != null) {
		return kony.sync.applyChangesToDB({
			"tx" : tx,
			"currentScope" : currentScope,
			"results" : results,
			"startposition" : 0,
			"endposition" : results.length
		})
	}
};

kony.sync.postApplyChanges = function (tx, serverblob, moreChangesAvailable) {
	if ((current_sync_scopefilter != null)) {
		var scopejsonfilter = {
			"d" : current_sync_scopefilter
		};
		var filtervaluejson = JSON.stringify(scopejsonfilter);
		if(kony.sync.setLastSyncTimeFilter(tx, kony.sync.currentScope[kony.sync.scopeName], filtervaluejson, null, serverblob)===false){
			return false;
		}
	} else {
		if(kony.sync.setLastSyncTime(tx, kony.sync.currentScope[kony.sync.scopeName], null, serverblob)===false){
			return false;
		}
	}
	//shrink memory execution
	kony.db.executeSql(tx, "PRAGMA shrink_memory");
	if (moreChangesAvailable != null) {
		var temp = moreChangesAvailable;
		temp = temp + "";
		temp = temp.toLowerCase();
		if ((temp == "true")) {
			//Enable below code if PendingBatches is implemented.
			//if ((serverChanges[kony.decrement("d")][kony.decrement("__sync")][kony.decrement("pendingBatches")] != null)) {
			//    kony.sync.syncPendingBatchesNo = serverChanges[kony.decrement("d")][kony.decrement("__sync")][kony.decrement("pendingBatches")];
			//}
			kony.sync.moreChangesAvailable = true;
		} else {
			kony.sync.moreChangesAvailable = false;
		}
	} else {
		kony.sync.moreChangesAvailable = false;
	}
	kony.sync.syncPrint("more changes available" + kony.sync.moreChangesAvailable);
	if (!kony.sync.moreChangesAvailable) {
		//After Every successfull Scope download completion we will check and update the Scope Settings to make that scope Initialized;
		if(kony.sync.updateScopeSettings(tx, kony.sync.currentScope[kony.sync.scopeName])===false){
			return false;
		}
	}
}

kony.sync.applyChangesAsync = function (tx, currentScope, serverChanges, serverblob, morechanges) {
	kony.sync.syncPrint("Applying Changes from Server................... ----------->");
	var results = serverChanges[kony.decrement("d")][kony.decrement("results")];
	var bbBatchSize = kony.sync.getAsyncDownloadBatchSize();
	var lastbatch = results.length % bbBatchSize;
	var noofloops = (results.length - lastbatch) / bbBatchSize;

	var context = {
		"tx" : tx,
		counter : 0,
		"currentScope" : currentScope,
		"results" : results,
		"noofloops" : noofloops,
		"lastbatch" : lastbatch,
		"serverblob" : serverblob,
		"morechanges" : morechanges
	};
	kony.sync.syncPrint("sending context");
	kony.api.executeAsync(kony.sync.applyChangesToDBAsync, context)
}

kony.sync.applyChangesToDBAsync = function (context) {
	kony.sync.syncPrint("point ******b : " + JSON.stringify(context));
	if (context.counter >= context.noofloops) {
		if (context.lastbatch > 0) {
			context.startposition = context.counter * kony.sync.getAsyncDownloadBatchSize();
			context.endposition = context.startposition + context.lastbatch;
			kony.sync.applyChangesToDB(context);
			context.counter = context.counter + 1;
			context.lastbatch = 0;
			kony.api.executeAsync(kony.sync.applyChangesToDBAsync, context);
		} else {
			kony.sync.postApplyChanges(context.tx, context.serverblob, context.morechanges);
			kony.db.commitTransaction(context.tx);
		}

	} else {
		context.startposition = context.counter * kony.sync.getAsyncDownloadBatchSize();
		context.endposition = context.startposition + kony.sync.getAsyncDownloadBatchSize();
		kony.sync.applyChangesToDB(context);
		context.counter = context.counter + 1;
		kony.sync.syncPrint("point ******c : " + JSON.stringify(context));
		kony.api.executeAsync(kony.sync.applyChangesToDBAsync, context)
	}
}

kony.sync.applyChangesToDB = function (context) {
	var tx = context.tx;
	var currentScope = context.currentScope;
	var results = context.results;
	var startposition = context.startposition;
	var endposition = context.endposition;
	var newVersion = kony.sync.getseqnumber(tx, kony.sync.currentScope["ScopeName"]);
	var newVersionNo = newVersion["versionnumber"]
	//	local seqNumber = serverChanges["d"]["__sync"]["SequenceNumber"];
	var gotuploadres = false;

	for (var i = startposition;
		((results) != null) && i < endposition; i++) {
		var row = results[i];
		var tablename = row[kony.decrement("__metadata")][kony.decrement("type")];

		if (kony.sync.objectLevelInfoMap[tablename] == null) {
			kony.sync.objectLevelInfoMap[tablename] = {};
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDownloaded] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInsertedAck] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsAcknowledged] = 0;
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsFailedtoUpload] = 0;
		}

		var changeType = row["__metadata"]["changeType"];
		var values = [];
		var syncTable = kony.sync.currentScope.syncTableDic[tablename];
		var pkColumns = kony.sync.currentScope.syncTableDic[tablename].Pk_Columns;
		var pkwcs = [];
		var pkset = null;
		var pksetwcs = [];
		var currentversion = kony.sync.getCurrentVersionNumber(tablename);
		var MergedWithEIS = row[kony.sync.mergedWithEIS];
		var versionNumber = row[kony.sync.mainTableSyncVersionColumn];
		versionNumber = kony.sync.tonumber(versionNumber);

		if (kony.sync.queryStore[tablename + "purgeInsert"] == null) {
			values = kony.sync.removeprovisioncolumns(row, kony.sync.currentScope.syncTableDic[tablename].Columns, true);
		} else {
			values = kony.sync.removeprovisioncolumns(row, kony.sync.currentScope.syncTableDic[tablename].Columns, false);
		}
		if (MergedWithEIS != "1" && MergedWithEIS != "0") {
			if ((changeType == "update")) {
				//do purge logic here.
			//#ifdef android
				var result = kony.sync.purgeInsertEx(tx, tablename, values, false);
				if (result === false)
			//#else
				var result = kony.sync.purgeInsertEx(tx, tablename, values, true);
				if (result === false){
					return false;
				}
				if (result != null && result["rowsAffected"] == 0)
			//#endif
				{
					
					values = kony.sync.removeprovisioncolumns(row, kony.sync.currentScope.syncTableDic[tablename].Columns, true);
					for (var j = 0; (pkColumns != null) && j < pkColumns.length; j++) {
						var pk = pkColumns[j];
						if ((row[kony.sync.clientPKPrefix + pk] != null)) {
							//pkwc = pkwc.." "..pk.."='"..row["Client_"..pk].."'";
							//pkset = pkset.." "..pk.."='"..row[pk].."'";
							if ((pkset == null)) {
								pkset = [];
							}
							kony.table.insert(pkwcs, {
								key : pk,
								value : row[kony.sync.clientPKPrefix + pk]
							});
							pkset[pk] = row[pk];
							kony.table.insert(pksetwcs, {
								key : pk,
								value : row[pk]
							});
						} else {
							kony.table.insert(pkwcs, {
								key : pk,
								value : row[pk]
							});
						}
					}
					kony.table.insert(pkwcs, {
						key : kony.sync.mainTableChangeTypeColumn,
						value : "nil",
						optype : "EQ",
						comptype : "OR",
						openbrace : true
					});
					kony.table.insert(pkwcs, {
						key : kony.sync.mainTableChangeTypeColumn,
						value : -1,
						optype : "EQ",
						comptype : "OR",
						closebrace : true
					});
					/* kony.table.insert(pkwcs, {
					key: kony.sync.mainTableSyncVersionColumn,
					value: currentversion,
					optype : "EQ"
					});*/
					kony.sync.serverUpdateCount = kony.sync.serverUpdateCount + 1;
					// update if the user hasn't changed the record
					kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] + 1;
					if(kony.sync.updateEx(tx, tablename, values, pkwcs)===false){
						return false;
					}
				} else {
					kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] + 1;
					kony.sync.serverInsertCount = kony.sync.serverInsertCount + 1;
				}
			} else if ((changeType == "delete")) {
				values = kony.sync.removeprovisioncolumns(row, kony.sync.currentScope.syncTableDic[tablename].Columns, true);
				// delete the record if it hasn't been changed by the user
				for (var j = 0; (pkColumns != null) && j < pkColumns.length; j++) {
					var pk = pkColumns[j];
					if ((row[kony.sync.clientPKPrefix + pk] != null)) {
						//pkwc = pkwc.." "..pk.."='"..row["Client_"..pk].."'";
						//pkset = pkset.." "..pk.."='"..row[pk].."'";
						if ((pkset == null)) {
							pkset = [];
						}
						kony.table.insert(pkwcs, {
							key : pk,
							value : row[kony.sync.clientPKPrefix + pk]
						});
						pkset[pk] = row[pk];
						kony.table.insert(pksetwcs, {
							key : pk,
							value : row[pk]
						});
					} else {
						kony.table.insert(pkwcs, {
							key : pk,
							value : row[pk]
						});
					}
				}
				kony.table.insert(pkwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : "nil",
					optype : "EQ",
					comptype : "OR",
					openbrace : true
				});
				kony.table.insert(pkwcs, {
					key : kony.sync.mainTableChangeTypeColumn,
					value : -1,
					optype : "EQ",
					closebrace : true
				});
				kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted] + 1;
				kony.sync.serverDeleteCount = kony.sync.serverDeleteCount + 1;
				/*WARNING: Undefined method call for kony.sync.deleteEx*/
				if(kony.sync.removeEx(tx, tablename, pkwcs)===false){
					return false;
				}
			}

		} else {
			var pkTable = {};
			var originalChangeType = row[kony.sync.mainTableChangeTypeColumn];
			if (originalChangeType == null)
				originalChangeType = 1;
			values = kony.sync.removeprovisioncolumns(row, kony.sync.currentScope.syncTableDic[tablename].Columns, true);

			for (var j = 0; ((pkColumns) != null) && j < pkColumns.length; j++) {
				var pk = pkColumns[j];
				pkTable[pk] = row[pk]; //creating pk for uploadcontext
				if ((row[kony.sync.clientPKPrefix + pk] != null)) {
					if ((pkset == null)) {
						pkset = [];
					}
					kony.table.insert(pkwcs, {
						key : pk,
						value : row[kony.sync.clientPKPrefix + pk]
					});
					pkset[pk] = row[pk];
					kony.table.insert(pksetwcs, {
						key : pk,
						value : row[pk]
					});
				} else {
					kony.table.insert(pkwcs, {
						key : pk,
						value : row[pk]
					});
				}
			}
			kony.sync.syncPrint("Inside MergedWithEis");

			var isError = false;
			var prevErrors = 0;
			if (row["__metadata"]["intermediateErrors"] != null) {
				prevErrors = row["__metadata"]["intermediateErrors"].length
			}
			//checking for error on continueonerror upload policy
			if (row["__metadata"]["errorMessage"] != null) {
				kony.sync.serverFailedCount = kony.sync.serverFailedCount + 1 + prevErrors;
				kony.sync.uploadSummary.push({
					key : pkTable,
					type : row["__metadata"]["type"],
					errorMessage : row["__metadata"]["errorMessage"],
					errorRootCause : row["__metadata"]["errorRootCause"],
					intermediateErrors : row["__metadata"]["intermediateErrors"]
				});
				kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsFailedtoUpload] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsFailedtoUpload] + 1 + prevErrors;
				isError = true;
			}
			//checking for previous errors
			else if (prevErrors != 0) {
				kony.sync.uploadSummary.push({
					key : pkTable,
					type : row["__metadata"]["type"],
					errorMessage : null,
					errorRootCause : null,
					intermediateErrors : row["__metadata"]["intermediateErrors"]
				});
				kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsFailedtoUpload] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsFailedtoUpload] + prevErrors;
				kony.sync.serverFailedCount = kony.sync.serverFailedCount + prevErrors;
			}

			var settable = [];

			//remove row from history, original and main(in case of removeafterupload) tables for COE error upload policy if success
			if (isError == false) {
				var isRemoved = false;
				isRemoved = kony.sync.clearDataForCOE(tx, kony.sync.currentScope["ScopeName"], tablename, pkwcs, pksetwcs, changeType, pkset, row[kony.sync.historyTableReplaySequenceColumn]);
				//exit incase of SQL error
				if(isRemoved===0){
					return false;
				}
				//continue if removed to skip updates for same record
				if (isRemoved == true) {
					continue;
				}
				//if no error, change changetype to null in main table
				settable[kony.sync.mainTableChangeTypeColumn] = "nil";
			} else {
				//updating history table to make relationship data consistent
				var whereClause = kony.sync.CreateCopy(pkwcs);
				//versionMap[kony.sync.historyTableSyncVersionColumn] = versionNo[ "versionnumber"];
				kony.table.insert(whereClause, {
					key : kony.sync.historyTableReplaySequenceColumn,
					value : row[kony.sync.historyTableReplaySequenceColumn]
				});
				return kony.sync.updateEx(tx, tablename + kony.sync.historyTableName, values, pkwcs);

				//there is possiblity that record is deleted by an earlier successfull record, so insert it
				//if(kony.sync.checkForDeleteAfterUpload(tablename,kony.sync.currentScope["ScopeName"])==true){
				if (pkset != null) {
					whereClause = pksetwcs;
				} else {
					whereClause = pkwcs;
				}
				values[kony.sync.mainTableChangeTypeColumn] = originalChangeType;
				values[kony.sync.mainTableSyncVersionColumn] = newVersionNo + 1;

				var query = kony.sync.qb_createQuery();
				kony.sync.qb_select(query, null);
				kony.sync.qb_from(query, tablename);
				kony.sync.qb_where(query, whereClause);
				var query_compile = kony.sync.qb_compile(query);
				var sql = query_compile[0];
				var params = query_compile[1];
				var resultset = kony.sync.executeSql(tx, sql, params);
				if (resultset !== false) {
					var num_records = resultset.rows.length;
					//updated if not deleted
					if (num_records > 0) {
						kony.sync.updateEx(tx, tablename, values, whereClause);
					} else {
						query = kony.sync.qb_createQuery();
						kony.sync.qb_set(query, values);
						kony.sync.qb_insert(query, tablename);
						query_compile = kony.sync.qb_compile(query);
						sql = query_compile[0];
						params = query_compile[1];
						if(kony.sync.executeSql(tx, sql, params)===false){
							//exit incase of SQL error
							return false;
						}
					}
				}
				else{
					//exit incase of SQL error
					return false;
				}
				continue;
			}

			if (pkset != null) {
				// insert serverId
				var query = kony.sync.qb_createQuery();
				kony.sync.qb_update(query, tablename);
				kony.sync.qb_set(query, pkset);
				kony.sync.qb_where(query, pkwcs);
				var query_compile = kony.sync.qb_compile(query);

				var sql = query_compile[0];
				var params = query_compile[1];
				if(kony.sync.executeSql(tx, sql, params)===false){
					//exit incase of SQL error
					return false;
				}
				kony.table.insert(pksetwcs, {
					key : kony.sync.mainTableSyncVersionColumn,
					value : versionNumber
				});

				var query = kony.sync.qb_createQuery();
				kony.sync.qb_update(query, tablename);
				kony.sync.qb_set(query, settable);
				kony.sync.qb_where(query, pksetwcs);
				var query_compile = kony.sync.qb_compile(query);
				var sql = query_compile[0];
				var params = query_compile[1];
				if(kony.sync.executeSql(tx, sql, params)===false){
					//exit incase of SQL error
					return false;
				}
			} else {
				kony.table.insert(pkwcs, {
					key : kony.sync.mainTableSyncVersionColumn,
					value : versionNumber
				});
				var query = kony.sync.qb_createQuery();
				kony.sync.qb_update(query, tablename);
				kony.sync.qb_set(query, settable);
				kony.sync.qb_where(query, pkwcs);
				var query_compile = kony.sync.qb_compile(query);
				var sql = query_compile[0];
				var params = query_compile[1];
				if(kony.sync.executeSql(tx, sql, params)===false){
					//exit incase of SQL error
					return false;
				}
			}
			if (changeType == "update") {
				// clear the dirty flag
				kony.sync.syncPrint("update echo detected");
				if (isError) {
					values[kony.sync.mainTableChangeTypeColumn] = originalChangeType;
				} else {
					values[kony.sync.mainTableChangeTypeColumn] = "nil";
					values[kony.sync.mainTableSyncVersionColumn] = "nil";
				}
				//values[kony.sync.mainTableSyncVersionColumn] = nil;
				// update if the user hasn't changed again.
				if (pkset != null) {
					//table.insert(pksetwcs,{key = kony.sync.mainTableSyncVersionColumn, value = versionNumber})
					if(kony.sync.updateEx(tx, tablename, values, pksetwcs)===false){
						//exit incase of SQL error
						return false;
					}
				} else {
					//kony.sync.serverUpdateAckCount = kony.sync.serverUpdateAckCount + 1;
					kony.table.insert(pkwcs, {
						key : kony.sync.mainTableSyncVersionColumn,
						value : versionNumber
					});
					if(kony.sync.updateEx(tx, tablename, values, pkwcs)===false){
						//exit incase of SQL error
						return false;
					}
				}
			} else if ((changeType == "delete")) {
				if ((pkset != null)) {
					kony.table.insert(pksetwcs, {
						key : kony.sync.mainTableSyncVersionColumn,
						value : versionNumber
					});
					if(kony.sync.removeEx(tx, tablename, pksetwcs)===false){
						//exit incase of SQL error
						return false;
					}
				} else {
					kony.table.insert(pkwcs, {
						key : kony.sync.mainTableSyncVersionColumn,
						value : versionNumber
					});
					if(kony.sync.removeEx(tx, tablename, pkwcs)===false){
						//exit incase of SQL error
						return false;
					}
				}
			} 

		}
		/*old algo
		if ((MergedWithEIS == "1")) {
		kony.sync.syncPrint("Inside MergedWithEis");
		if ((pkset != null)) {
		// insert serverId
		kony.sync.serverInsertAckCount = kony.sync.serverInsertAckCount + 1;
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_update(query, tablename);
		kony.sync.qb_set(query, pkset);
		kony.sync.qb_where(query, pkwcs);
		var query_compile = kony.sync.qb_compile(query);
		var sql = query_compile[0];
		var params = query_compile[1];
		kony.db.executeSql(tx, sql, params);
		// TODO: update related tables foriegn keys
		// clear dirty flag if not updated again
		kony.table.insert(pksetwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: versionNumber
		});
		var settable = [];
		settable[kony.sync.mainTableChangeTypeColumn] = "nil";
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_update(query, tablename);
		kony.sync.qb_set(query, settable);
		kony.sync.qb_where(query, pksetwcs);
		var query_compile = kony.sync.qb_compile(query) ;
		var sql = query_compile[0];
		var params = query_compile[1];
		kony.sync.syncPrint(sql);
		kony.sync.syncPrint(params);
		kony.db.executeSql(tx, sql, params);
		} else {
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: versionNumber
		});
		var settable = [];
		settable[kony.sync.mainTableChangeTypeColumn] = "nil";
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_update(query, tablename);
		kony.sync.qb_set(query, settable);
		kony.sync.qb_where(query, pkwcs);
		var query_compile = kony.sync.qb_compile(query) ;
		var sql = query_compile[0];
		var params = query_compile[1];
		kony.db.executeSql(tx, sql, params);
		} //database.executesql (tx, "update "..tablename.." set "..kony.sync.mainTableChangeTypeColumn.." = null where "..pkwc.." and "..kony.sync.mainTableSyncVersionColumn.." = '"..versionNumber.."'");
		if ((changeType == "update")) {
		// clear the dirty flag
		kony.sync.syncPrint("update echo detected");
		values[kony.sync.mainTableChangeTypeColumn] = "nil";
		//values[kony.sync.mainTableSyncVersionColumn] = nil;
		// update if the user hasn't changed again.
		if ((pkset != null)) {
		//table.insert(pksetwcs,{key = kony.sync.mainTableSyncVersionColumn, value = versionNumber})
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck]=kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck]+1;
		kony.sync.updateEx(tx, tablename, values, pksetwcs);
		} else {
		kony.sync.serverUpdateAckCount = kony.sync.serverUpdateAckCount + 1;
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: versionNumber
		});
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck]=kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck]+1;
		kony.sync.updateEx(tx, tablename, values, pkwcs);
		} //kony.sync.updateEx(tx,tablename, values," where "..pkwc.." and "..kony.sync.mainTableSyncVersionColumn.." ='"..versionNumber.."'");
		} else if ((changeType == "delete")) {
		kony.sync.serverDeleteAckCount = kony.sync.serverDeleteAckCount + 1;
		if ((pkset != null)) {
		kony.table.insert(pksetwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: versionNumber
		});
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck]=kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck]+1
		kony.sync.removeEx(tx, tablename, pksetwcs);
		} else {
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: versionNumber
		});
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck]=kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck]+1
		kony.sync.removeEx(tx, tablename, pkwcs);
		} //kony.sync.updateEx(tx,tablename, values," where "..pkwc.." and "..kony.sync.mainTableSyncVersionColumn.." ='"..versionNumber.."'");
		} //local pquery = " where "..pkwc.." and "..kony.sync.mainTableSyncVersionColumn.." ='"..versionNumber.."'"
		//kony.sync.syncPrint ("perge query ".. pquery);
		// we don't have dirty flags for deletes instead we have tombstone tables
		// note that the client records has been already deleted ( MergedWithEIs == true ). purge the record from tombstone table.
		//kony.sync.deleteEx(tx,tablename,pquery);
		} else {
		if ((changeType == "update")) {
		//kony.sync.syncPrint ("update values "..values);
		// update if the user hasn't changed the record
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableChangeTypeColumn,
		value: "nil",
		optype : "EQ",
		comptype : "OR"
		});
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableChangeTypeColumn,
		value: -1,
		optype : "EQ",
		comptype : "OR"
		});
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableSyncVersionColumn,
		value: currentversion,
		optype : "EQ"
		});
		kony.sync.upsertEx(tx, tablename, values, pkwcs);
		} else if ((changeType == "delete")) {
		// delete the record if it hasn't been changed by the user
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableChangeTypeColumn,
		value: "nil",
		optype : "EQ",
		comptype : "OR"
		});
		kony.table.insert(pkwcs, {
		key: kony.sync.mainTableChangeTypeColumn,
		value: -1,
		optype : "EQ"
		});
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted]=kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted]+1;
		kony.sync.serverDeleteCount = kony.sync.serverDeleteCount + 1;
		kony.sync.removeEx(tx, tablename, pkwcs);
		} //kony.sync.deleteEx(tx,tablename," where "..kony.sync.mainTableChangeTypeColumn.." is null and "..pkwc);
		}
		 */
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDownloaded] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInserted] +
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdated] + kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeleted];
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsAcknowledged] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsInsertedAck] +
			kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck] + kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck];
	}
}
//This function removes successful uploads mostly in case of dummy updates
//callback should be called after finishing this functionality
kony.sync.deleteRecordsAfterUpload = function (callback) {
	var isError = false;
	
	if (kony.sync.OTAChangestobeDeleted != null) {
		if (kony.sync.currentSyncConfigParams[kony.sync.removeAfterUpload] != null && kony.sync.OTAChangestobeDeleted != null && kony.sync.OTAChangestobeDeleted["Changes"] != null && kony.sync.OTAChangestobeDeleted["Changes"]["d"]["results"] != null) {
			var results = kony.sync.OTAChangestobeDeleted["Changes"]["d"]["results"];
			//kony.sync.syncPrint(kony.sync.OTAChangestobeDeleted)
			var length = results.length;
			var dbname = kony.sync.currentScope[kony.sync.scopeDataSource];
			var scopename = kony.sync.currentScope[kony.sync.scopeName];
			kony.sync.getConnection(dbname, dbname, myTransactionCallBack, mySucessCallBack, myErrorCallBack)
			function myTransactionCallBack(tx) {
				for (var i = 0; ((results) != null) && i < length; i++) {
					var row = results[i];
					var tablename = row["__metadata"]["type"];

					//skipping if error
					if (row["__metadata"]["errorMessage"] != null)
						continue;

					//var dbname = kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)];
					var changeType = row["__metadata"]["changeType"];
					//var values = [];
					//var syncTable = kony.sync.currentScope.syncTableDic[kony.decrement(tablename)];
					//var scopename = kony.sync.currentScope[kony.sync.scopeName];
					var pkColumns = kony.sync.currentScope.syncTableDic[tablename].Pk_Columns;
					var pkwcs = [];
					var pkset = null;
					var pksetwcs = [];
					var pkTable = {};
					for (var j = 0; (pkColumns != null) && j < pkColumns.length; j++) {
						var pk = pkColumns[j];
						pkTable[pk] = row[pk];
						if ((row[pk] != null)) {
							if ((pkset == null)) {
								pkset = [];
							}
							kony.table.insert(pkwcs, {
								key : pk,
								value : row[pk]
							});
							pkset[pk] = row[pk];
							kony.table.insert(pksetwcs, {
								key : pk,
								value : row[pk]
							});
						} else {
							kony.table.insert(pkwcs, {
								key : pk,
								value : row[pk]
							});
						}
					}

					kony.table.insert(pkwcs, {
						key : kony.sync.mainTableChangeTypeColumn,
						value : "nil",
						comptype : "AND"
					});

					var query = kony.sync.qb_createQuery()
					kony.sync.qb_delete(query, tablename);
					kony.sync.qb_where(query, pkwcs)
					var query_compile = kony.sync.qb_compile(query)
					var sql = query_compile[0];
					var params = query_compile[1];
					if ((kony.sync.currentScope[kony.sync.syncStrategy] == kony.sync.syncStrategy_OTA)) {
						if (kony.sync.checkForDeleteAfterUpload(tablename, scopename) == true) {
							if(kony.sync.executeSql(tx, sql, params)===false){
								isError = true;
							}
						}
					}
				}
			}

			function myErrorCallBack() {
				kony.print("remove after upload failed");
				kony.sync.OTAChangestobeDeleted["Changes"]["d"]["results"] = {};
				if(isError){
					callback(kony.sync.errorCodeSQLStatement);
				}
				else{
					callback(kony.sync.errorCodeTransaction);
				}
			}
			function mySucessCallBack() {
				kony.print("remove after upload  success")
				kony.sync.OTAChangestobeDeleted["Changes"]["d"]["results"] = {};
				callback(0);
			}

		} else {
			callback(0);
		}
	} else {
		callback(0);
	}

}
//  **************** End KonySyncDownload.js*******************


//  **************** Start KonySyncErrors.js*******************
kony.sync.getSessionInProgressError = function() {
   return kony.sync.getErrorTable(kony.sync.errorCodeSessionInProgress,kony.sync.getErrorMessage(kony.sync.errorCodeSessionInProgress),null);	
};
kony.sync.getSyncInitFailed = function() {
  	return kony.sync.getErrorTable(kony.sync.errorCodeScopeLoading,kony.sync.getErrorMessage(kony.sync.errorCodeScopeLoading),null);
};
kony.sync.getSyncResetFailed = function() {
	return kony.sync.getErrorTable(kony.sync.errorCodeSyncReset,kony.sync.getErrorMessage(kony.sync.errorCodeSyncReset),null);
};
kony.sync.getSyncRegisterationFailed = function() {
    return kony.sync.getErrorTable(kony.sync.errorCodeRegisterDevice,kony.sync.getErrorMessage(kony.sync.errorCodeRegisterDevice),null);
};
kony.sync.getScopeFailed = function() {
	return kony.sync.getErrorTable(kony.sync.errorCodeSessionBreak,kony.sync.getErrorMessage(kony.sync.errorCodeSessionBreak),null);
};
kony.sync.getServerError = function(ServerReport, moduleType) {
    if ((ServerReport != null)) {
        if ((ServerReport[kony.decrement("msg")] != null)) {
            if ((ServerReport[kony.decrement("opstatus")] == 0)) {
                return kony.sync.getErrorTable(kony.sync.errorCodeUnknownServerError, ServerReport[kony.decrement("msg")]);
            } else {
				var errorCode = ServerReport.opstatus;
				if(kony.sync.isNull(ServerReport.opstatus)){
					if(moduleType==="upload"){
						errorCode = kony.sync.errorCodeUploadFailed;
					}
					else if(moduleType==="download"){
						errorCode = kony.sync.errorCodeDownloadFailed;
					}
					else{
						errorCode = kony.sync.errorCodeUnknownServerError;
					}					
				}
                return kony.sync.getErrorTable(errorCode, kony.sync.getErrorMessage(errorCode),ServerReport[kony.decrement("msg")]);

			}
        }
        if ((ServerReport[kony.decrement("errmsg")] != null)) {
            return kony.sync.getErrorTable(ServerReport[kony.decrement("opstatus")], ServerReport[kony.decrement("errmsg")]);
        }
    }
    return kony.sync.getErrorTable(kony.sync.errorCodeUnknownServerError, "Unknown Error from the server");
};

kony.sync.getErrorTable = function(errorCode,errorMessage,errorInfo) {
	var errorTable =[]
	errorTable["errorCode"] = errorCode;
	errorTable["errorMessage"] = errorMessage;
	errorTable["errorInfo"] = errorInfo;
	if(kony.sync.isNull(errorInfo)==false){
		if(kony.sync.isNull(errorInfo[kony.sync.errorInfoDatabaseError])==false){
			if(!kony.sync.isEmptyString(errorInfo[kony.sync.errorInfoDatabaseError])){
				errorTable["errorMessage"] = errorMessage + ". \n" + "System Error:" + errorInfo[kony.sync.errorInfoDatabaseError]["message"];
			}
		}
	}
	return errorTable;
};

kony.sync.getErrorMessage = function(errorCode,objectName, attributeName) {
	var errorMap = {};
	errorMap[kony.sync.errorCodeMandatoryAttribute] = "Mandatory attribute " + attributeName + " is missing for the SyncObject " + objectName + ".", 
	errorMap[kony.sync.errorCodeScopeLoading] = "Scopes loading failed.",
	errorMap[kony.sync.errorCodeSyncReset] = "Sync Reset failed.",
	errorMap[kony.sync.errorCodeRegisterDevice] = "Register device failed.",
	errorMap[kony.sync.errorCodeSessionBreak] = "Session breaks since user scope failure.",
	errorMap[kony.sync.errorCodeSessionInProgress] = "Session in progress.",
	errorMap[kony.sync.errorCodeTransaction] = "Transaction failed.",
	errorMap[kony.sync.errorCodeDbConnection] = "Error occurred while establishing a Database connection.",
	errorMap[kony.sync.errorCodeMarkForUpload] = "Record does not exist on server, mark it for upload before updating/deleting it.",
	errorMap[kony.sync.errorCodeDeferredUpload] = "Error during Deferred Upload Transaction.",
	errorMap[kony.sync.errorCodeNoDataWithPrimaryKey] = "No data with specified primary key found in SyncObject " + objectName + ".",
	errorMap[kony.sync.errorCodeDuplicatePrimaryKey] = "Primary Key " + attributeName +" already exists in table " + objectName + ". Please give different value of primary key.",
	errorMap[kony.sync.errorCodeInputTableNotDefined] = "Input Table not defined",	
	errorMap[kony.sync.errorCodeMaliciousType] = "Malicious value '" + attributeName + "' given for attribute " + objectName + ".",
	errorMap[kony.sync.errorCodeSQLStatement] = "Some error occurred in executing SQL statement",
	errorMap[kony.sync.errorCodeSyncError] = "Error occurred while syncing one or more scopes" ,
	errorMap[kony.sync.errorCodeDownloadFailed] = "Error occurred in Downloading changes from Sever" ,
	errorMap[kony.sync.errorCodeUploadFailed] = "Error occurred in Uploading changes to Server"
	errorMap[kony.sync.errorUnknown] = "The following error occured while performing " + objectName + " : \n\"" + attributeName + "\"." + "\n Possible reasons can be sync.init may not have been invoked." 
	
	if(errorMap[errorCode]===null) 
		return "Some unknown client error"
	else
		return errorMap[errorCode]
	
}
kony.sync.getInvalidDataTypeMsg = function(objectName, attributeName, expectedType, actualType){
	return "Invalid data type for the attribute " + attributeName + " in " + objectName + ".\nExpected:\"" + expectedType + "\"\nActual:\"" + actualType + "\"";

}

kony.sync.getPrimaryKeyNotSpecifiedMsg = function (primaryKey,operation,table) {
	return "Primary Key " + primaryKey + " not specified in " + operation + " an item in " + table + "."
}

kony.sync.getReferetialIntegrityerrMessg = function (sourceAttribute,TargetAttribute,TargetValue){
	return  "Referential Integrity Constraints Violation: " + TargetAttribute+" = " + TargetValue + " does not exists in " + sourceAttribute + ".";
}

kony.sync.getReferetialIntegrityDeleteErrMessg = function (sourceAttribute, TargetAttribute, targetValue, srcValue){
	return  "Referential Integrity Constraints Violation: " + "Delete dependent records from " + targetValue + " before deleting record(s) in " + srcValue + ".";
}

kony.sync.getValidateLengthErrMsg = function (tablename, colname, expectedLength, actualLength){ 
	return "Length exceeds the limit for the attribute " + colname + " in " + tablename + ".\nExpected:\'" + expectedLength + "\'\nActual:\'" + actualLength + "\'"
}
//  **************** End KonySyncErrors.js*******************


//  **************** Start KonySyncGlobals.js*******************
//This enables the Print Statements in the Sync Library
kony.sync.syncLibPrint  = true;
kony.sync.downloadNextBatchServerblob = null; //not used
kony.sync.scopes = [];
kony.sync.gMoreChanges = true; //not used
kony.sync.gSyncFailed = false;
kony.sync.gPolicy = 0;

//Sync Config
kony.sync.currentSyncConfigParams = null;
kony.sync.currentSyncLog = [];

//Sync Call Backs Constants
kony.sync.sessionTasks = "sessiontasks";
kony.sync.sessionTaskDoUpload = "doupload";
kony.sync.sessionTaskDoDownload = "dodownload";
kony.sync.filterParams = "filterparams";
kony.sync.onSyncStart = "onsyncstart";
kony.sync.onScopeStart = "onscopestart";
kony.sync.onScopeError = "onscopeerror";
kony.sync.onScopeSuccess = "onscopesuccess";
kony.sync.onAuthenticationSuccess = "onauthenticationsuccess";
kony.sync.onUploadStart = "onuploadstart";
kony.sync.onUploadSuccess = "onuploadsuccess";
kony.sync.onDownloadStart = "ondownloadstart";
kony.sync.onDownloadSuccess = "ondownloadsuccess";
kony.sync.onBatchStored = "onbatchstored";
kony.sync.onBatchProcessingStart = "onbatchprocessingstart";
kony.sync.onBatchProcessingSuccess = "onbatchprocessingsuccess";
kony.sync.onSyncSuccess = "onsyncsuccess";
kony.sync.onSyncError = "onsyncerror";
kony.sync.removeAfterUpload="removeafterupload";
kony.sync.passwordHashingAlgo="passwordhashalgo"

//Sync Context Params
kony.sync.objectLevelInfo = "objectlevelinfo"
kony.sync.authenticateURL = "authenticateurl";
kony.sync.uploadURL = "uploadurl";
kony.sync.downloadURL = "downloadurl";
kony.sync.uploadContext = "uploadcontext";
kony.sync.failedRowInfo = "failedrowinfo"
kony.sync.uploadSummary = [];
kony.sync.numberOfRowsUploaded = "rowsuploaded";
kony.sync.numberOfRowsInserted = "rowsinserted";
kony.sync.numberOfRowsUpdated = "rowsupdated";
kony.sync.numberOfRowsDeleted = "rowsdeleted";
kony.sync.numberOfRowsInsertedAck = "ackinsertedrows";
kony.sync.numberOfRowsUpdatedAck = "ackupdatedrows";
kony.sync.numberOfRowsDeletedAck = "ackdeletedrows";
kony.sync.numberOfRowsAcknowledged = "acktotalrows"
kony.sync.numberOfRowsFailedtoUpload = "rowsfailedtoupload"
kony.sync.pendingBatches = "pendingbatches";
kony.sync.numberOfRowsDownloaded = "batchrowsdownloaded";
kony.sync.batchContext = "batchcontext";
kony.sync.lastSyncTimestamp = "lastsynctimestamp";
kony.sync.uploadSequenceNumber = "uploadsequencenumber";
kony.sync.currentScope = "currentscope";
kony.sync.dataSource = "DataSource";
kony.sync.scopeDataSource = "ScopeDatabaseName";
kony.sync.scopeName = "ScopeName";
kony.sync.syncStrategy = "Strategy";
kony.sync.syncStrategy_OTA = "OTA_SYNC";
kony.sync.versionNumber = "1.0";
kony.sync.dbSize = 5 * 1024 * 1024;
//Pending Batchs
kony.sync.syncPendingBatchesNo = 0;
kony.sync.syncStatusColumn = "changetype";
kony.sync.syncConfigurationDBName = "SyncConfig";
kony.sync.syncConfigurationTableName = "SyncConfigTable";
kony.sync.syncConfigurationColumnDeviceIDName = "DeviceID";
kony.sync.syncConfigurationColumnInstanceIDName = "InstanceID";
kony.sync.metaTableName = "konysyncMETAINFO";
kony.sync.metaTableScopeColumn = "scopename";
kony.sync.metaTableSyncTimeColumn = "lastserversynccontext";
kony.sync.metaTableSyncVersionCloumn = "versionnumber";
kony.sync.metaTableSyncOrderCloumn = "replaysequencenumber";
kony.sync.metaTableLastGeneratedId = "lastgeneratedid";
kony.sync.metaTableFilterValue = "filtervalue";
kony.sync.historyTableName = "_history";
kony.sync.changeTypeColumn = "changetype";
kony.sync.dbConnection = null;
kony.sync.mainTableSyncVersionColumn = "konysyncversionnumber";
kony.sync.mainTableChangeTypeColumn = "konysyncchangetype";
kony.sync.mainTableHashSumColumn = "konysynchashsum";
kony.sync.historyTableSyncVersionColumn = "konysyncversionnumber";
kony.sync.historyTableChangeTypeColumn = "konysyncchangetype";
kony.sync.historyTableReplaySequenceColumn = "konysyncreplaysequence";
kony.sync.historyTableChangeTimeColumn = "konysyncchangetime"; // Not used as of now.
kony.sync.historyTableHashSumColumn = "konysynchashsum";
kony.sync.originalTableName = "_original";
kony.sync.originalTableChangeTypeColumn = "konysyncoriginalchangetype";
kony.sync.originalTableSyncVersionColumn = "konysyncoriginalversionnumber";
kony.sync.originalTableHashSumColumn = "konysynchashsum";
kony.sync.mergedWithEIS = "konysyncMergedWithEIS";
kony.sync.clientPKPrefix = "konysyncClient";

//Global SyncSession Configurations
kony.sync.isSessionInProgress = false;
kony.sync.currentScope = null;
kony.sync.deviceId = null;
kony.sync.instanceId = null;
kony.sync.originalDeviceId = null;

//Global changetype columns
kony.sync.insertColStatus = "0";
kony.sync.updateColStatus = "1";
kony.sync.deleteColStatus = "2";

kony.sync.insertColStatusDI = "90";
kony.sync.updateColStatusDU = "91";
kony.sync.deleteColStatusDD = "92";

//storeid_callback_scope = null; Not used.
kony.sync.currentSyncScopesState = [];
kony.sync.isParameter = true;
kony.sync.dbTypeSQLLite = "sqllite";
kony.sync.dbTypeSQLCE = "sqlce";
kony.sync.platformName = null;
kony.sync.hashTypeSHA256 = "SHA256";

kony.sync.pendingAckIndex = 1;
kony.sync.pendingAckResult = {};
kony.sync.pendingAckCount = 0;
kony.sync.pendingUploadIndex = 1;
kony.sync.pendingUploadResult = {};
kony.sync.pendingUploadCount = 0;
kony.sync.deferredUploadIndex = 1;
kony.sync.deferredUploadResult = {};
 kony.sync.deferredUploadCount = 0;

kony.sync.rollbackCurrentScope = null;
kony.sync.onDownloadCompletion = null;
kony.sync.globalIsDownloadStarted = true;
kony.sync.globalIsUploadFailed = true;
kony.sync.onUploadCompletion = null;

kony.sync.currentSyncReturnParams = {};
kony.sync.syncTotalInserts = 0;
kony.sync.syncTotalUpdates = 0;
kony.sync.syncTotalDeletes = 0;
kony.sync.serverInsertCount = 0;
kony.sync.serverUpdateCount = 0;
kony.sync.serverDeleteCount = 0;
kony.sync.serverInsertAckCount = 0;
kony.sync.serverUpdateAckCount = 0;
kony.sync.serverDeleteAckCount = 0;
kony.sync.serverFailedCount = 0;
kony.sync.objectLevelInfoMap = {};

//error codes
kony.sync.errorCodeInvalidDataType=7001
kony.sync.errorCodeMandatoryAttribute=7002
kony.sync.errorCodePrimaryKeyNotSpecified =7003 //Primary Key CategoryID not specified in updating an item in Categories
kony.sync.errorCodeScopeLoading	= 7004  	//"Scopes loading failed",
kony.sync.errorCodeSyncReset= 7005 		//"Sync Reset failed",
kony.sync.errorCodeRegisterDevice =	7006 	//"Register device failed",
kony.sync.errorCodeSessionBreak = 7007 		//"Session breaks since user scope failure",
kony.sync.errorCodeSessionInProgress = 7008 //"Session in progress",
kony.sync.errorCodeNoDataWithPrimaryKey = 7009 //No data with specified primary key found in SyncObject Categories
kony.sync.errorCodeTransaction = 7010		//"Transaction failed"
kony.sync.errorCodeDbConnection = 7011 //"Database connection closed"
kony.sync.errorCodeMarkForUpload = 7012 // "ERROR: [KONYSYNC] Record does not exist on server, mark it for upload before updating/deleting it"
kony.sync.errorCodeDeferredUpload = 7013 // "Error during Deferred Upload Transaction"
kony.sync.errorCodeReferentialIntegrity = 7014 //"Error because of referential integrity failure"
kony.sync.errorCodeLengthValidationFailed = 7015//Length exceeds than specified limit
kony.sync.errorCodeDuplicatePrimaryKey = 7016
kony.sync.errorCodeInputTableNotDefined = 7017
kony.sync.errorCodeMaliciousType = 7018
kony.sync.errorCodeSQLStatement = 7019
kony.sync.errorCodeUploadFailed = 7020
kony.sync.errorCodeDownloadFailed = 7021
kony.sync.errorCodeSyncError = 7022

kony.sync.errorUnknown = 7777;

kony.sync.errorCodeUnknownServerError = 8888;

kony.sync.queryStore = [];
kony.sync.batchDownloadTimer = 0;
kony.sync.batchInsertionTimer = 0;

kony.sync.OTAChangestobeDeleted = null;

kony.sync.sessionTaskUploadErrorPolicy = "uploaderrorpolicy"
kony.sync.sessionTaskUploadErrorPolicyCOE = "continueonerror"
kony.sync.sessionTaskUploadErrorPolicyAOE = "abortonerror"

//global variable to check whether reset already started or not
kony.sync.isResetInProgress = false;
kony.sync.errorInfoTransactionID = "transactionID";
kony.sync.errorInfoDatabaseError = "dbError";

//global variable to check whether sync for any scope got succeeded or not.
//If sync is not faled for any scope, then only call onsyncsuccess else onsyncerror
kony.sync.isErrorInAnyScope = false;
kony.sync.syncErrorMessage = {};

kony.sync.enableORMValidations = true;

//This variable will save download request from first batch for subsequent batches
kony.sync.downloadRequest = null;

kony.sync.errorObject = null;

//  **************** End KonySyncGlobals.js*******************


//  **************** Start KonySyncHelper.js*******************
//This function is used inside sync library to handle prints
//function kony.sync.syncPrint(param)
kony.sync.syncPrint = function (param){
	if ((kony.sync.syncLibPrint)){
		kony.print(param);
	}
};

kony.sync.validateLength = function (tablename, colname, colvalue, length, errorcallback) {
	if (!kony.sync.isNull(colvalue) && kony.string.equalsIgnoreCase(kony.type(colvalue), "string") && kony.string.len(colvalue) > length) {
		kony.sync.syncPrint("ERROR: [KONYSYNC] Length exceeds the limit for the attribute " + colname + " in " + tablename + ".\nExpected:\'" + length + "\'\nActual:\'" + kony.string.len(colvalue) + "\'");
		kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeLengthValidationFailed, kony.sync.getValidateLengthErrMsg(tablename, colname, length, kony.string.len(colvalue))));
		return true;
	}
	return false;
};
/*
--This function formats the sqllite resultset. This is temporary and should be done at platform level.
--function format_row(rowItem)
kony.sync.format_row = function(rowItem)
local rowtemp = {}
if(rowItem ~= nil)then
for key,value in pairs(rowItem) do
value = ""..value;
if(string.isnumeric(value))then
string.replace(value,".0","");
end
rowtemp[key] = string.replace(value, "'", "");
end
if ( value ~= nil ) then
string.replace(value, "'", "");
end
else
return nil;
end
return rowtemp;
end
--*/
//function getTableInfo(tablename)
kony.sync.getTableInfo = function (tablename) {
	for (var i = 1;
		((kony.sync.scopes) != null) && i <= kony.sync.scopes.length; i++) {
		var scope = kony.sync.scopes[kony.decrement(i)];
		if ((scope.syncTableDic[kony.decrement(tablename)] != null)) {
			return scope.syncTableDic[kony.decrement(tablename)];
		}
	}
	return null;
};
//function is_SQL_select(sql)
kony.sync.is_SQL_select = function (sql) {
	sql = kony.string.trim(sql);
	return kony.string.startsWith(sql, "select", true);
};
/*
function dummysuccess()
kony.sync.syncPrint("dummysuccess");
end
 */
//
//function dummyerror(tid,err)
kony.sync.dummyerror = function (tid, err) {
	if ((err == null)) {

		kony.sync.syncPrint("dummyerror");
	} else {

		kony.sync.syncPrint("dummy error --->" + err);
	}
};
//function verifyAndCallClosure(closure, params)
kony.sync.verifyAndCallClosure = function (closure, params) {
	if (kony.sync.isValidFunctionType(closure)) {
		return closure(params);
	} else {
		kony.sync.syncPrint("[KonySync] Invalid callback type : " + closure);
	}
};
//function getArrayCount(tab)
kony.sync.getArrayCount = function (tab) {
	var count = 0;
	//kony.sync.syncPrint(table);
	if ((tab != null)) {
		for (var i in tab) {
			var v = tab[kony.decrement(i)];
			count = count + 1;
		}
	}
	return count;
};
//function getDeviceID()
kony.sync.getDeviceID = function () {
	if ((kony.sync.deviceId == null)) {
		return kony.os.deviceInfo().deviceid;
	} else {
		return kony.sync.deviceId;
	}
};
//function getInstanceID()
kony.sync.getInstanceID = function () {
	return kony.sync.instanceId;
};
//function getOriginalDeviceID()
kony.sync.getOriginalDeviceID = function () {
	if ((kony.sync.originalDeviceId == null)) {
		kony.sync.originalDeviceId = kony.os.deviceInfo().deviceid;
		return kony.os.deviceInfo().deviceid;
	} else {
		return kony.sync.originalDeviceId;
	}
};
//function removeprovisioncolumns(row)
kony.sync.removeprovisioncolumns = function (row, columns, isArray) {
	var length = columns.length;
	/*
	for (var col in row) {
	var val = row[kony.decrement(col)];
	if ((col != "UpdateId" && col != "IsDeleted" && col != "UpdateTimestamp" && col != "__metadata" && kony.string.startsWith(
	col, kony.sync.clientPKPrefix, true) == false && col != kony.sync.mergedWithEIS && col != "changetype" && col != "replaysequencenumber")) {
	record[kony.decrement(col)] = val;
	}
	}
	 */
	if (!isArray) {
		var record = [];

		for (var i = length - 1; i >= 0; i--) {
			if (row[columns[i].Name] != null)
				record.push(row[columns[i].Name]);
			else
				record.push("NULL");
		}
		if (row["konysynchashsum"] != null) {
			record.push(row["konysynchashsum"]);
		}
		return record;
	} else {
		var record = [];

		for (var i = length - 1; i >= 0; i--) {
			if (row[columns[i].Name] != null)
				record[columns[i].Name] = row[columns[i].Name];
			else
				record[columns[i].Name] = "NULL";
		}
		if (row["konysynchashsum"] != null) {
			record["konysynchashsum"] = row["konysynchashsum"];
		}

		return record;
	}
};

kony.sync.replaceautogeneratedPK = function (sname, synctable, values, tx, errorCallback) {
	var id = null;
	var pkTab = {};
	for (var i = 1;
		((synctable.Pk_Columns) != null) && i <= synctable.Pk_Columns.length; i++) {
		var pk = synctable.Pk_Columns[kony.decrement(i)];
		if ((synctable.ColumnsDic[kony.decrement(pk)].Autogenerated == "true")) {
			id = kony.sync.getLastGeneratedID(sname, tx, errorCallback);
			if (id === false) {
				return false;
			}
			id = id - 1;
			values[pk] = id;
			pkTab[pk] = id;
			if (!kony.sync.setLastGeneratedID(sname, id, tx, errorCallback)) {
				return false;
			}
		} else {
			pkTab[pk] = values[pk];
		}
	}
	//implemented for composite primary key
	return pkTab;
};

kony.sync.CreateCopy = function (tab) {
	if ((tab == null)) {
		return null;
	}
	var copy = [];
	for (var key in tab) {
		var value = tab[kony.decrement(key)];
		if ((kony.type(value) == "table")) {
			copy[kony.decrement(key)] = kony.sync.CreateCopy(tab[kony.decrement(key)]);
		} else {
			copy[kony.decrement(key)] = tab[kony.decrement(key)];
		}
	}
	return copy;
};
//function getautogeneratePK(sname,synctable)
kony.sync.getautogeneratePK = function (sname, synctable) {
	var agPks = [];
	for (var i = 1;
		((synctable.Pk_Columns) != null) && i <= synctable.Pk_Columns.length; i++) {
		var pk = synctable.Pk_Columns[kony.decrement(i)];
		if ((synctable.ColumnsDic[kony.decrement(pk)].Autogenerated == "true")) {
			kony.table.insert(agPKs, pk);
		}
	}
	return agPKs;
};
//function getDBNamefromDataSource(dsname)
kony.sync.getDBNamefromDataSource = function (dsname) {

	kony.sync.syncPrint("validatint dsname :" + dsname);
	for (var i in konysyncClientSyncConfig[kony.decrement("ArrayOfDataSource")]) {
		var datasource = konysyncClientSyncConfig[kony.decrement("ArrayOfDataSource")][kony.decrement(i)];

		kony.sync.syncPrint("datasource.type:" + datasource.type + ":datasource.ID:" + datasource.ID);
		if ((datasource.type == "database" && datasource.ID == dsname)) {
			return datasource.Database.DatabaseName;
		}
	}
	return null;
};

kony.sync.getAppId = function () {
	return kony.sync.currentSyncConfigParams["appid"];
};
//function getBatchSize()
kony.sync.getBatchSize = function () {
	if ((kony.sync.currentSyncConfigParams[kony.decrement("batchsize")] != null)) {
		return kony.sync.currentSyncConfigParams[kony.decrement("batchsize")];
	}
	if (kony.os.deviceInfo().name == "blackberry") {
		return "50";
	} else {
		return "500";
	}
};
//function getServerURL()
kony.sync.getServerURL = function () {
	var server = "";
	if ((kony.sync.currentSyncConfigParams[kony.decrement("issecure")] != null)) {
		if ((kony.sync.currentSyncConfigParams[kony.decrement("issecure")])) {
			server = "https://" + kony.sync.currentSyncConfigParams[kony.decrement("serverhost")];
		} else {
			server = "http://" + kony.sync.currentSyncConfigParams[kony.decrement("serverhost")];
		}
	} else {
		server = "http://" + kony.sync.currentSyncConfigParams[kony.decrement("serverhost")];
	}
	if ((kony.sync.currentSyncConfigParams[kony.decrement("serverport")] == null)) {
		server = server + ":80";
	} else if ((kony.sync.currentSyncConfigParams[kony.decrement("serverport")] != "")) {
		server = server + ":" + kony.sync.currentSyncConfigParams[kony.decrement("serverport")];
	}
	return server + "/syncservice/resources/";
};
//function getUploadURL()
kony.sync.getUploadURL = function () {
	var server = kony.sync.getServerURL();
	if ((kony.sync.currentSyncConfigParams[kony.decrement("uploadwebcontext")] != null)) {
		return server + kony.sync.currentSyncConfigParams[kony.decrement("uploadwebcontext")];
	}
	return server + "upload";
};
//function getDownloadURL()
kony.sync.getDownloadURL = function () {
	var server = kony.sync.getServerURL();
	if ((kony.sync.currentSyncConfigParams[kony.decrement("downloadwebcontext")] != null)) {
		return server + kony.sync.currentSyncConfigParams[kony.decrement("downloadwebcontext")];
	}
	return server + "download";
};
//function getRegisterDeviceURL()
kony.sync.getRegisterDeviceURL = function () {
	var server = kony.sync.getServerURL();
	return server + "registerdevice";
};
//function resetsyncsessionglobals()
kony.sync.resetsyncsessionglobals = function () {
	kony.sync.currentScope = null;
	kony.sync.currentSyncReturnParams = {};
	kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadURL)] = kony.sync.getUploadURL();
	kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.downloadURL)] = kony.sync.getDownloadURL();
	kony.sync.currentSyncLog = [];
};
//function resetscopesessionglobals()
kony.sync.resetscopesessionglobals = function () {
	kony.sync.syncPendingBatchesNo = 0;
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.batchContext)];
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)];
	if ((kony.sync.currentScope == null)) {
		kony.sync.currentScope = kony.sync.scopes[0]; //- Start 1st Scope Sync
	} else {

		kony.sync.syncPrint("index" + kony.sync.currentScope.Index);

		kony.sync.syncPrint("scopecount" + kony.sync.scopes.scopecount);
		if ((kony.sync.currentScope.Index == kony.sync.scopes.scopecount)) {
			return true; //Sync Complete
		}
		kony.sync.currentScope = kony.sync.scopes[kony.decrement(kony.sync.currentScope.Index + 1)]; //Get Next Scope
	}
};
//function resetuploadsessioglobals()
kony.sync.resetuploadsessioglobals = function () {
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)];
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.lastSyncTimestamp)];
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadSequenceNumber)];
	sync_total_inserts = 0;
	kony.sync.syncTotalInserts = 0;
	kony.sync.syncTotalUpdates = 0;
	kony.sync.syncTotalDeletes = 0;
	kony.sync.serverInsertCount = 0;
	kony.sync.serverUpdateCount = 0;
	kony.sync.serverDeleteCount = 0;
	kony.sync.serverInsertAckCount = 0;
	kony.sync.serverUpdateAckCount = 0;
	kony.sync.serverDeleteAckCount = 0;
	kony.sync.serverFailedCount = 0;
	kony.sync.uploadSummary = [];
};
//function resetbatchsessionglobals()
kony.sync.resetbatchsessionglobals = function () {
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.batchContext)];
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)];
	delete kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadSequenceNumber)];
	kony.sync.serverInsertCount = 0;
	kony.sync.serverUpdateCount = 0;
	kony.sync.serverDeleteCount = 0;
	kony.sync.serverInsertAckCount = 0;
	kony.sync.serverUpdateAckCount = 0;
	kony.sync.serverDeleteAckCount = 0;
	kony.sync.serverFailedCount = 0;
	kony.sync.uploadSummary = [];
};
/*
function insert_errorpass()
return false;
end
 */
//
//function getSyncTable(tablename)
kony.sync.getSyncTable = function (tablename) {
	var scopename = kony.sync.scopes.syncTableScopeDic[kony.decrement(tablename)];
	return kony.sync.scopes[kony.decrement(scopename)].syncTableDic[kony.decrement(tablename)];
};
//function getCurrentVersionNumber(tbname)
kony.sync.getCurrentVersionNumber = function (tbname) {
	var scopename = kony.sync.scopes.syncTableScopeDic[kony.decrement(tbname)];
	return kony.sync.currentSyncScopesState[kony.decrement(scopename)];
};
//function getBackEndDBType()
kony.sync.getBackEndDBType = function () {
	if (kony.sync.platformName == null) {
		kony.sync.platformName = kony.os.deviceInfo().name;
	}
	if ((kony.sync.platformName == "Windows 7" || kony.sync.platformName == "winmobile")) {
		return kony.sync.dbTypeSQLCE;
	} else {
		return kony.sync.dbTypeSQLLite;
	}

	kony.sync.syncPrint("ERROR desktop os.platform().name modified ***************");
	return kony.sync.dbTypeSQLLite;
};
//function printScopeLog(kony.sync.currentSyncLog)
kony.sync.printScopeLog = function () {

	kony.sync.syncPrint("Sync complete");

	kony.sync.syncPrint("----------------------------------------------------");
	for (var i = 1;
		((kony.sync.currentSyncLog) != null) && i <= kony.sync.currentSyncLog.length; i++) {
		var batch = kony.sync.currentSyncLog[kony.decrement(i)];

		kony.sync.syncPrint("Batch No:" + i);

		kony.sync.syncPrint("Batch log:" + batch);
	}

	kony.sync.syncPrint("----------------------------------------------------");
};
//To generate hash
kony.sync.genHash = function (hashType, plaintext) {
	//return same in case of null/undefined plaintext
	if (kony.sync.isNull(plaintext)) {
		return plaintext;
	}
	
	//if hashType is callback, get the value from it
	if(kony.sync.isValidFunctionType(hashType)){
		return hashType(plaintext);
	}
	
	//convert plaintext to string if not already
	plaintext = plaintext.toString();
	
	//apply default value in case of invalid/null/undefined hashtype
	if (kony.sync.isNull(hashType) || kony.string.equalsIgnoreCase(kony.type(hashType), "string")===false) {
		return kony.crypto.createHash("sha256", plaintext);
	}
	//return same if hashtype is none
	else if(kony.string.equalsIgnoreCase(hashType, "none")===true){
		return plaintext;
	}
	//apply the desired hash algo
	else{
		return kony.crypto.createHash(hashType, plaintext);
	}
};
//To generate hash using SHA256
/*kony.sync.genHashSHA256 = function (plaintext) {
	return kony.crypto.createHash("sha256", plaintext);
};
*/

kony.sync.tonumber = function(arg) {
	if (arg == null) {
        return null;
    }
	
	//duplicating kony.os.toNumber in order to avoid Anroid platform dependency issues
	if (arguments.length != 1) {
		throw new Error("Invalid argument to os.toNumber");
	}
	
	if (typeof(arg) === "number") {
		return arg;
	} else if (typeof(arg) === "string") {	
		
		var str = arg.replace(/^\s*/, '').replace(/\s*$/, '');
		if (str === '') {
			return null;
		} else {
			var num = str - 0;
			return (isNaN(num) ? null : num);
		}
	
	} else {
		return null;
	}
};

kony.sync.filterNullsFromSelectResult = function (res) {
	var tableToMap = [];
	for (j in res) {
		var u = res[j];
		var rowToMap = {};
		for (k in u) {
			var v = u[k];
			if (kony.sync.isNull(v)) {
				rowToMap[k] = null;
			} else {
				rowToMap[k] = v;
			}
		}
		kony.table.insert(tableToMap, rowToMap);
	}
	return tableToMap;
}

kony.sync.getAsyncDownloadBatchSize = function () {
	if ((kony.sync.currentSyncConfigParams[kony.decrement("asyncbatchsize")] != null)) {
		return kony.sync.currentSyncConfigParams[kony.decrement("asyncbatchsize")];
	}
	return 50;
}

kony.sync.isApplyChangesSync = function () {
	//#ifdef bb
	return false;
	//#else
	return true;
	//#endif
}

function getChangeTypeForUploadTrue(type) {
	kony.sync.syncPrint("ValueSentForChange" + type);
	if (type == "90") {
		return "0";
	}
	if (type == "91") {
		return "1";
	}
	if (type == "92") {
		return "2";
	}
	return type;
}

//Checking whether table is defined for delete after upload or not
kony.sync.checkForDeleteAfterUpload = function (tablename, scopename) {
	var myTab = kony.sync.currentSyncConfigParams[kony.sync.removeAfterUpload]
		if (myTab == null)
			return false;
		if (scopename != null) {
			if (myTab[scopename] == null)
				return false;
			if (myTab[scopename].length == 0)
				return true;
			for (i in myTab[scopename]) {
				if (myTab[scopename][i] == tablename)
					return true;
			}
		} else {
			for (i in myTab) {
				for (j in myTab[i]) {
					if (myTab[i][j] == tablename) {
						return true;
					}
				}
			}
		}
		return false;
}

//checking for false updates
kony.sync.checkForFalseUpdate = function (dbname, tbname, twcs, markForUpload, errorcallback, successcallback) {
	var uploadstatus = true;
	var isError = false;
	if ((markForUpload == false || markForUpload == "false")) {
		return true;
	} else {
		kony.table.insert(twcs, {
			key : kony.sync.historyTableChangeTypeColumn,
			value : "90",
			optype : "EQ",
			comptype : "AND"
		});
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_select(query, [kony.sync.historyTableChangeTypeColumn]);
		kony.sync.qb_from(query, tbname + "_history");
		kony.sync.qb_where(query, twcs);
		var query_compile = kony.sync.qb_compile(query);
		var sql = query_compile[0];
		var params = query_compile[1];
		//var connection = kony.db.openDatabaseSync(dbname,"1.0", dbname, 5 * 1024 * 1024);
		//kony.db.transaction(connection, transaction_callback, errorcallback, update_successcallback);
		var connection = kony.sync.getConnectionOnly(dbname, dbname, errorcallback, "check for false update");
		if(connection !== null){
			kony.sync.startTransaction(connection, transaction_callback, update_successcallback, single_transaction_error_callback, "check for false update");
		}
		function transaction_callback(tx) {
			var resultSet = kony.sync.executeSql(tx, sql, params, errorcallback);
			if ((resultSet != false)) {
				var num_records = resultSet.rows.length;
				if ((num_records != 0)) {
					kony.sync.syncPrint("ERROR: [KONYSYNC] Record does not exist on server, mark it for upload before updating/deleting it");
					//errorcallback(7010, "ERROR: [KONYSYNC] Record does not exist on server, mark it for upload before updating/deleting it");
					kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeMarkForUpload, kony.sync.getErrorMessage(kony.sync.errorCodeMarkForUpload), null));
					uploadstatus = false;
				} else {
					uploadstatus = true;
				}
			} else {
				//return;
				isError = true;
			}

		}
	}

	function update_successcallback() {
		if (!isError && uploadstatus == true) {
			successcallback();
		}
	}
	
	function single_transaction_error_callback() {
		if (!isError) {
			kony.sync.showTransactionError(error_callback, "check for false update");
		}else{
			kony.sync.verifyAndCallClosure(error_callback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}
}

kony.sync.checkForFalseUpdateWCS = function (dbname, tbname, twcs, markForUpload, errorcallback, successcallback) {
	var uploadstatus = true;
	var isError = false;
	if ((markForUpload == false || markForUpload == "false")) {
		return true;
	} else {
		twcs = twcs + " AND " + kony.sync.historyTableChangeTypeColumn + " = 90";
		var sql = "select " + kony.sync.historyTableChangeTypeColumn + " from " + tbname + "_history " + twcs;
		//var connection = kony.db.openDatabaseSync(dbname,"1.0", dbname, 5 * 1024 * 1024);
		//kony.db.transaction(connection,transaction_callback,errorcallback, update_successcallback);
		var connection = kony.sync.getConnectionOnly(dbname, dbname, errorcallback, "check for false update WCS");
		if(connection !== null){
			kony.sync.startTransaction(connection, transaction_callback, update_successcallback, update_failurecallback, "check for false update WCS");
		}
		function transaction_callback(tx) {
			var resultSet = kony.sync.executeSql(tx, sql, null, errorcallback);
			if ((resultSet != false)) {
				var num_records = resultSet.rows.length;
				if ((num_records != 0)) {
					kony.sync.syncPrint("ERROR: [KONYSYNC] Record does not exist on server, mark it for upload before updating/deleting it");
					//errorcallback(7010, "ERROR: [KONYSYNC] Record does not exist on server, mark it for upload before updating/deleting it");
					kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeMarkForUpload, kony.sync.getErrorMessage(kony.sync.errorCodeMarkForUpload), null));
					uploadstatus = false;
				} else {
					uploadstatus = true;
				}
			} else {
				//return;
				isError = true;
			}
		}
		function update_successcallback() {
			if (!isError && uploadstatus == true) {
				successcallback();
			}
		}
		function update_failurecallback() {
			if (!isError && uploadstatus == true) {
				kony.sync.showTransactionError(errorcallback,"check for false update WCS");
			}else{
				kony.sync.verifyAndCallClosure(errorcallback, kony.sync.errorObject);
				kony.sync.errorObject = null;
			}
		}
	}
}

//This function gets connection and starts a transaction
kony.sync.getConnection = function (dbName, displayName, transactionCallBack, successCallBack, errorCallBack) {
	var connection = kony.db.openDatabaseSync(dbName, "1.0", displayName, 5 * 1024 * 1024);
	kony.db.transaction(connection, transactionCallBack, errorCallBack, successCallBack);
}

//This function gets connection
kony.sync.getConnectionOnly = function (dbName, displayName, errorCallback, moduleName) {
	var connection = kony.db.openDatabaseSync(dbName, "1.0", displayName, 5 * 1024 * 1024);
	if(connection == null){		
		if(moduleName == null) {
			moduleName = "";
		}
		kony.sync.syncPrint("ERROR: [KONYSYNC] " + moduleName + ": Error in getting connection");
		kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeDbConnection, kony.sync.getErrorMessage(kony.sync.errorCodeDbConnection), null));
		return null;
	}else{
		return connection;
	}
	
}

//This function starts a transaction given a connection
kony.sync.startTransaction = function (connection, transactionCallBack, successCallBack, errorCallBack, moduleName) {
/*	if (connection === null) {
		kony.sync.syncPrint("ERROR: [KONYSYNC] " + moduleName + ":" + " Db connection is null");
		kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeDbConnection, kony.sync.getErrorMessage(kony.sync.errorCodeDbConnection), null));
		return null;
	}
*/	
/*	function transactionErrorCallback() {
		kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
	}
*/
	kony.db.transaction(connection, transactionCallBack, errorCallBack, successCallBack);
}

kony.sync.showTransactionError = function (errorCallBack, moduleName) {
	if(moduleName == null) {
		moduleName = "";
	}
	kony.sync.syncPrint("ERROR: [KONYSYNC] " + moduleName + ":" + " Db connection is null");
	kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
}
kony.sync.checkIntegrity = function (dbname, Hash, successCallback, errorCallBack) {
	var status = true;
	var isError = false;
	var connection = kony.sync.getConnectionOnly(dbname, dbname, errorCallBack, "Checking integrity");
	if(connection !== null){
		kony.sync.startTransaction(connection, integrityTransaction, integritySuccess, integrityFailure, "Checking Referential Integrity Constraints");
	}
	function integrityTransaction(tx) {
		for (var key in Hash) {
			if (kony.sync.isNull(Hash[key]["targetAttributeValue"])) {
				continue;
			}
			if (Hash[key]["targetAttributeValue"] == "") {
				Hash[key]["targetAttributeValue"] = "''";
			}
			var sql = "select * from " + key + " where " + Hash[key]["sourceAttribute"] + " = " + Hash[key]["targetAttributeValue"] + "";
			var resultSet = kony.sync.executeSql(tx, sql, null, errorCallBack);
			if (resultSet !== false) {
				if (resultSet.rows.length > 0) {
					status = true;
				} else {
					status = false;
					kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeReferentialIntegrity, kony.sync.getReferetialIntegrityerrMessg(key, Hash[key]["sourceAttribute"], Hash[key]["targetAttributeValue"])));
					break;
				}
			} else {
				status = false;
				isError = true;
				break;
			}
		}
	}
	function integritySuccess() {
		if (status == true) {
			kony.sync.verifyAndCallClosure(successCallback);
		}
	}
	
	function integrityFailure() {
		if (!isError) {
			kony.sync.showTransactionError(errorCallBack,"Checking integrity");
		}else{
			kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}
}

kony.sync.checkIntegrityinTransaction = function (tx, Hash, errorCallBack) {
	for (var key in Hash) {
		if (kony.sync.isNull(Hash[key]["targetAttributeValue"])) {
			continue;
		}
		if (Hash[key]["targetAttributeValue"] == "") {
			Hash[key]["targetAttributeValue"] = "''";
		}
		var sql = "select * from " + key + " where " + Hash[key]["sourceAttribute"] + " = " + Hash[key]["targetAttributeValue"] + "";
		var resultSet = kony.sync.executeSql(tx, sql, null, errorCallBack);
		if (resultSet != false) {
			if (resultSet.rows.length == 0) {
				kony.sync.verifyAndCallClosure(errorCallBack, kony.sync.getErrorTable(kony.sync.errorCodeReferentialIntegrity, kony.sync.getReferetialIntegrityerrMessg(key, Hash[key]["sourceAttribute"], Hash[key]["targetAttributeValue"])));
				return false;
			}
		} else {
			return false;
		}
	}
	return true;

}
kony.sync.convertOrderByMapToValuesTable = function (orderByMap) {
	var valuesTable = {}
	for (i in orderByMap) {
		valuesTable[orderByMap[i].key] = orderByMap[i].key;
	}
	return valuesTable;
}

kony.sync.convertToValuesTableOrderByMap = function (orderByMap, valuesTable) {
	var orderByMapFiltered = []
	var j = 0;
	for (i in orderByMap) {
		if (valuesTable[orderByMap[i].key] == orderByMap[i].key) {
			orderByMapFiltered[j] = orderByMap[i];
			j++;
		}
	}
	return orderByMapFiltered;
}

kony.sync.isValidFunctionType = function (closure) {
	return kony.type(closure) === "function"
};

kony.sync.initializeScopeSettings = function (tx) {
	var query = kony.sync.qb_createQuery();
	var json = "{\"scopeSettings\" : {}}"
		kony.sync.qb_set(query, {
			"id" : 1,
			"action" : "",
			"details" : json
		});
	kony.sync.qb_insert(query, "konysyncDIAGNOSTICS");
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
}

kony.sync.updateScopeSettings = function (tx, scopename) {
	var resultset = kony.sync.executeSql(tx, "select * from konysyncDIAGNOSTICS");
	if(resultset === false){
		return false;
	}
	var settings = ""
		if ((resultset != null)) {
			if ((resultset.rows != null && resultset.rows.length > 0)) {
				rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
				settings = rowItem["details"];
			} else {
				kony.sync.syncPrint("Updation of Scope Settings Failed");
			}
		} else {
			kony.sync.syncPrint("Updation of Scope Settings Failed");
		}
		var table = JSON.parse(settings);
	if (table["scopeSettings"][scopename] == null) {
		table["scopeSettings"][scopename] = {
			"initialize" : true
		};
	} else if (table["scopeSettings"][scopename]["initialize"] == null) {
		table["scopeSettings"][scopename]["initialize"] = true;
	}
	var query = kony.sync.qb_createQuery();
	var json = JSON.stringify(table);
	kony.sync.qb_set(query, {
		"details" : json
	});
	kony.sync.qb_update(query, "konysyncDIAGNOSTICS");
	kony.sync.qb_where(query, [{
				"key" : "id",
				"value" : 1
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
}

kony.sync.getScopeSettings = function (scopename, dbname, callback, errorcallback) {
	var settings;
	var isError = false;
	function getSettingsTransaction(tx) {
		var resultset = kony.sync.executeSql(tx, "select * from konysyncDIAGNOSTICS");
		var set = ""
		if ((resultset !== false)) {
			if ((resultset.rows != null && resultset.rows.length > 0)) {
				rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
				set = rowItem["details"];
			} else {
				kony.sync.syncPrint("Updation of Scope Settings Failed");
			}
		} else {
			kony.sync.syncPrint("Updation of Scope Settings Failed");
			isError = true;
		}
		var table = JSON.parse(set);
		if (table["scopeSettings"][scopename] != null) {
			settings = table["scopeSettings"][scopename];
		}
	}

	function getSettingsCompleted() {
		callback(settings);
	}

	function getSettingsFailed() {
		kony.sync.callTransactionError(isError, errorcallback);
	}

	var dbconnection = kony.sync.getConnectionOnly(dbname, dbname, getSettingsFailed, "getScopeSettings");
	if(dbconnection !== null){
		kony.sync.startTransaction(dbconnection, getSettingsTransaction, getSettingsCompleted, getSettingsFailed);
	}
};

kony.sync.isScopeInitialized = function (scopename, dbname, callback) {
	function localcallback(settings) {
		if (settings != null) {
			if (settings["initialize"] != null && settings["initialize"]) {
				callback(true);
			} else {
				callback(false);
			}
		} else {
			callback(false);
		}
	}
	
	function errorCallback(res){
		kony.sync.onDownloadCompletion(true, res);
	}
	var settings = kony.sync.getScopeSettings(scopename, dbname, localcallback, errorCallback);
};

kony.sync.setPragmaSize = function (tx) {
	return kony.sync.executeSql(tx, "PRAGMA CACHE_SIZE=50");
};

kony.sync.isValidJSTable = function (inputTable) {
	if (inputTable == null) {
		return false;
	}
	if (kony.type(inputTable) === "object" || kony.type(inputTable) === "Array") {
		return true;
	} else {
		return false;
	}
};

kony.sync.isNull = function (val) {
	if (val === null || val === undefined)
		return true;
	val = val + "";
	return (kony.string.equalsIgnoreCase(val, "null"));
}

//returns whether a error upload policy is continueonerror or not
kony.sync.isUploadErrorPolicyCOE = function (currentScope) {
	var scopename = currentScope["ScopeName"];
	if (currentScope[kony.sync.syncStrategy] == kony.sync.syncStrategy_OTA &&
		kony.sync.currentSyncConfigParams[kony.sync.sessionTasks] != null && kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][scopename] != null &&
		kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][scopename][kony.sync.sessionTaskUploadErrorPolicy] == kony.sync.sessionTaskUploadErrorPolicyCOE) {
		return true;
	}
	return false;
}

kony.sync.isEmptyString = function (val) {
	if (kony.string.equalsIgnoreCase(kony.type(val), "string") && val.trim() === "") {
		return true;
	} else {
		return false;
	}
}

kony.sync.isValidNumberType = function (val) {
	if (kony.string.equalsIgnoreCase(kony.type(val), "number"))
		return true;
	else if (kony.string.equalsIgnoreCase(kony.type(val), "string") && null != kony.sync.tonumber(val))
		return true;
	else
		return false;

}

kony.sync.isValidBooleanType = function (val) {
	if (kony.string.equalsIgnoreCase(kony.type(val), "boolean")) {
		return true;
	} else if (kony.string.equalsIgnoreCase(kony.type(val), "string")) {
		if (kony.string.equalsIgnoreCase(val, "false") || kony.string.equalsIgnoreCase(val, "true") || kony.string.equalsIgnoreCase(val, "0") || kony.string.equalsIgnoreCase(val, "1")) {
			return true;
		}
	} else if (kony.string.equalsIgnoreCase(kony.type(val), "number")) {
		if (val === 0 || val === 1) {
			return true;
		}
	}

	return false;
}

kony.sync.isMaliciousType = function (val) {
	if (kony.sync.isValidNumberType(val) && isNaN(val))
		return "NaN";
	if (val == Number.POSITIVE_INFINITY || val == Number.NEGATIVE_INFINITY)
		return "infinity";
	return false;
}

kony.sync.genMaliciousTypeCheck = function (obj, errorcallback) {
	if (kony.string.equalsIgnoreCase(kony.type(obj), "object") || kony.string.equalsIgnoreCase(kony.type(obj), "table")) {
		for (var i in obj) {
			var maliciousType = kony.sync.isMaliciousType(obj[i]);
			if (maliciousType !== false) {
				kony.sync.syncPrint("ERROR: [KONYSYNC] " + kony.sync.getErrorMessage(kony.sync.errorCodeMaliciousType, i, maliciousType));
				kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeMaliciousType, kony.sync.getErrorMessage(kony.sync.errorCodeMaliciousType, i, maliciousType)));
				return true;
			} else {
				if (obj[i] === undefined)
					obj[i] = "null";
			}
		}
	} else {
		var maliciousType = kony.sync.isMaliciousType(obj);
		if (maliciousType !== false) {
			kony.sync.syncPrint("ERROR: [KONYSYNC] " + kony.sync.getErrorMessage(kony.sync.errorCodeMaliciousType, "", maliciousType));
			kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeMaliciousType, kony.sync.getErrorMessage(kony.sync.errorCodeMaliciousType, "", maliciousType)));
			return true;
		}
	}
	return false;
}

kony.sync.getBoolean = function (val) {
	if (kony.sync.isValidBooleanType(val)) {
		val = val + "";
		if (kony.string.equalsIgnoreCase(val, "true") || kony.string.equalsIgnoreCase(val, "1") || val === 1) {
			return true;
		} else {
			return false;
		}
	} else {
		return val;
	}
}

kony.sync.getString = function (val) {
	if (kony.sync.isNull(val)) {
		return "";
	}
	return val.toString();
}

kony.sync.getUploadStatus = function (markForUpload) {
	if (markForUpload === false || markForUpload == "false") {
		markForUpload = "false";
	} else {
		markForUpload = "true";
	}
	return markForUpload;
}

kony.sync.getDBName = function () {
	var syncscopes = konysyncClientSyncConfig.ArrayOfSyncScope;
	for (var i = 0; (syncscopes != null) && i <= syncscopes.length; i++) {
		var scope = syncscopes[i];
		//This logic needs to be changed when we have separate DB for each scope
		if (scope[kony.sync.scopeDataSource] !== null) {
			return scope[kony.sync.scopeDataSource];
		}
	}
	return null;
}

kony.sync.mergeTable = function (toObj, frmObj) {
	if (!kony.sync.isValidJSTable(frmObj)) {
		return toObj;
	}
	if (!kony.sync.isValidJSTable(toObj)) {
		return frmObj;
	}

	for (var k in frmObj) {
		toObj[k] = frmObj[k];
	}

	return toObj;
};

kony.sync.pkNotFoundErrCallback = function(errorcallback, objName){
	kony.sync.syncPrint("ERROR: [KONYSYNC] No data with specified primary key found in SyncObject " + objName + ".");
	errorcallback(kony.sync.getErrorTable(kony.sync.errorCodeNoDataWithPrimaryKey, kony.sync.getErrorMessage(kony.sync.errorCodeNoDataWithPrimaryKey, objName)));
};

kony.sync.skyEventObserver = function (event, args, eventFinishCallback, errorcallback, isCascade) {
	if (event !== "START") {
		if (event === "ERROR") {
			if (!kony.sync.isNull(args)) {
				if (isCascade) {
					sky.rollbackTransaction(kony.sky.skyEmptyFunction);
				}
				var errorCode = args.ERRORCODE;
				var errorMsg = args.ERRORDESC;
				kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(errorCode, errorMsg));
			}
		}
		if (event === "FINISH") {
			kony.sync.verifyAndCallClosure(eventFinishCallback, args);
		}
	}
};

kony.sync.removeCascadeHelper = function (tx, srcAttribute, targetAttribute, tbname, wcs, targetObjectRemoveCascade, targetObjectName, isCascade, errorcallback, markForUpload, pkRecord) {
	if (pkRecord === null) {
		var sqlTarget = "select " + srcAttribute + " from " + tbname + wcs;
		var resultSet = kony.sync.executeSql(tx, sqlTarget, null);
		if (resultSet === false) {
			return false;
		}
		var num_records = resultSet.rows.length;
		if (num_records === 0) {
			return true;
		}
		if (isCascade) {
			kony.sync.syncPrint("No of Records to be deleted in " + targetObjectName + " for cascade delete=" + num_records);
		}
		for (var i = 0; i <= num_records - 1; i++) {
			var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
			var wcsCascade = " where " + targetAttribute + " = '" + record[srcAttribute] + "'";
			if (targetObjectRemoveCascade(tx, wcsCascade, errorcallback, markForUpload, isCascade, tbname) === false) {
				return false;
			}
		}
	} else {
		var wcsCascade = " where " + targetAttribute + " = '" + pkRecord[srcAttribute] + "'";
		return targetObjectRemoveCascade(tx, wcsCascade, errorcallback, markForUpload, isCascade, tbname);
	}
	return true;
}

kony.sync.rollbackTransaction = function (tx) {
	function dummyError() {
		//rollback the transaction
		return true;
	}
	//dummy statement
	kony.db.executeSql(tx, "dummy", null, dummyError);
}

//Wrapper for kony.db.executeSql
kony.sync.executeSql = function (tx, sql, params, errorCallback, rollback, opMsg) {
	if (opMsg != null) {
		kony.sync.syncPrint("[KonySync]" + opMsg);
	}
	kony.sync.syncPrint("[KonySync] SQL Query : " + sql);
	kony.sync.syncPrint("[KonySync] SQL Params : " + params);
	var result = kony.db.executeSql(tx, sql, params, localErrorCallback);
	if (result == null) {
		kony.sync.syncPrint("[KonySync] Query execution failed");
		return false;
	} else {
		kony.sync.syncPrint("[KonySync] Query execution success");
		return result;
	}
	function localErrorCallback(tx, res) {
		var errorInfo = {};
		errorInfo[kony.sync.errorInfoTransactionID] = tx;
		errorInfo[kony.sync.errorInfoDatabaseError] = res;
		kony.sync.syncPrint("[KonySync] SQLite Error : " + JSON.stringify(res));
		kony.sync.errorObject = kony.sync.getErrorTable(kony.sync.errorCodeSQLStatement, kony.sync.getErrorMessage(kony.sync.errorCodeSQLStatement), errorInfo)
	//	kony.sync.verifyAndCallClosure(errorCallback, kony.sync.getErrorTable(kony.sync.errorCodeSQLStatement, kony.sync.getErrorMessage(kony.sync.errorCodeSQLStatement), errorInfo));
		if (rollback === false) {
			return false;
		} else {
			return true;
		}
	}
}

kony.sync.callTransactionError = function(isError, errorcallback){
	if (!isError) {
		return kony.sync.verifyAndCallClosure(errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
	}
	else{
		return kony.sync.verifyAndCallClosure(errorcallback, kony.sync.errorObject);
		kony.sync.errorObject = null;
	}
}

kony.sync.validateWhereClause = function(wcs){

	wcs = kony.sync.getString(wcs);

	if(!kony.string.startsWith(kony.string.trim(wcs),"where")){
		wcs = " where " +  wcs;
	}
	
	return wcs;
}
//  **************** End KonySyncHelper.js*******************


//  **************** Start KonySyncInit.js*******************
//Initializes the DB with Generated Scope
kony.sync.syncInit = function(on_sync_init_success, on_sync_init_error) {
    // Create the database from xml. It also contains the provisioning commands
    var syncscopes = konysyncClientSyncConfig[kony.decrement("ArrayOfSyncScope")];
    kony.sync.syncConfigurationDBName = konysyncClientSyncConfig["AppID"];
	var isError = false;
    
	function loadDatabase() {
        var createDB = false;
        syncscopes.syncTableScopeDic = [];
        var currentscope = null;
        var currenttemptable = null;
        kony.sync.syncPrint("loading DB");

        function dbValidationCompleted() {
            loadSyncScope(1, createDB);
        }

        function loadDatabaseTransaction(tx) {
            // this is to be uncommented when we have db for each scope
            //for i, ddl in ipairs ( DDLCommands[currentscope[kony.sync.scopeName]] ) do 
            var DDLCommands = null;
           if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLCE)) {
                DDLCommands = konysyncSQLCEDDLCommands;
            } else {
                DDLCommands = konysyncSQLLiteDDLCommands;
            }
            for (var i = 0;(DDLCommands != null) && i < DDLCommands.length; i++) {
                var ddl = DDLCommands[i];
                kony.sync.syncPrint("ddl :" + ddl);
                if(kony.sync.executeSql(tx, ddl)===false){
					isError = true;
					return;
				}
            }
			if(kony.sync.initializeScopeSettings(tx)===false){
				isError = true;
				return;
			}
			if(kony.sync.setPragmaSize(tx)===false){
				isError = true;
				return;
			}
        }
		
        function dbexistsErrorCallback() {
            //Create DB
            createDB = true;
            
            kony.sync.syncPrint("creating DB");
			var conn = kony.sync.getConnectionOnly(currentscope[kony.decrement(kony.sync.scopeDataSource)], currentscope[kony.decrement(kony.sync.scopeDataSource)], on_sync_init_error);
			kony.sync.startTransaction(conn, loadDatabaseTransaction, dbValidationCompleted, initTransactionError);
        }

        function dbexistsSuccessCallback() {
            loadSyncScope(1, false);
        }
        var sqlcheckfordb = null;
        for (var i = 1;
        ((syncscopes) != null) && i <= syncscopes.length; i++) {
            var scope = syncscopes[kony.decrement(i)];
            currentscope = scope;
            syncscopes[kony.decrement(i)] = scope;
            scope.Index = i;
            scope.syncTableDic = [];
            // create helper dictionaries
            for (var k = 1;
            ((scope.ScopeTables) != null) && k <= scope.ScopeTables.length; k++) {
                var syncTable = scope.ScopeTables[kony.decrement(k)];
                scope.syncTableDic[kony.decrement(syncTable.Name)] = syncTable;
                scope.syncTableDic[kony.decrement(syncTable.Name + kony.sync.historyTableName)] = syncTable;
                //[ASM1]Note Assuming that multiple tables dont have the same Name			
                syncscopes.syncTableScopeDic[kony.decrement(syncTable.Name)] = scope.ScopeName;
                syncscopes.syncTableScopeDic[kony.decrement(syncTable.Name + kony.sync.historyTableName)] = scope.ScopeName;
                syncTable.ColumnsDic = [];
                for (var j = 1;(syncTable.Columns != null) && j <= syncTable.Columns.length; j++) {
                    var syncColumn = syncTable.Columns[kony.decrement(j)];
                    syncTable.ColumnsDic[kony.decrement(syncColumn.Name)] = syncColumn;
                }
                currenttemptable = syncTable.Name;
            }
            //Note This change will be undone once we have 1 DB for each scope.
            
            kony.sync.syncPrint("*************");
            
            kony.sync.syncPrint(scope);
            
            kony.sync.syncPrint("*************");
            if ((i == 1)) {
                var scopename = scope.ScopeName;
                syncscopes[kony.decrement(scopename)] = scope;
               var query = kony.sync.qb_createQuery();
                
                kony.sync.qb_select(query, null);
                
                kony.sync.qb_from(query, currenttemptable);
               var query_compile = kony.sync.qb_compile(query);
                sqlcheckfordb = query_compile[0];
            }
        }
        kony.sync.scopes = syncscopes;
        kony.sync.scopes.scopecount = syncscopes.length;
        kony.sync.single_execute_sql(currentscope[kony.decrement(kony.sync.scopeDataSource)], sqlcheckfordb + " LIMIT 1", null, dbexistsSuccessCallback, dbexistsErrorCallback);
    } //loadSyncScope(1,createDB);
 
	//Check If DB is created or not		
    function loadSyncScope(scopeindex, addmetainfo) {
        var scope = kony.sync.scopes[kony.decrement(scopeindex)];
        //Add scopes to MetaInfo table if not created and Initialize kony.sync.currentSyncScopesState table.	
        function loadSyncScopeTransaction(tx) {
            if ((addmetainfo)) {
               var query = kony.sync.qb_createQuery();
                kony.sync.qb_set(query, {
                    id: "" + scopeindex,
                    filtervalue: "no filter",
                    scopename: scope.ScopeName,
                    versionnumber: 0,
                    lastserversynccontext: "",
                    replaysequencenumber: 0,
                    lastgeneratedid: -1
                });
                
                kony.sync.qb_insert(query, kony.sync.metaTableName);
                //local sql = "insert into "..kony.sync.metaTableName.." (id,scopename,versionnumber,lastserversynccontext,replaysequencenumber,lastgeneratedid) values ('"..id.."','"..scope.ScopeName.."','0','','0','-1')"
               var query_compile = kony.sync.qb_compile(query);
                var sql = query_compile[0];
                var params = query_compile[1];
                if(kony.sync.executeSql(tx, sql, params)===false){
					isError = true;
				}
                kony.sync.currentSyncScopesState[kony.decrement(scope.ScopeName)] = 0;
            } else {
               var query = kony.sync.qb_createQuery();                
                kony.sync.qb_select(query, [kony.sync.metaTableSyncVersionCloumn]);                
                kony.sync.qb_from(query, kony.sync.metaTableName);                
                kony.sync.qb_where(query, [{
                    key: kony.sync.metaTableScopeColumn,
                    value: scope.ScopeName
                }]);
                //local sql = "select "..kony.sync.metaTableSyncVersionCloumn.." from "..kony.sync.metaTableName.." where "..kony.sync.metaTableScopeColumn.."='"..scope.ScopeName.."'";
               var query_compile = kony.sync.qb_compile(query);
                var sql = query_compile[0];
                var params = query_compile[1];
                var resultset = kony.sync.executeSql(tx, sql, params);
                if(resultset !== false){
					var rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
					if ((rowItem[kony.decrement(kony.sync.metaTableSyncVersionCloumn)] != null)) {
						kony.sync.currentSyncScopesState[kony.decrement(scope.ScopeName)] = rowItem[kony.decrement(kony.sync.metaTableSyncVersionCloumn)];
					} else {
						kony.sync.isResetInProgress = false;
						kony.sync.verifyAndCallClosure(on_sync_init_error, kony.sync.getSyncInitFailed());

					}
				}
				else {
					kony.sync.isResetInProgress = false;
					isError = true;
					//kony.sync.verifyAndCallClosure(on_sync_init_error, kony.sync.getSyncInitFailed());
				}
            }
        }

        function loadSyncScopeError() {
			kony.sync.isResetInProgress = false;
			kony.sync.verifyAndCallClosure(on_sync_init_error, kony.sync.getSyncInitFailed());
        }

        function loadSyncScopeSuccess() {
            if ((scopeindex != kony.sync.scopes.length)) {
                loadSyncScope(scopeindex + 1, addmetainfo);
            } else {
				kony.sync.isResetInProgress = false;
				kony.sync.verifyAndCallClosure(on_sync_init_success);
            }
        }
		
		var scopename = scope.ScopeName;
        syncscopes[kony.decrement(scopename)] = scope;
       // var connection = kony.db.openDatabaseSync(scope[kony.decrement(kony.sync.scopeDataSource)], "1.0", scope[kony.decrement(kony.sync.scopeDataSource)], 5 * 1024 * 1024);
       // kony.db.transaction(connection, loadSyncScopeTransaction, on_sync_init_error, loadSyncScopeSuccess);
		var connection = kony.sync.getConnectionOnly(scope[kony.decrement(kony.sync.scopeDataSource)],scope[kony.decrement(kony.sync.scopeDataSource)]);
		kony.sync.startTransaction(connection, loadSyncScopeTransaction, loadSyncScopeSuccess, initTransactionError);
    }

    function generateClientDeviceID() {
        function createTable() {
            var sqltable = "create table " + kony.sync.syncConfigurationTableName + " (" + kony.sync.syncConfigurationColumnDeviceIDName + " nvarchar(4000)," + kony.sync.syncConfigurationColumnInstanceIDName + " nvarchar(4000))";
            kony.sync.single_execute_sql(kony.sync.syncConfigurationDBName, sqltable, null, createDeviceID, on_sync_init_error);
        }

        function createDeviceID() {
            //local deviceid = os.platform().deviceid..os.date("mm/dd/yyyy")..os.time();			
            kony.sync.deviceId = "";
            kony.sync.instanceId = "";
            var settable = [];
            settable[kony.decrement(kony.sync.syncConfigurationColumnDeviceIDName)] = kony.sync.deviceId;
            settable[kony.decrement(kony.sync.syncConfigurationColumnInstanceIDName)] = kony.sync.instanceId;
           var query = kony.sync.qb_createQuery();
            kony.sync.qb_set(query, settable);            
            kony.sync.qb_insert(query, kony.sync.syncConfigurationTableName);
            //local sqlinsert = "insert into "..kony.sync.syncConfigurationTableName.." ("..kony.sync.syncConfigurationColumnDeviceIDName..") values ('"..deviceid.."')";
			var query_compile = kony.sync.qb_compile(query);
            var sqlinsert = query_compile[0];
            var params = query_compile[1];
            kony.sync.single_execute_sql(kony.sync.syncConfigurationDBName, sqlinsert, params, loadDatabase, on_sync_init_error);
        }

        function setDeviceID(configRow) {
            kony.sync.deviceId = configRow[kony.decrement(kony.sync.syncConfigurationColumnDeviceIDName)];
            kony.sync.instanceId = configRow[kony.decrement(kony.sync.syncConfigurationColumnInstanceIDName)];
            loadDatabase();
        }
		var query = kony.sync.qb_createQuery();
        
        kony.sync.qb_select(query, null);
        
        kony.sync.qb_from(query, kony.sync.syncConfigurationTableName);
        kony.sync.single_execute_sql(kony.sync.syncConfigurationDBName, "select * from " + kony.sync.syncConfigurationTableName+" LIMIT 1", null, setDeviceID, createTable);
    }
    
	function initTransactionError(){
		kony.sync.callTransactionError(isError, on_sync_init_error);
	}
	generateClientDeviceID();
};

kony.sync.syncReset = function(successcallback, errorcallback) {
	if(kony.sync.isResetInProgress){
		kony.sync.syncPrint("Reset already in progress...");
		return;
	}
	kony.sync.isResetInProgress = true;
    var dbList = [];    
    kony.table.insert(dbList, {
        dbname: kony.sync.syncConfigurationDBName,
        tableList: [kony.sync.syncConfigurationTableName]
    });
    for (var i = 1;
    ((konysyncClientSyncConfig.ArrayOfSyncScope) != null) && i <= konysyncClientSyncConfig.ArrayOfSyncScope.length; i++) {
        var v = konysyncClientSyncConfig.ArrayOfSyncScope[kony.decrement(i)];
        var tab = [];
        for (var k in v.ScopeTables) {
            var w = v.ScopeTables[kony.decrement(k)];
            kony.table.insert(tab, w.Name);
            kony.table.insert(tab, w.Name + kony.sync.historyTableName);
            kony.table.insert(tab, w.Name + kony.sync.originalTableName);
        }
        if ((i == 1)) {
            kony.table.insert(tab, kony.sync.metaTableName);
            kony.table.insert(tab, "konysyncDIAGNOSTICS");
        }
        kony.table.insert(dbList, {
            dbname: v.ScopeDatabaseName,
            tableList: tab
        });
    }
    
    kony.sync.syncDropDatabase(dbList, successcallback, errorcallback);
};

kony.sync.konySyncRollback = function(successcallback, errorcallback) {
    
    kony.sync.rollbackCurrentScope = null;
    kony.sync.konySyncRollBackPendingChanges(null, null, null, successcallback, errorcallback, true);
};

kony.sync.syncPendingAck = function(successcallback, errorcallback) {
    kony.sync.pendingAckIndex = 1;
    kony.sync.pendingAckResult = {};
    var currentScope = kony.sync.scopes[0];
    var dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
	var dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
    kony.sync.pendingAckCount = 0;
	var isError = false;

    function konysyncPendingAck_transaction(tx) {
        function single_transaction_callback_local(sql, params, tbname) {
            var resultSet = kony.sync.executeSql(tx, sql, params);
			if(resultSet===false){
				isError = true;
				return false;
			}
            var tableData = [];
            var num_records = resultSet.rows.length;
            for (var j = 0; j <= num_records - 1; j++) {
                var record = kony.db.sqlResultsetRowItem(tx, resultSet, j);
                kony.table.insert(tableData, record);
            }
            if ((num_records > 0)) {
                kony.sync.pendingAckCount = kony.sync.pendingAckCount + num_records;
                //table.insert(kony.sync.pendingAckResult,tableData);
                kony.sync.pendingAckResult[kony.decrement(tbname)] = {};
                kony.sync.pendingAckResult[kony.decrement(tbname)][kony.decrement("count")] = num_records;
                kony.sync.pendingAckResult[kony.decrement(tbname)][kony.decrement("data")] = tableData;
            }
        }
        for (var i = 1;
        ((currentScope.ScopeTables) != null) && i <= currentScope.ScopeTables.length; i++) {
            var syncTable = currentScope.ScopeTables[kony.decrement(i)];
            //kony.sync.syncPrint("Table :"..syncTable.Name);
            var tbname = syncTable.Name;
           var currentversion = kony.sync.getCurrentVersionNumber(tbname)  
            ;
			var sql = "select * from " + tbname + " WHERE " + kony.sync.mainTableChangeTypeColumn + " is not null AND " + kony.sync.mainTableChangeTypeColumn + " <> -1 AND " + kony.sync.mainTableSyncVersionColumn + " <> " + currentversion + " AND " + kony.sync.mainTableChangeTypeColumn + " NOT LIKE '9%'";
            if(single_transaction_callback_local(sql, null, tbname)===false){
				return;
			}
        }
    }

    function konysyncPendingAck_transactionSucessCallback(res) {
        
        kony.sync.syncPrint("Get Pending Acknowledgement Count=" + kony.sync.pendingAckCount);
          kony.sync.syncPrint("Get Pending Acknowledgement=" + kony.sync.pendingAckResult);
        if ((kony.sync.pendingAckIndex == kony.sync.scopes.scopecount)) {
            if ((successcallback != null)) {
                var konysyncPendingAckDic = {};
                konysyncPendingAckDic.totalCount = kony.sync.pendingAckCount;
                konysyncPendingAckDic.totalData = kony.sync.pendingAckResult;
                successcallback(konysyncPendingAckDic);
            }
        } else {
            kony.sync.pendingAckIndex = kony.sync.pendingAckIndex + 1;
            currentScope = kony.sync.scopes[kony.decrement(kony.sync.pendingAckIndex)];
            dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
           // dbconnection = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
			dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
			kony.sync.startTransaction(dbconnection, konysyncPendingAck_transaction, konysyncPendingAck_transactionSucessCallback, konysyncPendingAck_transactionErrorCallback, "Get Pending Acknowledgement");
        }
    }
	
	function konysyncPendingAck_transactionErrorCallback() {
		kony.sync.callTransactionError(isError, errorcallback);
	}
	
	kony.sync.startTransaction(dbconnection, konysyncPendingAck_transaction, konysyncPendingAck_transactionSucessCallback, konysyncPendingAck_transactionErrorCallback, "Get Pending Acknowledgement");
};

kony.sync.syncPendingUpload = function(successcallback, errorcallback) {
    kony.sync.pendingUploadIndex = 1;
    kony.sync.pendingUploadResult = {};
    var currentScope = kony.sync.scopes[0];
    var dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
    //var dbconnection = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
	var dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
    kony.sync.pendingUploadCount = 0;
	var isError = false;
	
    function konysyncPendingUpload_transaction(tx) {
        function single_transaction_callback_local(sql, params, tbname) {
            var resultSet = kony.sync.executeSql(tx, sql, params);
			if(resultSet===false){
				isError = false;
				return false;
			}
            var tableData = [];
            var num_records = resultSet.rows.length;
            for (var j = 0; j <= num_records - 1; j++) {
                var record = kony.db.sqlResultsetRowItem(tx, resultSet, j);
                kony.table.insert(tableData, record);
            }
            if ((num_records > 0)) {
                kony.sync.pendingUploadCount = kony.sync.pendingUploadCount + num_records;
                kony.sync.pendingUploadResult[kony.decrement(tbname)] = {};
                kony.sync.pendingUploadResult[kony.decrement(tbname)][kony.decrement("count")] = num_records;
                kony.sync.pendingUploadResult[kony.decrement(tbname)][kony.decrement("data")] = tableData;
            }
        }
        for (var i = 1;
        ((currentScope.ScopeTables) != null) && i <= currentScope.ScopeTables.length; i++) {
            var syncTable = currentScope.ScopeTables[kony.decrement(i)];
            var tbname = syncTable.Name;
			
           var currentversion = kony.sync.getCurrentVersionNumber(tbname);
            var sql = "select * from " + tbname + " WHERE " + kony.sync.mainTableChangeTypeColumn + " is not null AND " + kony.sync.mainTableChangeTypeColumn + " <> -1 AND " + kony.sync.mainTableSyncVersionColumn + " = " + currentversion + " AND " + kony.sync.mainTableChangeTypeColumn + " NOT LIKE '9%'";
            if(single_transaction_callback_local(sql, null, tbname)===false){
				return;
			}
        }
    }

    function konysyncPendingUpload_transactionSucessCallback(res) {
        kony.sync.syncPrint("success callback");
        
        kony.sync.syncPrint("Pending Uploads Count" + kony.sync.pendingUploadCount);
        
        kony.sync.syncPrint("Pending Uploads" + kony.sync.pendingUploadResult);
        if ((kony.sync.pendingUploadIndex == kony.sync.scopes.scopecount)) {
            if ((successcallback != null)) {
                var konysyncPendingUploadDic = {};
                konysyncPendingUploadDic.totalCount = kony.sync.pendingUploadCount;
                konysyncPendingUploadDic.totalData = kony.sync.pendingUploadResult;
                successcallback(konysyncPendingUploadDic);
            }
        } else {
            kony.sync.pendingUploadIndex = kony.sync.pendingUploadIndex + 1;
            currentScope = kony.sync.scopes[kony.decrement(kony.sync.pendingUploadIndex)];
            dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
            //dbconnection = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
			dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
			kony.sync.startTransaction(dbconnection, konysyncPendingUpload_transaction, konysyncPendingUpload_transactionSucessCallback, transactionErrorCallback, "Get Pending Upload");
        }
    }
	
	function transactionErrorCallback() {
		kony.sync.callTransactionError(isError, errorcallback);
	}
	
	kony.sync.startTransaction(dbconnection, konysyncPendingUpload_transaction, konysyncPendingUpload_transactionSucessCallback, transactionErrorCallback, "Get Pending Upload");
};

kony.sync.syncDeferredUpload = function(successcallback, errorcallback) {
    kony.sync.deferredUploadIndex = 1;
    kony.sync.deferredUploadResult = {};
    var currentScope = kony.sync.scopes[0];
    var dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
	var dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
    kony.sync.deferredUploadCount = 0;
	var isError = false;
	
    function konysyncDeferredUpload_transaction(tx) {
        function single_transaction_callback_local(sql, params, tbname) {
            var resultSet = kony.sync.executeSql(tx, sql, params);
			if(resultSet===false){
				isError = true;
				return false;
			}
            var tableData = [];
            var num_records = resultSet.rows.length;
            for (var j = 0; j <= num_records - 1; j++) {
                var record = kony.db.sqlResultsetRowItem(tx, resultSet, j);
                kony.table.insert(tableData, record);
            }
            if ((num_records > 0)) {
                kony.sync.deferredUploadCount = kony.sync.deferredUploadCount + num_records;
                kony.sync.deferredUploadResult[kony.decrement(tbname)] = {};
                kony.sync.deferredUploadResult[kony.decrement(tbname)][kony.decrement("count")] = num_records;
                kony.sync.deferredUploadResult[kony.decrement(tbname)][kony.decrement("data")] = tableData;
            }
        }
        for (var i = 1;
        ((currentScope.ScopeTables) != null) && i <= currentScope.ScopeTables.length; i++) {
            var syncTable = currentScope.ScopeTables[kony.decrement(i)];
            var tbname = syncTable.Name;
           var currentversion = kony.sync.getCurrentVersionNumber(tbname) ;
            var sql = "select * from " + tbname + " WHERE " + kony.sync.mainTableChangeTypeColumn + " is not null AND " + kony.sync.mainTableChangeTypeColumn + " <> -1 AND " + kony.sync.mainTableChangeTypeColumn + " LIKE '9%'";
            if(single_transaction_callback_local(sql, null, tbname)===false){
				return;
			}	
        }
    }

    function konysyncDeferredUpload_transactionSucessCallback(res) {
        kony.sync.syncPrint("Deferred Uploads Count" + kony.sync.deferredUploadCount);
        
        kony.sync.syncPrint("Deferred Uploads" + kony.sync.deferredUploadResult);
        if ((kony.sync.deferredUploadIndex == kony.sync.scopes.scopecount)) {
            if ((successcallback != null)) {
                var konysyncDeferredUploadDic = {};
                konysyncDeferredUploadDic.totalCount = kony.sync.deferredUploadCount;
                konysyncDeferredUploadDic.totalData = kony.sync.deferredUploadResult;
                successcallback(konysyncDeferredUploadDic);
            }
        } else {
            kony.sync.deferredUploadIndex = kony.sync.deferredUploadIndex + 1;
            currentScope = kony.sync.scopes[kony.decrement(kony.sync.deferredUploadIndex)];
            dbname = currentScope[kony.decrement(kony.sync.scopeDataSource)];
           // dbconnection = kony.db.openDatabaseSync(dbname, "1.0", dbname, 5 * 1024 * 1024);
		   dbconnection = kony.sync.getConnectionOnly(dbname,dbname);
		   kony.sync.startTransaction(dbconnection, konysyncDeferredUpload_transaction, konysyncDeferredUpload_transactionSucessCallback, transactionErrorCallback, "Get Deferred Upload");
        }
    }
	
	function transactionErrorCallback() {
		kony.sync.callTransactionError(isError, errorcallback);
	}
	
	kony.sync.startTransaction(dbconnection, konysyncDeferredUpload_transaction, konysyncDeferredUpload_transactionSucessCallback, transactionErrorCallback, "Get Deferred Upload");
};
sync = {
    init: kony.sync.syncInit,
    startSession: kony.sync.syncLoadDeviceID,
    reset: kony.sync.syncReset,
    rollbackPendingLocalChanges: kony.sync.konySyncRollback,
    getPendingAcknowledgement: kony.sync.syncPendingAck,
    getPendingUpload: kony.sync.syncPendingUpload,
	getDeferredUpload: kony.sync.syncDeferredUpload,
};
/*End generated*/
//  **************** End KonySyncInit.js*******************


//  **************** Start KonySyncJSglobalsequences.js*******************
//GlobalSequences File
//  **************** End KonySyncJSglobalsequences.js*******************


//  **************** Start KonySyncMetadata.js*******************
// gets the time when dbname was last syced
kony.sync.getLastSynctime = function (scopename, dbname, scallback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, [kony.sync.metaTableSyncTimeColumn]);
	kony.sync.qb_from(query, kony.sync.metaTableName);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}, {
				key : kony.sync.metaTableFilterValue,
				value : "no filter"
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	kony.sync.single_select_execute(dbname, sql, params, scallback, errorCallback);
	
	function errorCallback(res){
		kony.sync.onDownloadCompletion(true, res);
	}
};

// gets the time when dbname was last syced
kony.sync.getLastSynctimeForUpload = function (scopename, dbname, scallback) {
	function callback(rows) {
		var lastSyncTime = -1;
		var result = "";
		for (var i = 1;
			((rows) != null) && i <= rows.length; i++) {
			var v = rows[kony.decrement(i)];
			if ((v[kony.decrement(kony.sync.metaTableSyncTimeColumn)] != "")) {
				var str = v[kony.decrement(kony.sync.metaTableSyncTimeColumn)];
				var temp = kony.sync.tonumber(str.split(",")[1]);
				//kony.sync.syncPrint("Last Time since Upload :" + temp);
				if ((lastSyncTime == -1)) {
					lastSyncTime = temp;
					result = str;
				} else if ((temp < lastSyncTime)) {
					lastSyncTime = temp;
					result = str;
				}
			}
			kony.sync.syncPrint("Last Time since Upload :" + lastSyncTime);
		}
		if ((lastSyncTime == -1)) {
			var resulttable = [];
			resulttable[kony.decrement(kony.sync.metaTableSyncTimeColumn)] = "";

			scallback([resulttable]);
		} else {
			var resulttable = [];
			resulttable[kony.decrement(kony.sync.metaTableSyncTimeColumn)] = result;

			scallback([resulttable]);
		}
	}
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_select(query, [kony.sync.metaTableSyncTimeColumn]);

	kony.sync.qb_from(query, kony.sync.metaTableName);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "select "..kony.sync.metaTableSyncTimeColumn.." from "..kony.sync.metaTableName.." where "..kony.sync.metaTableScopeColumn.." = '"..scopename.."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	kony.sync.single_select_execute(dbname, sql, params, callback, errorCallback);
	
	function errorCallback(res){
		kony.sync.onUploadCompletion(true, res);
	}
};

// gets the time when dbname was last syced
kony.sync.getLastSynctimeFilter = function (scopename, filter, dbname, scallback) {
	function isDataPresent(result) {
		kony.sync.syncPrint("last sync time in filter :" + result);
		if ((result.length == 1)) {
			scallback(result);
		} else {
			function getscopeindex(resultcount) {
				function calscallback() {
					var table = {}
					table[kony.sync.metaTableSyncTimeColumn] = "";
					scallback([table]);
				}
				var query = kony.sync.qb_createQuery();

				kony.sync.qb_set(query, {
					id : resultcount.length + 1,
					filtervalue : filter,
					scopename : scopename,
					versionnumber : 0,
					lastserversynccontext : "",
					replaysequencenumber : 0,
					lastgeneratedid : -1
				});

				kony.sync.qb_insert(query, kony.sync.metaTableName);
				//local sql = "insert into "..kony.sync.metaTableName.." (id,scopename,versionnumber,lastserversynccontext,replaysequencenumber,lastgeneratedid) values ('"..id.."','"..scope.ScopeName.."','0','','0','-1')"
				var query_compile2 = kony.sync.qb_compile(query);
				var sql2 = query_compile2[0];
				var params2 = query_compile2[1];

				kony.sync.single_select_execute(dbname, sql2, params2, calscallback, errorCallback);
			}
			var query = kony.sync.qb_createQuery();
			kony.sync.qb_select(query, null);
			kony.sync.qb_from(query, kony.sync.metaTableName);
			var query_compile3 = kony.sync.qb_compile(query);
			var sql3 = query_compile3[0];
			var params3 = query_compile3[1];

			kony.sync.single_select_execute(dbname, sql3, params3, getscopeindex, errorCallback);
		}
	}
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, [kony.sync.metaTableSyncTimeColumn]);
	kony.sync.qb_from(query, kony.sync.metaTableName);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}, {
				key : kony.sync.metaTableFilterValue,
				value : filter
			}
		]);
	var query_compile1 = kony.sync.qb_compile(query);
	var sql1 = query_compile1[0];
	var params1 = query_compile1[1];
	kony.sync.single_select_execute(dbname, sql1, params1, isDataPresent, errorCallback);
	
	function errorCallback(res){
		kony.sync.onDownloadCompletion(true, res);
	}
};

// Update the meta tables with last sync time
kony.sync.setLastSyncTime = function (tx, scopename, time, tickcount) {
	var settable = [];
	settable[kony.decrement(kony.sync.metaTableSyncTimeColumn)] = tickcount;
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_update(query, kony.sync.metaTableName);
	kony.sync.qb_set(query, settable);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}, {
				key : kony.sync.metaTableFilterValue,
				value : "no filter"
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
};

// Update the meta tables with last sync time
kony.sync.setLastSyncTimeFilter = function (tx, scopename, filter, time, tickcount) {
	var settable = [];
	settable[kony.decrement(kony.sync.metaTableSyncTimeColumn)] = tickcount;
	settable[kony.decrement(kony.sync.metaTableFilterValue)] = filter;
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_update(query, kony.sync.metaTableName);
	kony.sync.qb_set(query, settable);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}, {
				key : kony.sync.metaTableFilterValue,
				value : filter
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
};
//function getseqnumber (connection,scopename)
kony.sync.getseqnumber = function (connection, scopename) {
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_select(query, [kony.sync.metaTableSyncVersionCloumn]);

	kony.sync.qb_from(query, kony.sync.metaTableName);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "select "..kony.sync.metaTableSyncVersionCloumn.." from "..kony.sync.metaTableName.." where "..kony.sync.metaTableScopeColumn.." = '"..scopename.."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	var resultset = kony.sync.executeSql(connection, sql, params);
	if (resultset === false){
		return false;
	}	
	var rowItem = kony.db.sqlResultsetRowItem(connection, resultset, 0);
	return rowItem;
};
//function setSeqnumber (scopename,dsname,uploaded)
kony.sync.setSeqnumber = function (scopename, dsname, uploaded, callback) {
	var settable = [];
	settable[kony.decrement(kony.sync.metaTableSyncVersionCloumn)] = uploaded;
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_update(query, kony.sync.metaTableName);
	kony.sync.qb_set(query, settable);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	
	function errorcallback(res){
		kony.sync.onUploadCompletion(true, res);
	}
	kony.sync.single_execute_sql(dsname, sql, params, callback, errorcallback);
};
//function getSyncOrder (scopename, tx)
kony.sync.getSyncOrder = function (scopename, tx, errorCallback) {
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_select(query, null);
	kony.sync.qb_from(query, kony.sync.metaTableName);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "select "..kony.sync.metaTableSyncOrderCloumn.." from "..kony.sync.metaTableName.." where "..kony.sync.metaTableScopeColumn.." = '"..scopename.."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	var resultset = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultset !== false) {
		var rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
		kony.sync.syncPrint("sync order value" + rowItem);
		if ((rowItem[kony.decrement(kony.sync.metaTableSyncOrderCloumn)] != null)) {
			return kony.sync.tonumber(rowItem[kony.decrement(kony.sync.metaTableSyncOrderCloumn)]);
		} else {
			return null;
		}
	} else {
		return false;
	}
};

kony.sync.clearSyncHistory = function (dbname, tablename) {
	var sql = "delete from " + tablename + kony.sync.historyTableName;
	var wcs = " where konysyncchangetype NOT LIKE '9%'";
	var testsql = sql + wcs;

	kony.sync.single_execute_sql(dbname, testsql, null, null);
};

kony.sync.clearSyncOriginal = function (dbname, tbname) {
	var sql = "delete from " + tbname + kony.sync.originalTableName;

	kony.sync.single_execute_sql(dbname, sql, null, null);
};

kony.sync.clearDataForCOE = function (tx, scopename, tablename, wcs, newwcs, changeType, pkset, seqNo) {
	var whereClause = kony.sync.CreateCopy(wcs);
	//in case I got client pk from server
	if (pkset != null) {
		kony.sync.serverInsertAckCount = kony.sync.serverInsertAckCount + 1;
		//update history tabel pk with new pk from server
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_update(query, tablename + kony.sync.historyTableName);
		kony.sync.qb_set(query, pkset);
		kony.sync.qb_where(query, whereClause);
		var query_compile = kony.sync.qb_compile(query);
		var sql = query_compile[0];
		var params = query_compile[1];
		if(kony.sync.executeSql(tx, sql, params)===false){
			return 0;
		}
		whereClause = kony.sync.CreateCopy(newwcs);
	} else if (changeType == "update") {
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsUpdatedAck] + 1;
		kony.sync.serverUpdateAckCount = kony.sync.serverUpdateAckCount + 1;
	} else if (changeType == "delete") {
		kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck] = kony.sync.objectLevelInfoMap[tablename][kony.sync.numberOfRowsDeletedAck] + 1;
		kony.sync.serverDeleteAckCount = kony.sync.serverDeleteAckCount + 1;
	}
	if (kony.sync.isUploadErrorPolicyCOE(kony.sync.currentScope)) {
		if(kony.sync.clearHistoryTable(tx, tablename, whereClause, seqNo)===false){
			return 0;
		}	
		if(kony.sync.clearOriginalTable(tx, tablename, wcs)===false){
			return 0;
		}
		return kony.sync.clearMainTableForRemoveAfterUpload(tx, scopename, tablename, wcs);
	}
	return false;
}

kony.sync.clearMainTableForRemoveAfterUpload = function (tx, scopename, tablename, wcs) {
	var whereClause = kony.sync.CreateCopy(wcs);
	if (kony.sync.checkForDeleteAfterUpload(tablename, scopename) == true) {
		if (whereClause == null)
			whereClause = [];
		kony.table.insert(whereClause, {
			key : kony.sync.mainTableChangeTypeColumn,
			value : "nil",
			optype : "NOT_EQ"
		})
		kony.table.insert(whereClause, {
			key : kony.sync.mainTableChangeTypeColumn,
			value : "9%",
			optype : "NOT LIKE"
		})
		kony.table.insert(whereClause, {
			key : kony.sync.mainTableChangeTypeColumn,
			value : "-1",
			optype : "NOT_EQ"
		})
		var query = kony.sync.qb_createQuery();
		kony.sync.qb_delete(query, tablename);
		kony.sync.qb_where(query, whereClause);
		var query_compile = kony.sync.qb_compile(query);
		var sql = query_compile[0];
		var params = query_compile[1];

		if(kony.sync.executeSql(tx, sql, params)===false){
			return 0;
		}
		return true;
	} else {
		return false;
	}
}

kony.sync.clearHistoryTable = function (tx, tablename, wcs, seqNo) {
	var whereClause = kony.sync.CreateCopy(wcs);
	if (whereClause == null)
		whereClause = [];
	if (seqNo != null) {
		kony.table.insert(whereClause, {
			key : kony.sync.historyTableReplaySequenceColumn,
			value : seqNo,
			optype : "LT_EQ"
		})
	}
	kony.table.insert(whereClause, {
		key : kony.sync.historyTableChangeTypeColumn,
		value : "9%",
		optype : "NOT LIKE"
	})
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_delete(query, tablename + kony.sync.historyTableName);
	kony.sync.qb_where(query, whereClause);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
}

kony.sync.clearOriginalTable = function (tx, tablename, wcs) {
	var whereClause = kony.sync.CreateCopy(wcs);
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_delete(query, tablename + kony.sync.originalTableName);
	if (whereClause != null) {
		kony.sync.qb_where(query, whereClause);
	}
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
}
//calls resets sync order for a scope if all the history tables are empty
kony.sync.updateSyncOrderForScope = function (callback) {
	var dbname = kony.sync.currentScope[kony.sync.scopeDataSource];
	var scopename = kony.sync.currentScope[kony.sync.scopeName];
	var isError = false;
	kony.sync.getConnection(dbname, dbname, myTransactionCallBack, clear_success, clear_fail)
	function myTransactionCallBack(tx) {
		var recordcount = 0;
		var versionNo = kony.sync.getseqnumber(tx, scopename);
		for (var i = 0; ((kony.sync.currentScope.ScopeTables) != null) && i <= kony.sync.currentScope.ScopeTables.length; i++) {
			var syncTable = kony.sync.currentScope.ScopeTables[i];
			if (syncTable == null)
				continue;
			var tbname = syncTable.Name;
			var query = kony.sync.qb_createQuery();
			kony.sync.qb_select(query, null);
			kony.sync.qb_from(query, tbname + kony.sync.historyTableName);
			var query_compile = kony.sync.qb_compile(query);
			var sql = query_compile[0];
			var params = query_compile[1];
			var resultSet = kony.sync.executeSql(tx, sql, params);
			if (resultSet !== false) {
				var num_records = resultSet.rows.length;
				recordcount = recordcount + num_records;
				if (num_records > 0) {
					var versionMap = {};
					versionMap[kony.sync.historyTableSyncVersionColumn] = versionNo["versionnumber"];
					var whereClause = [];
					kony.table.insert(whereClause, {
						key : kony.sync.historyTableChangeTypeColumn,
						value : "9%",
						optype : "NOT LIKE"
					})
					var query = kony.sync.qb_createQuery();
					kony.sync.qb_update(query, tbname + kony.sync.historyTableName);
					kony.sync.qb_set(query, versionMap);
					kony.sync.qb_where(query, whereClause);
					var query_compile = kony.sync.qb_compile(query);
					var sql = query_compile[0];
					var params = query_compile[1];
					if(kony.sync.executeSql(tx, sql, params)===false){
						isError = true;
						return;
					}
				}
			}
			else{
				isError = true;
				return;
			}

		}
		if (recordcount == 0) {
			if(kony.sync.updateSyncOrder(tx, scopename)===false){
				isError = true;
				return;
			}
		}

	}
	function clear_fail() {
		kony.sync.downloadFailed(isError);
	}
	function clear_success() {
		if (callback != null)
			callback();
	}
}

//resets sync order for a scope
kony.sync.updateSyncOrder = function (tx, scopename) {
	var settable = {};
	settable[kony.sync.metaTableSyncOrderCloumn] = 0;
	var query = kony.sync.qb_createQuery();
	kony.sync.qb_update(query, kony.sync.metaTableName);
	kony.sync.qb_set(query, settable);
	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	return kony.sync.executeSql(tx, sql, params);
}

kony.sync.clearSyncOrder = function (dbname, scopename, callback) {

	var recordcount = 0;
	var j = 0;
	var currentScope = {};
	var isError = false;
	for (var i in kony.sync.scopes) {
		if (j == kony.sync.scopes.scopecount)
			continue;
		j++;
		if (kony.sync.scopes[i]["ScopeName"] == scopename)
			currentScope = kony.sync.scopes[i];
	}

	if (kony.sync.isUploadErrorPolicyCOE(currentScope)) {
		callback();
		return;
	}

	var dbconnection = kony.sync.getConnectionOnly(dbname, dbname);

	kony.sync.startTransaction(dbconnection, clear_transaction, clear_success, clear_fail, "CLEAR SYNC ORDER");

	function clear_transaction(tx) {

		for (var i = 0;
			((currentScope.ScopeTables) != null) && i <= currentScope.ScopeTables.length; i++) {
			var syncTable = currentScope.ScopeTables[i];
			if (syncTable == null)
				continue;
			var tbname = syncTable.Name;
			if (currentScope[kony.sync.syncStrategy] !== kony.sync.syncStrategy_OTA){
				if(kony.sync.clearMainTableForRemoveAfterUpload(tx, scopename, tbname, null)===false){
					isError = true;
					return;
				}
			}

			//clearing history table
			if(kony.sync.clearHistoryTable(tx, tbname, null)===false){
				isError = true;
				return;
			}

			//clearing original table
			if(kony.sync.clearOriginalTable(tx, tbname, null)===false){
				isError = true;
				return;
			}

			//couting deferred uploads
			sql = "select * from " + tbname + kony.sync.historyTableName;
			var resultSet = kony.sync.executeSql(tx, sql, null);
			if(resultSet===false){
				isError = true;
				return;
			}
			var num_records = resultSet.rows.length;
			recordcount = recordcount + num_records;
		}
		if (recordcount == 0) {
			kony.sync.updateSyncOrder(tx, scopename);
		}
	}

	function clear_success() {
		callback();
	}
	function clear_fail() {
		kony.sync.syncUploadFailed(isError);
	}
};

kony.sync.setSyncOrder = function (scopename, syncorder, tx, errorCallback) {
	var settable = [];
	settable[kony.decrement(kony.sync.metaTableSyncOrderCloumn)] = syncorder;
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_update(query, kony.sync.metaTableName);

	kony.sync.qb_set(query, settable);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "update ".. kony.sync.metaTableName.." set "..kony.sync.metaTableSyncOrderCloumn.."="..syncorder .." where "..kony.sync.metaTableScopeColumn.." = '".. scopename .."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];

	kony.sync.syncPrint("setting sync order" + sql);
	return kony.sync.executeSql(tx, sql, params, errorCallback);
};
//function getLastGeneratedID (scopename, tx)
kony.sync.getLastGeneratedID = function (scopename, tx, errorCallback) {
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_select(query, [kony.sync.metaTableLastGeneratedId]);

	kony.sync.qb_from(query, kony.sync.metaTableName);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "select "..kony.sync.metaTableLastGeneratedId.." from "..kony.sync.metaTableName.." where "..kony.sync.metaTableScopeColumn.." = '"..scopename.."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];
	kony.sync.syncPrint("getting lastgeneratedid" + sql);
	var resultset = kony.sync.executeSql(tx, sql, params, errorCallback);
	if (resultset === false) {
		return false;
	}
	kony.sync.syncPrint("resutl" + resultset);
	var rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
	kony.sync.syncPrint("rowItem" + rowItem);
	if ((rowItem[kony.decrement(kony.sync.metaTableLastGeneratedId)] != null)) {
		return rowItem[kony.decrement(kony.sync.metaTableLastGeneratedId)];
	} else {
		//It should never come here
		kony.sync.syncPrint("[Error]:Last Generated ID is null");
		return false;
	}
};

kony.sync.setLastGeneratedID = function (scopename, lastgeneratedid, tx, errorCallback) {
	var settable = [];
	settable[kony.decrement(kony.sync.metaTableLastGeneratedId)] = lastgeneratedid;
	var query = kony.sync.qb_createQuery();

	kony.sync.qb_update(query, kony.sync.metaTableName);

	kony.sync.qb_set(query, settable);

	kony.sync.qb_where(query, [{
				key : kony.sync.metaTableScopeColumn,
				value : scopename
			}
		]);
	//local sql = "update ".. kony.sync.metaTableName.." set "..kony.sync.metaTableLastGeneratedId.."="..lastgeneratedid .." where "..kony.sync.metaTableScopeColumn.." = '".. scopename .."'";
	var query_compile = kony.sync.qb_compile(query);
	var sql = query_compile[0];
	var params = query_compile[1];

	kony.sync.syncPrint("setting sync order" + sql);
	return kony.sync.executeSql(tx, sql, params, errorCallback);
};
//  **************** End KonySyncMetadata.js*******************


//  **************** Start konySyncQueryBuilder.js*******************
//-------------------------Sample Query Table for reference----------------------------
//sqlquery={
//	["schemaname"] = "",
//	["tablename"]= "",
//	["operationtype"] = "" { Insert, Select, Update, Delete, Custom },
//	["orderbyclause"]="",
//	["topclause"]="",
//  ["isPurge"]=true/false This condition will make insert statement to insert ignore.
//	["purgeValues"] = "";
//	multiple conditions
//	["conditions"]={
//		{
//			["key"]=""
//			["value"]=""
//			["optype"]="" { EQ, NOT_EQ, GT, GT_EQ, LT, LT_EQ, LIKE, JOIN }	 
//			["comptype"]="" { AND, OR }
//			["binary"]="" {true,false}
//		},
//		{
//			["key"]=""
//			["value"]=""
//			["optype"]=""
//			["value"]=""
//		}
//	},
//	["fields"]={
//		"c1","c2","c3"		
//	},
//	["colvals"]={
//		{
//			["key"]="cname"
//			["value"]="vname"
//		},
//		{
//			["key"]="cname"
//			["value"]="vname"
//		}
//	}
//}
//function qb_createQuery()
kony.sync.qb_createQuery = function() {
    return {
        topclause: "",
        orderbyclause: "",
        colvals: [],
        conditions: [],
        paramindex: 0
    };
};

kony.sync.qb_where = function(query, conditions) {
    for (var i = 1;
    ((conditions) != null) && i <= conditions.length; i++) {
        var cond = conditions[kony.decrement(i)];
        var condition = [];
        if ((cond.optype == null)) {
            cond.optype = "EQ";
        }
        if ((cond.comptype == null)) {
            cond.comptype = "AND";
        }
        condition.key = cond.key;
        condition.optype = cond.optype;
        condition.value = cond.value;
        condition.comptype = cond.comptype;
		condition.openbrace = cond.openbrace;
		condition.closebrace = cond.closebrace;
        kony.table.insert(query.conditions, condition);
    }
};
//function qb_insert(query, tablename)
kony.sync.qb_insert = function(query, tablename) {
    query.operationtype = "insert";
    query.tablename = tablename;
};
kony.sync.qb_purgeInsert = function(query, tablename, values){
    query.operationtype = "insert";
    query.tablename = tablename;
	query.isPurge = true;
	if(kony.sync.queryStore[tablename+"purgeInsert"] == null){
		kony.sync.qb_set(query, values);
	}else{
		query.purgeValues = values;
	}
}
//function qb_delete(query, tablename)
kony.sync.qb_delete = function(query, tablename) {
    query.operationtype = "delete";
    query.tablename = tablename;
};
//function qb_update(query, tablename)
kony.sync.qb_update = function(query, tablename) {
    query.operationtype = "update";
    query.tablename = tablename;
};
//function qb_select(query, fields)
kony.sync.qb_select = function(query, fields) {
    query.operationtype = "select";
    query.fields = fields;
};
//function qb_from(query, tablename)
kony.sync.qb_from = function(query, tablename) {
    query.tablename = tablename;
};
//function qb_set(query, tabcolval)
kony.sync.qb_set = function(query, tabcolval) {
    for (var key in tabcolval) {
        var value = tabcolval[kony.decrement(key)];
        if ((value != null)) {
            var colval = [];
            colval.key = key;
            colval.value = value;
            kony.table.insert(query.colvals, colval);
        }
    }
};
//function qb_top(query, topno)
kony.sync.qb_top = function(query, topno) {
    query.topclause = " Top " + topno + " ";
};
kony.sync.qb_orderBy = function(query,orderByMap) {
	var orderByClause = "";
	if(orderByMap!=null){
		orderByClause = " order by "
		var j=0;
		for(i in orderByMap){
			if(j==0) {
				orderByClause = orderByClause+orderByMap[i].key;
				j++;
			}
			else {
				orderByClause = orderByClause+","+orderByMap[i].key;
			}
			if(orderByMap[i].sortType=="desc")
				orderByClause = orderByClause + " desc"
		}
	}
	query.orderbyclause = orderByClause;
};

//function qb_orderby(query, colname, isasec)
kony.sync.qb_orderby1 = function(query, colname, isasec) {
    if ((isasec)) {
        query.orderbyclause = " order by " + colname;
    } else {
        query.orderbyclause = " order by " + colname + " desc ";
    }
};
//function qb_createParam(pkey, query, pval, params)
kony.sync.qb_createParam = function(pkey, query, pval, params) {
    if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLLite)) {
        kony.table.insert(params, pval);
        return "?";
    } else if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLCE)) {
        query.paramindex = query.paramindex + 1;
        var param = "@" + pkey + query.paramindex;
        params[kony.decrement(param)] = pval;
        return param;
    }
};
//function qb_getupdatedfields(query)	
kony.sync.qb_getupdatedfields = function(query) {
    var updateStr = "";
    var numCols = query.colvals.length - 1;
    for (var i in query.colvals) {
        var v = query.colvals[kony.decrement(i)];
        if ((i == 1)) {
            updateStr = " set ";
        }
        if ((v.value == "nil")) {
            updateStr = updateStr + " " + v.key + "=" + "null";
        } else {
            updateStr = updateStr + " " + v.key + "=" + "'" + v.value + "'";
        }
        if (i != numCols) {
            updateStr = updateStr + ",";
        }
    }
    return updateStr;
};
//function qb_getparamupdatedfields(query)	
kony.sync.qb_getparamupdatedfields = function(query) {
    var updateStr = "";
    var params = [];
    var numCols = query.colvals.length - 1;
    for (var i in query.colvals) {
        var v = query.colvals[kony.decrement(i)];
        if ((i == 0)) {
            updateStr = " set ";
        }
        if ((v.value == "nil")) {
            updateStr = updateStr + " " + v.key + "=" + "null";
        } else {
            var param = kony.sync.qb_createParam(v.key, query, v.value, params) 
            ;
            updateStr = updateStr + " " + v.key + "=" + param;
        }
        if (i != numCols) {
            updateStr = updateStr + ",";
        }
    }
    return [updateStr, params];
};
//function qb_getfieldstring(query)	
kony.sync.qb_getfieldstring = function(query) {
    var retstr = "";
    if ((query.fields != null)) {
        for (var i in query.fields) {
            var field = query.fields[kony.decrement(i)];
            retstr = retstr + field;
            if (((query.fields.length - 1) != i)) {                
                retstr = retstr + ",";
            }
        }
        return retstr;
    } else {
        return "*";
    }
};
//function qb_getoperatorString(optype, isnull)		
kony.sync.qb_getoperatorString = function(optype, isnull) {
    if ((optype == "EQ")) {
        if ((isnull)) {
            return " is ";
        } else {
            return " = ";
        }
    } else if ((optype == "NOT_EQ")) {
        if ((isnull)) {
            return " is not ";
        } else {
            if ((kony.sync.getBackEndDBType()== kony.sync.dbTypeSQLCE)) {
                return " != ";
            } else if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLLite)) {
                return " <> ";
            }
        }
    } else if ((optype == "GT")) {
        return " > ";
    } else if ((optype == "GT_EQ")) {
        return " >= ";
    } else if ((optype == "LT")) {
        return " < ";
    } else if ((optype == "LT_EQ")) {
        return " <= ";
    } else if ((optype == "LIKE")) {
        return " LIKE ";
    }  else if ((optype == "NOT LIKE")) {
        return " NOT LIKE ";
    } else {
        return "";
    }
    return "MARS";
};
//function qb_getcompstring(comptype)	
kony.sync.qb_getcompstring = function(comptype) {
    if ((comptype == "AND")) {
        return " AND ";
    } else if ((comptype == "OR")) {
        return " OR ";
    } else {
        return "";
    }
};
//function qb_getwhereclause(query)	
kony.sync.qb_getwhereclause = function(query) {
    var retstr = "";
    if ((query.conditions != null)) {
        for (var i in query.conditions) {
            var condition = query.conditions[kony.decrement(i)];
            if ((i == 0)) {
                retstr = " WHERE ";
            }
            var conditionString = "";
            if ((condition.value == "nil")) {
               conditionString = condition.key + kony.sync.qb_getoperatorString(condition.optype, true)  
                + "null";
            } else {
               conditionString = condition.key + kony.sync.qb_getoperatorString(condition.optype, false)  
                + "'" + condition.value + "' ";
            }
			if(condition.openbrace === true){
				conditionString = " ( " + conditionString;
			}
			if(condition.closebrace === true){
				conditionString = conditionString + ")";
			}
            retstr = retstr + conditionString;
            if ((i != (query.conditions.length - 1))) {
               retstr = retstr + kony.sync.qb_getcompstring(condition.comptype)  
                ;
            }
        }
    }
    return retstr;
};
//function qb_getparamwhereclause(query)
kony.sync.qb_getparamwhereclause = function(query) {
    var retstr = "";
    var params = [];
    if ((query.conditions != null)) {
        for (var i in query.conditions) {
            var condition = query.conditions[kony.decrement(i)];
            if ((i == 0)) {
                retstr = " WHERE ";
            }
            var conditionString = "";
            if ((condition.value == "nil")) {
               conditionString = condition.key + kony.sync.qb_getoperatorString(condition.optype, true)  
                + "null"; // or " .. condition.key .. kony.sync.qb_getoperatorString(condition.optype, false) .. "'nil'";
            } else {
               var param = kony.sync.qb_createParam(condition.key, query, condition.value, params)  
                ;
               conditionString = condition.key + kony.sync.qb_getoperatorString(condition.optype, false)  
                + param;
            }
			if(condition.openbrace === true){
				conditionString = " ( " + conditionString;
			}
			if(condition.closebrace === true){
				conditionString = conditionString + ")";
			}
            retstr = retstr + conditionString;
            if ((i != (query.conditions.length - 1))) {
               retstr = retstr + kony.sync.qb_getcompstring(condition.comptype)  
                ;
            }
        }
    }
    return [retstr, params];
};
//function qb_getinsertcolums(query)	
kony.sync.qb_getinsertcolums = function(query) {
    var retstr = "(";
    var numCols = query.colvals.length;
    var count = 0;
    if ((numCols == 0)) {
        return "";
    }
    for (var i = 1;
    ((query.colvals) != null) && i <= query.colvals.length; i++) {
        var colval = query.colvals[kony.decrement(i)];
        count = count + 1;
        retstr = retstr + colval.key;
        if ((count != numCols)) {
            retstr = retstr + ",";
        }
    }
    retstr = retstr + ")";
    return retstr;
};
//function qb_getinsertvalues(query)
kony.sync.qb_getinsertvalues = function(query) {
    var retstr = "(";
    var numCols = query.colvals.length;
    if ((numCols == 0)) {
        return "";
    }
    for (var i = 1;
    ((query.colvals) != null) && i <= query.colvals.length; i++) {
        var colval = query.colvals[kony.decrement(i)];
        var value = "";
        if ((colval == "nil")) {
            value = "NULL";
        } else {
            value = "'" + colval.value + "'";
        }
        retstr = retstr + value;
        if ((i != numCols)) {
            retstr = retstr + ",";
        }
    }
    retstr = retstr + ")";
    return retstr;
};
//function qb_getparaminsertvalues(query)	
kony.sync.qb_getparaminsertvalues = function(query) {
    var retstr = "(";
    var params = [];
    var numCols = query.colvals.length;
    if ((numCols == 0)) {
        return "";
    }
    for (var i = 1;
    ((query.colvals) != null) && i <= query.colvals.length; i++) {
        var colval = query.colvals[kony.decrement(i)];
        var value = "";
        if ((colval == "nil")) {
            value = "NULL";
        } else {
           var param = kony.sync.qb_createParam(colval.key, query, colval.value, params)  
            ;
            value = param;
        }
        retstr = retstr + value;
        if ((i != numCols)) {
            retstr = retstr + ",";
        }
    }
    retstr = retstr + ")";
    return [retstr, params];
};
//function qb_gettablename(query)
kony.sync.qb_gettablename = function(query) {
    return query.tablename;
};

//lmit and offset  for select
kony.sync.qb_limitOffset=function(query, limit, offset){
	if(null!=limit){
		if(null==offset){
			offset = 0;
		}
		if ((kony.sync.getBackEndDBType() == kony.sync.dbTypeSQLLite)) {
			query.limit = limit;
			query.offset = offset;
		}
	}
}
kony.sync.qb_compile = function(query) {
    if ((kony.sync.isParameter)) {
        var ret = "";
		 if ((query.operationtype == "insert")) {           
            var insertstring =  "insert into ";
            if(query.isPurge != null && query.isPurge){
				if(kony.sync.queryStore[query.tablename+"purgeInsert"] != null){
					return [kony.sync.queryStore[query.tablename+"purgeInsert"], query.purgeValues];
				}
            //#ifdef android
				insertstring = "insert into ";
			//#else
				insertstring = "insert or ignore into ";
			//#endif
            }
			 var itable = kony.sync.qb_getparaminsertvalues(query);
            var iv = itable[kony.decrement(1)];
            var params = itable[kony.decrement(2)];
            var sql = insertstring + kony.sync.qb_gettablename(query)
            + kony.sync.qb_getinsertcolums(query) + " values " + iv;
			if(query.isPurge != null && query.isPurge){
            	kony.sync.queryStore[query.tablename+"purgeInsert"] = sql;
            }
            return [sql, params];
        }else if ((query.operationtype == "select")) {
            var wctable = kony.sync.qb_getparamwhereclause(query);
            var wc = wctable[kony.decrement(1)];
            var params = wctable[kony.decrement(2)];
            var sql = "select " + query.topclause + kony.sync.qb_getfieldstring(query) + " from " + kony.sync.qb_gettablename(query) + wc + query.orderbyclause;
			if(null != query.limit){
				sql += " limit " + query.limit + " offset " + query.offset;
			}	
			//kony.sync.syncPrint("select sql : " + sql);
            //kony.sync.syncPrint("select params : " + params);
            return [sql, params];
        } else if ((query.operationtype == "update")) {
            var wctable = kony.sync.qb_getparamwhereclause(query);
            var wc = wctable[kony.decrement(1)];
            var wparams = wctable[kony.decrement(2)];
           var uftable = kony.sync.qb_getparamupdatedfields(query)  
            ;
            var uf = uftable[kony.decrement(1)];
            var uparams = uftable[kony.decrement(2)];
           var sql = "Update " + kony.sync.qb_gettablename(query)  
            + " " + uf + " " + wc;
            for (var i = 0; i < wparams.length; i++) {
					uparams.push(wparams[i]);
			}
            var params = uparams;
            //kony.sync.syncPrint("update sql : " + sql);
            
            //kony.sync.syncPrint("update params : " + params);
            return [sql, params];
        } else if ((query.operationtype == "delete")) {
           var wctable = kony.sync.qb_getparamwhereclause(query)  
            ;
            var wc = wctable[kony.decrement(1)];
            var params = wctable[kony.decrement(2)];
           var sql = "delete from " + kony.sync.qb_gettablename(query)  
            + " " + wc;
            
            //kony.sync.syncPrint("select sql : " + sql);
            //kony.sync.syncPrint("delete params : " + params);
            return [sql, params];
        }
    } else {
        var ret = "";
        if ((query.operationtype == "select")) {
           var sql = "select " + query.topclause + kony.sync.qb_getfieldstring(query)  
           + " from " + kony.sync.qb_gettablename(query)  
           + kony.sync.qb_getwhereclause(query)  
            + query.orderbyclause;
            return sql;
        } else if ((query.operationtype == "update")) {
           return "Update " + kony.sync.qb_gettablename(query)  
           + " " + kony.sync.qb_getupdatedfields(query)  
           + " " + kony.sync.qb_getwhereclause(query)  
            ;
        } else if ((query.operationtype == "insert")) {
           return "insert into " + kony.sync.qb_gettablename(query)  
           + kony.sync.qb_getinsertcolums(query)  
           + " values " + kony.sync.qb_getinsertvalues(query)  
            ;
        } else if ((query.operationtype == "delete")) {
           return "delete from " + kony.sync.qb_gettablename(query)  
           + " " + kony.sync.qb_getwhereclause(query)  
            ;
        }
    }
};
//  **************** End konySyncQueryBuilder.js*******************


//  **************** Start konySyncQueryProvider.js*******************
kony.sync.single_execute_sql = function (dsname, sqlstatement, params, result_successcallback, result_errorcallback) {
	var single_execute_sql_result = null;
	var dbname = dsname;
	var isError = false;
	function single_execute_sql_transaction(tx) {
		var resultset = kony.sync.executeSql(tx, sqlstatement, params, result_errorcallback);
		if ((resultset != false)) {
			if ((resultset.rows != null && resultset.rows.length > 0)) {
				var numResults = resultset.rows.length;
				var rowItem = null;
				rowItem = kony.db.sqlResultsetRowItem(tx, resultset, 0);
				single_execute_sql_result = rowItem;
			}
		} else {
			isError = true;
		}
	}
	function single_execute_sql_transactionSucessCallback(tx) {
		if (!isError) {
			kony.sync.verifyAndCallClosure(result_successcallback, single_execute_sql_result);
		}
	}
	
	function single_execute_sql_transactionErrorCallback(tx) {
		if (!isError) {
			kony.sync.verifyAndCallClosure(result_errorcallback, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
		}
		else{
			kony.sync.verifyAndCallClosure(result_errorcallback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}	

	var dbconnection = kony.sync.getConnectionOnly(dbname, dbname);
	kony.sync.startTransaction(dbconnection, single_execute_sql_transaction, single_execute_sql_transactionSucessCallback, single_execute_sql_transactionErrorCallback, "Single Execute")
};
//function single_select_execute (dsname, sql, params, success_callback, error_callback)
kony.sync.single_select_execute = function (dsname, sql, params, success_callback, error_callback) {
	var callback_result = [];
	var dbname = dsname;
	var isError = false;

	function single_transaction_success_callback() {
		if (!isError) {
			kony.sync.verifyAndCallClosure(success_callback, callback_result);
		}
	}
	
	function single_transaction_error_callback() {
		if (!isError) {
			kony.sync.showTransactionError(error_callback);
		}else{
			kony.sync.verifyAndCallClosure(error_callback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}

	function single_transaction_callback(tx) {
		var resultSet = kony.sync.executeSql(tx, sql, params, error_callback);
		if (resultSet != false) {
			if ((kony.sync.is_SQL_select(sql))) {
				var num_records = resultSet.rows.length;
				kony.sync.syncPrint("Single Select no of records" + num_records);
				for (var i = 0; i <= num_records - 1; i++) {
					var record = kony.db.sqlResultsetRowItem(tx, resultSet, i);
					kony.table.insert(callback_result, record);
				}
			}
		} else {
			isError = true;
		}
	}

	var connection = kony.sync.getConnectionOnly(dbname, dbname, error_callback);
	if(connection !== null){
		kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback);
	}
};
//function single_insert_execute (dsname, tbname, values, success_callback, error_callback)
kony.sync.single_insert_execute = function (dsname, tbname, values, success_callback, error_callback, markForUpload) {
	var callback_result = [];
	var dbname = dsname;
	var isSuccess = true;

	function single_transaction_success_callback() {
		if (isSuccess) {
			kony.sync.verifyAndCallClosure(success_callback, callback_result);
		}
	}

	function single_transaction_failure_callback() {
		if (isSuccess) {
			kony.sync.showTransactionError(error_callback);
		}else{
			kony.sync.verifyAndCallClosure(error_callback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}

	function single_transaction_callback(tx) {
		//CallBack_result contains AutoGenerated PK in hash ({id = value})
		callback_result = kony.sync.insert(tx, tbname, values, error_callback, markForUpload);
		if (callback_result === false) {
			isSuccess = false;
		}
	}


	var connection = kony.sync.getConnectionOnly(dbname, dbname, error_callback);
	if(connection !== null){
		kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_failure_callback);
	}
};

kony.sync.single_update_execute = function (dsname, tbname, values, wc, success_callback, error_callback, isBatch, markForUpload, primaryKey) {
	var callback_result = {};
	var dbname = dsname;
	var isError = false;

	function single_transaction_success_callback() {
		kony.sync.verifyAndCallClosure(success_callback, callback_result);
	}
	
	function single_transaction_error_callback() {
		if (!isError) {
			kony.sync.showTransactionError(error_callback, "Single Update Execute");
		}else{
			kony.sync.verifyAndCallClosure(error_callback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}

	function single_transaction_callback(tx) {
		if ((null != isBatch && isBatch == true)) {
			callback_result = kony.sync.updateBatch(tx, tbname, values, wc, markForUpload, error_callback, primaryKey);
		} else {
			callback_result = kony.sync.update(tx, tbname, values, wc, markForUpload, error_callback);
		}
		
		if(callback_result===false){
			isError = true;
		}
	}

	var connection = kony.sync.getConnectionOnly(dbname, dbname, error_callback, "Single Update Execute");
	if(connection !== null){
		kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback, "Single Update Execute");
	}	
};
//function single_delete_execute (dsname, tbname, wc, success_callback, error_callback, isBatch)
kony.sync.single_delete_execute = function (dsname, tbname, wc, success_callback, error_callback, isBatch, isLocal, markForUpload) {
	var callback_result = [];
	var dbname = dsname;
	var isError = false;

	function single_transaction_success_callback() {
		kony.sync.verifyAndCallClosure(success_callback, callback_result);
	}

	function single_transaction_callback(tx) {
		if ((null != isBatch && isBatch == true)) {
			callback_result = kony.sync.deleteBatch(tx, tbname, wc, isLocal, markForUpload, error_callback);
		} else {
			callback_result = kony.sync.remove(tx, tbname, wc, isLocal, markForUpload, error_callback);
		}
		if(callback_result===false){
			isError = true;
		}
	}

	function single_transaction_error_callback() {
		if (!isError) {
			kony.sync.showTransactionError(error_callback, "Single Update Execute");
		}else{
			kony.sync.verifyAndCallClosure(error_callback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}

	var connection = kony.sync.getConnectionOnly(dbname, dbname, error_callback, "Single Delete Execute");
	if(connection !== null){
		kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, single_transaction_error_callback, "Single Delete Execute");
	}
};

kony.sync.massInsert = function (dsname, tbname, valuesArray, success_callback, error_callback, markForUpload) {
	var callbackResult = [];
	var dbname = dsname;

	function single_transaction_success_callback() {
		kony.sync.verifyAndCallClosure(success_callback, callbackResult);
	}

	function single_transaction_callback(tx) {
		//CallBack_result contains AutoGenerated PK in hash ({id = value})
		for (var i in valuesArray) {
			callbackResult.push(kony.sync.insert(tx, tbname, valuesArray[i], null, markForUpload));
		}
	}

	var connection = kony.sync.getConnectionOnly(dbname, dbname);
	kony.sync.startTransaction(connection, single_transaction_callback, single_transaction_success_callback, error_callback);
};
//  **************** End konySyncQueryProvider.js*******************


//  **************** Start KonySyncRollBack.js*******************
//function konySyncRollBackPendingChanges(tbname, dbname, wcs, successcallback, errorcallback, isGlobal)		
kony.sync.konySyncRollBackPendingChanges = function(tbname, dbname, wcs, successcallback, errorcallback, isGlobal) {
	var isSuccess = true;

    function single_execute_sql_transaction(tx) {
        if (isGlobal != null && isGlobal) {            
            isSuccess = kony.sync.konySyncRollBackGlobal(tx, errorcallback);
        } else if (wcs != null) {            
            isSuccess = kony.sync.konySyncRollBackRow(tx, tbname, wcs, errorcallback);
        } else {            
            isSuccess = kony.sync.konySyncRollBackTable(tx, tbname, errorcallback);
        }
    }

	function single_transactionErrorCallback(){
		if(isSuccess){
			kony.sync.showTransactionError(errorcallback);
		}else{
			kony.sync.verifyAndCallClosure(errorcallback, kony.sync.errorObject);
			kony.sync.errorObject = null;
		}
	}
    function single_execute_sql_transactionSucessCallback(tx) {
		if(!isSuccess){
			return;
		}
		
        if (isGlobal != null && isGlobal) {
            if (kony.sync.rollbackCurrentScope.Index == kony.sync.scopes.scopecount) {
               kony.sync.verifyAndCallClosure(successcallback,null);
            } else {
                kony.sync.rollbackCurrentScope = kony.sync.scopes[kony.decrement(kony.sync.rollbackCurrentScope.Index + 1)];
                
                kony.sync.konySyncRollBackPendingChanges(null, null, null, successcallback, errorcallback, true);
            }
        } else {
				kony.sync.verifyAndCallClosure(successcallback,null);
            }
        }
	

    try{
		if (isGlobal != null && isGlobal) {
			if ((kony.sync.rollbackCurrentScope == null)) {
				kony.sync.rollbackCurrentScope = kony.sync.scopes[0];				
				kony.sync.syncPrint("RollBacking Global with Scope name :" + kony.sync.rollbackCurrentScope[kony.sync.scopeName] + " and with DBName : " + kony.sync.rollbackCurrentScope[kony.decrement(kony.sync.scopeDataSource)]);
			}
			dbname = kony.sync.rollbackCurrentScope[kony.decrement(kony.sync.scopeDataSource)];
		}
		
		var dbconnection = kony.sync.getConnectionOnly(dbname, dbname, errorcallback);
		if(dbconnection != null){
			kony.sync.startTransaction(dbconnection, single_execute_sql_transaction, single_execute_sql_transactionSucessCallback, single_transactionErrorCallback, "Single Execute");
		}
	}
	catch(e) {
		kony.sync.verifyAndCallClosure(errorcallback,kony.sync.getErrorTable(kony.sync.errorUnknown, kony.sync.getErrorMessage(kony.sync.errorUnknown,"Rollback",e),null));
	}
};

kony.sync.konySyncRollBackTable = function(tx, tbname, errorcallback) {
    var query = kony.sync.qb_createQuery();
    kony.sync.qb_select(query, null);
    kony.sync.qb_from(query, tbname + kony.sync.originalTableName);
    var query_compile = kony.sync.qb_compile(query);
    var sql = query_compile[0];
    var params = query_compile[1];
    var resultset = kony.sync.executeSql(tx, sql, params, errorcallback);
	if(resultset == false){
		return false;
	}
    var num_records = resultset.rows.length;
    kony.sync.syncPrint("Number of records to rollback in " + tbname + "=" + num_records);
    for (var i = 0; i <= num_records - 1; i++) {
        var record = kony.db.sqlResultsetRowItem(tx, resultset, i);
		var tableinfo = kony.sync.getTableInfo(tbname);
        var wcs = [];
        for (var j = 1;
        ((tableinfo[kony.decrement("Pk_Columns")]) != null) && j <= tableinfo[kony.decrement("Pk_Columns")].length; j++) {
            var pk = tableinfo[kony.decrement("Pk_Columns")][kony.decrement(j)];
            var wc = [];
            wc.key = pk;
            wc.value = record[kony.decrement(pk)];
            kony.table.insert(wcs, wc);
        }
        kony.sync.syncPrint("Rollbacking Record with Primary Key :" + wcs);
        if(!kony.sync.konysyncRollBackOriginal(tx, tbname, record, wcs, errorcallback)){
			return false;
		}
    }
	return true;
};

kony.sync.konySyncRollBackGlobal = function(tx, errorcallback) {
    var scope = kony.sync.rollbackCurrentScope;
    for (var j = 1;
    ((scope.ScopeTables) != null) && j <= scope.ScopeTables.length; j++) {
        var syncTable = scope.ScopeTables[kony.decrement(j)];
        kony.sync.syncPrint("Rollbacking Table :" + syncTable.Name);
        if(!kony.sync.konySyncRollBackTable(tx, syncTable.Name)){
			return false;
		}
    }
	return true;
};
//function konySyncRollBackRow(tx, tbname, wcs)
kony.sync.konySyncRollBackRow = function(tx, tbname, wcs, errorcallback) {
    var record = kony.sync.getOriginalRow(tx, tbname + kony.sync.originalTableName, wcs, errorcallback);
    if ((null != record)) {
         kony.sync.konysyncRollBackOriginal(tx, tbname, record, wcs);
    }
};

kony.sync.konysyncRollBackOriginal = function(tx, tbname, values, wcs, errorcallback) {
    var originalchangetype = values[kony.sync.originalTableChangeTypeColumn] + "";
    if (kony.sync.isrowexists(tx, tbname, wcs)) {
        if ((originalchangetype == kony.sync.insertColStatus)||(originalchangetype == kony.sync.insertColStatusDI)) {
            //Delete inserted Row.
            if(!kony.sync.removeEx(tx, tbname, wcs, null, errorcallback)){
				return false;
			}
        } else if ((originalchangetype == kony.sync.updateColStatus)||(originalchangetype == kony.sync.updateColStatusDU)) {
            //Revert to original values.
            values[kony.sync.mainTableChangeTypeColumn] = "-1";
            values[kony.sync.mainTableSyncVersionColumn] = values[kony.sync.originalTableSyncVersionColumn];
            values[kony.sync.originalTableChangeTypeColumn] = null;
            values[kony.sync.originalTableSyncVersionColumn] = null;
            if(!kony.sync.updateEx(tx, tbname, values, wcs, errorcallback)){
				return false;
			}
        } else if ((originalchangetype == kony.sync.deleteColStatus)||(originalchangetype == "92")) {
            //delete the row which has been inserted/updated with old values.
            if(!kony.sync.removeEx(tx, tbname, wcs, null, errorcallback)){
				return false;
			}
            //Insert the row which has been deleted with old values.
            values[kony.sync.mainTableChangeTypeColumn] = "-1";
            values[kony.sync.mainTableSyncVersionColumn] = values[kony.sync.originalTableSyncVersionColumn];
            values[kony.sync.mainTableHashSumColumn] = values[kony.sync.originalTableHashSumColumn];
			values[kony.sync.originalTableChangeTypeColumn] = null;
            values[kony.sync.originalTableSyncVersionColumn] = null;
            if(!kony.sync.insertEx(tx, tbname, values, wcs, errorcallback)){
				return false;
			}
        }
    } else {
        if ((originalchangetype == kony.sync.insertColStatus)) {
            //Need not handle this case. Because inserted record has been deleted. So, it is already rollbacked.
        } else if ((originalchangetype == kony.sync.updateColStatus)||(originalchangetype == kony.sync.updateColStatusDU)) {
            //Insert the row which has been updated and deleted with old values.
            values[kony.sync.mainTableChangeTypeColumn] = "-1";
            values[kony.sync.mainTableSyncVersionColumn] = values[kony.sync.originalTableSyncVersionColumn];
            values[kony.sync.originalTableChangeTypeColumn] = null;
            values[kony.sync.originalTableSyncVersionColumn] = null;
            //kony.sync.insertEx(tx, tbname, values);
			if(!kony.sync.insertEx(tx, tbname, values, null, errorcallback)){
				return false;
			}
        } else if ((originalchangetype == kony.sync.deleteColStatus)||(originalchangetype == kony.sync.deleteColStatusDD)) {
            //Insert the row which has been deleted with old values.
            values[kony.sync.mainTableChangeTypeColumn] = "-1";
            values[kony.sync.mainTableSyncVersionColumn] = values[kony.sync.originalTableSyncVersionColumn];
            values[kony.sync.originalTableChangeTypeColumn] = null;
            values[kony.sync.originalTableSyncVersionColumn] = null;
           // kony.sync.insertEx(tx, tbname, values);
		   	if(!kony.sync.insertEx(tx, tbname, values, null, errorcallback)){
				return false;
			}
        }
    }
    if(!kony.sync.konySyncRollBackDeleteRow(tx, tbname, wcs,errorcallback)){
		return false;
	}
	return true;
};
//function konySyncRollBackDeleteRow(tx, tbname, wcs)	
kony.sync.konySyncRollBackDeleteRow = function(tx, tbname, wcs,errorcallback) {
    kony.sync.syncPrint("Deleting States in Original Tables with Primary Key :" + wcs);
    if(kony.sync.removeEx(tx, tbname + kony.sync.originalTableName, wcs, errorcallback)===false){
		return false;
	}
    if(kony.sync.removeEx(tx, tbname + kony.sync.historyTableName, wcs, errorcallback)===false){
		return false;
	}
	return true;
};
//  **************** End KonySyncRollBack.js*******************


//  **************** Start konySyncServiceProvider.js*******************
kony.sync.konyDownloadChanges = function (serverblob, scope, downloadNetworkCallback, isInitialized) {

	function downloadNetworkCallbackStatus(status, result, info) {
		if (status == 400) {
			downloadNetworkCallback(result);
		}
	}
	if (serverblob == null){
		serverblob = "";
	}
	var params = {};
	if (kony.sync.globalIsDownloadStarted) {
		//serverChanges = net.invokerest (scope.Uri..url,"GET","");
		var jsonContext = null;
		if ((current_sync_scopefilter != null)) {
			var scopejsonfilter = {
				"d" : {
					Filters : current_sync_scopefilter
				}
			}
			jsonContext = scopejsonfilter;
			//jsonContext = JSON.stringify(scopejsonfilter)
				//jsonContext = kony.sync.createJson("d", {
				//    Filters: current_sync_scopefilter
				//})
		}
		var jsonClient = null;
		if (isInitialized != null && isInitialized == false) {
		/*	jsonClient = JSON.stringify({
					"InitialSync" : "true"
				});
				*/
			jsonClient = {};	
			jsonClient["InitialSync"] = "true";
		}
		var httpheaders = {};
		httpheaders["Content-Type"] = "application/json";
		
		params["context"] = jsonContext;
		if (jsonClient != null) {
			params["clientcontext"] = jsonClient;
		}
		params["userid"] = kony.sync.currentSyncConfigParams["userid"];
		params["password"] = kony.sync.genHash(kony.sync.currentSyncConfigParams[kony.sync.passwordHashingAlgo], kony.sync.currentSyncConfigParams["password"]);
		params["httpheaders"] = httpheaders;
		params["enablebatching"] = "true";
		params["batchsize"] = kony.sync.getBatchSize();
		params["tickcount"] = serverblob;
		params["scopename"] = kony.sync.currentScope[kony.sync.scopeName];
		params["strategy"] = kony.sync.currentScope[kony.sync.syncStrategy];
		params["instanceid"] = kony.sync.getInstanceID();
		params["clientid"] = kony.os.deviceInfo().deviceid;
		params["appid"] = kony.sync.getAppId();
		params["appVersion"] = kony.sync.currentSyncConfigParams["appVersion"];

		if (kony.sync.currentSyncConfigParams[kony.sync.sessionTasks] != null && kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][kony.sync.currentScope[kony.sync.scopeName]] != null) {
			params[kony.sync.sessionTaskUploadErrorPolicy] = kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][kony.sync.currentScope[kony.sync.scopeName]][kony.sync.sessionTaskUploadErrorPolicy]
		}
	
		var paramsToSend = null;
		var currentSyncReturnParamsTemp = kony.sync.currentSyncReturnParams;
		currentSyncReturnParamsTemp["downloadRequest"] = params;
		paramsToSend = kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onDownloadStart], currentSyncReturnParamsTemp);
		kony.sync.globalIsDownloadStarted = false;
		//currentSyncReturnParamsTemp["downloadRequest"] = null;
		if (paramsToSend != null) {
			params = paramsToSend
		}
		currentSyncReturnParamsTemp["downloadRequest"] = null;
		
		if (params["clientcontext"] != null) {
			params["clientcontext"] = JSON.stringify(params["clientcontext"]);
		}

		if (params["context"] != null) {
			params["context"] = JSON.stringify(params["context"]);
		}

		kony.sync.downloadRequest = params;
	}
	else{
		params = kony.sync.downloadRequest;
		params["tickcount"] = serverblob;
	}
	
	kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onBatchProcessingStart], kony.sync.currentSyncReturnParams);

	kony.sync.syncPrint("Hitting the service with URL :" + kony.sync.getDownloadURL());
	kony.net.invokeServiceAsync(kony.sync.getDownloadURL(), params, downloadNetworkCallbackStatus, null);
};
//function konyUploadChanges (changes)
kony.sync.konyUploadChanges = function (changes, uploadNetworkcallback) {
	var results1 = [];

	function uploadNetworkCallbackStatus(status, result, info) {
		if (status == 400) {
			uploadNetworkcallback(result);
		}
	}

	kony.sync.syncPrint("kony_UploadChanges -------->" + changes);
	for (var i = 1;
		((changes.tables) != null) && i <= changes.tables.length; i++) {
		var tableChange = changes.tables[kony.decrement(i)];
		tableName = tableChange.tableName;
		for (var j = 1;
			((tableChange.changes) != null) && j <= tableChange.changes.length; j++) {
			var rowChange = tableChange.changes[kony.decrement(j)];
			//			local result = { metadata = { type = tableName, uri = changes.uri, changeType = rowChange.changeType }, syncConflict = rowChange.syncConflict };
			if ((rowChange.syncConflict == null)) {
				rowChange.syncConflict = "";
			}
			var result = {
				metadata : {
					type : tableName,
					uri : changes.uri,
					changetype : rowChange.changeType,
					syncConflict : rowChange.syncConflict
				}
			};
			if ((rowChange.fields != null)) {
				var fcount = kony.sync.getArrayCount(rowChange.fields);
				for (var k = 1; k <= fcount; k++) {
					if (rowChange.fields[kony.decrement(k)] != "ServerId" && rowChange.fields[kony.decrement(k)] != "UpdateId") {
						result[kony.decrement(rowChange.fields[kony.decrement(k)])] = rowChange.values[kony.decrement(k)];
					}
				}
			}
			//kony.table.insert(results1, result);
			results1.push(result);
		}
	}
	jsonLua = {
		d : {
			results : results1,
			sync : "not implemented",
			scopeName : changes.scopeName,
			serverBlob : changes.serverblob,
			clientid : changes.clientid,
			SequenceNumber : changes.SequenceNumber
		}
	};

	//json = kony.sync.createJson("d", jsonLua)
	json = JSON.stringify(jsonLua);
	var httpheaders = {};
	httpheaders["Content-Type"] = "application/json";
	var params = {};
	params["userid"] = kony.sync.currentSyncConfigParams["userid"];
	params["password"] = kony.sync.genHash(kony.sync.currentSyncConfigParams[kony.sync.passwordHashingAlgo], kony.sync.currentSyncConfigParams["password"]);
	params["httpheaders"] = httpheaders;
	params["UploadRequest"] = json;
	params["appid"] = kony.sync.getAppId();
	params["scopename"] = kony.sync.currentScope[kony.sync.scopeName];
	params["strategy"] = kony.sync.currentScope[kony.sync.syncStrategy];
	params["instanceid"] = kony.sync.getInstanceID();
	params["clientid"] = kony.os.deviceInfo().deviceid;
	params["appVersion"] = kony.sync.currentSyncConfigParams["appVersion"];

	if (kony.sync.currentSyncConfigParams[kony.sync.sessionTasks] != null && kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][kony.sync.currentScope[kony.sync.scopeName]] != null) {
		params[kony.sync.sessionTaskUploadErrorPolicy] = kony.sync.currentSyncConfigParams[kony.sync.sessionTasks][kony.sync.currentScope[kony.sync.scopeName]][kony.sync.sessionTaskUploadErrorPolicy]
	}

	var paramsToSend = null;
	var currentSyncReturnParamsTemp = kony.sync.currentSyncReturnParams;
	currentSyncReturnParamsTemp["uploadRequest"] = params;
	paramsToSend = kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onUploadStart], currentSyncReturnParamsTemp);
	if (paramsToSend != null) {
		params = paramsToSend
	}
	if (params["clientcontext"] != null) {
		params["clientcontext"] = JSON.stringify(params["clientcontext"]);
	}

	if (params["context"] != null) {
		params["context"] = JSON.stringify(params["context"]);
	}
	kony.sync.syncPrint("Hitting the service with URL :" + kony.sync.getUploadURL());
	kony.net.invokeServiceAsync(kony.sync.getUploadURL(), params, uploadNetworkCallbackStatus);
	currentSyncReturnParamsTemp["uploadRequest"] = null
};

kony.sync.konyRegisterDevice = function (registerDeviceCallback) {

	function registerDeviceCallbackStatus(status, result, info) {
		if (status == 400) {
			registerDeviceCallback(result);
		}
	}
	var httpheaders = {};
	//&name=dummyname&model=dummymodel&version=dummyversion&deviceID=dummydeviceID&userAgent=dummyuserAgent&userid= somevalue
	//&password=somevalue&appid=somevalue
	httpheaders["Content-Type"] = "application/json";
	var params = {};
	params["userid"] = kony.sync.currentSyncConfigParams["userid"];
	params["password"] = kony.sync.genHash(kony.sync.currentSyncConfigParams[kony.sync.passwordHashingAlgo], kony.sync.currentSyncConfigParams["password"]);
	params["httpheaders"] = httpheaders;
	params["appid"] = kony.sync.getAppId();
	params["os"] = kony.os.deviceInfo().name;
	params["model"] = kony.os.deviceInfo().model;
	params["version"] = "" + kony.os.deviceInfo().version;
	params["deviceID"] = kony.os.deviceInfo().deviceid;
	params["userAgent"] = kony.os.userAgent();
	kony.sync.syncPrint("Hitting the service with URL : " + kony.sync.getRegisterDeviceURL());
	kony.sync.syncPrint("Input params : " + params);

	//var result =  kony.net.invokeService(kony.sync.getRegisterDeviceURL(), params, true);
	kony.net.invokeServiceAsync(kony.sync.getRegisterDeviceURL(), params, registerDeviceCallbackStatus, null);
};
//  **************** End konySyncServiceProvider.js*******************


//  **************** Start KonySyncSkyLib.js*******************
kony.sky = {};
//Sky Constants
kony.sky.EventStart = "START";
kony.sky.EventFinish = "FINISH";
kony.sky.EventError = "ERROR";

kony.sky.ConfigParamServer = "SERVER";
kony.sky.ConfigParamPort = "PORT";
kony.sky.ConfigParamProfile = "PROFILE";
kony.sky.ConfigParamUsewifi = "USEWIFI";
kony.sky.ConfigParamUser = "USER";
kony.sky.ConfigParamPasswd = "PASSWORD";
kony.sky.BBPlatform = "blackberry";
kony.sky.TrueStr = "TRUE";
kony.sky.BBPlatformName = "blackberry";
kony.sky.ConfigParamConnMode = "CONNECTIONMODE";

kony.sky.startSkyCallback = "onSkyStart";
kony.sky.startIdentifyCallback = "onIndentifyStart";
kony.sky.successIdentifyCallback = "onIndentifySuccess";
kony.sky.errorIdentifyCallback = "onIndentifyError";
kony.sky.errorSkyCallback = "onSkyError";
kony.sky.startSessionCallback = "onSessionStart";
kony.sky.successSessionCallback = "onSessionSuccess";
kony.sky.errorSessionCallback = "onSessionError";
kony.sky.successSkyCallback = "onSkySuccess";

kony.sky.errorCode = "errorCode";
kony.sky.errorMessage = "errorMessage";
//provision callback methods
kony.sky.startProvisionCallback = "onProvisionStart";
kony.sky.successProvisionCallback = "onProvisionSuccess";
kony.sky.errorProvisionCallback = "onProvisionError";
//reset callback methods
kony.sky.startResetCallback = "onResetStart";
kony.sky.successResetCallback = "onResetSuccess";
kony.sky.errorResetCallback = "onResetError";
//stop callback methods
kony.sky.startStopCallback = "onStopStart";
kony.sky.successStopCallback = "onStopSuccess";
kony.sky.errorStopCallback = "onStopError";

//dataobject upload callback methods
kony.sky.startUploadCallback = "onUploadStart";
kony.sky.successUploadCallback = "onUploadSuccess";
kony.sky.errorUploadCallback = "onUploadError";
//transaction
kony.sky.startTransactionCallback = "onStartTransaction";
kony.sky.successTransactionCallback = "onSuccessTransaction";

kony.sky.parentTableInfo = "parentTable";

kony.sky.provisionSkySync = function(config){
	var isProvisioned = sky.isProvisioned();
	kony.sync.syncPrint("SkySync engine provisioned status :"+isProvisioned);
	if(config[kony.sky.ConfigParamServer] === null || config[kony.sky.ConfigParamServer] === "" || config[kony.sky.ConfigParamPort] === null || config[kony.sky.ConfigParamPort] === "" || config[kony.sky.ConfigParamProfile] === null || config[kony.sky.ConfigParamProfile] === "") { 
		var params = {};
		params[kony.sky.errorCode] = "7101";
		params[kony.sky.errorMessage] = kony.sky.errorMessageForCode(params[kony.sky.errorCode]);
		kony.sync.verifyAndCallClosure(config[kony.sky.errorProvisionCallback],params);
		return;
	}
	if(!isProvisioned){		
		var inputParam = {};
		if(kony.sync.platformName == null){
			kony.sync.platformName = kony.os.deviceInfo().name;
		}
		if(kony.sync.platformName === kony.sky.BBPlatform){
			inputParam[kony.sky.ConfigParamUsewifi] = kony.sky.TrueStr;
		}		
		inputParam.SERVER =config.SERVER;
		inputParam.PORT = config.PORT;
		inputParam.PROFILE = config.PROFILE;
		sky.provision(inputParam, provisionSkySyncCallback);
	}else{		
		kony.sync.verifyAndCallClosure(config[kony.sky.successProvisionCallback],null);
	}
	function provisionSkySyncCallback( event, args ){	
		if((event !== kony.sky.EventStart)){
			if((event === kony.sky.EventError)){
				if((args !== null)){
					var params = {};
					params[kony.sky.errorCode] = args.ERRORCODE;
					params[kony.sky.errorMessage] = args.ERRORDESC;
					kony.sync.verifyAndCallClosure(config[kony.sky.errorProvisionCallback],params);
				}
			}
			if((event === kony.sky.EventFinish)){				
				kony.sync.verifyAndCallClosure(config[kony.sky.successProvisionCallback],null);	
			}						
		}else{
			kony.sync.verifyAndCallClosure(config[kony.sky.startProvisionCallback],null);
		}
	}	
};

kony.sky.startSkySyncSession = function(config){
	var isIdentified = sky.isIdentified();
	if(config[kony.sky.ConfigParamUser] === null || config[kony.sky.ConfigParamPasswd] === null) { 
		var params = {};
		params[kony.sky.errorCode] = args.ERRORCODE;
		params[kony.sky.errorMessage] = args.ERRORDESC;
		kony.sync.verifyAndCallClosure(config[kony.sky.errorSkyCallback],params);
		return;
	}
	kony.sync.verifyAndCallClosure(config[kony.sky.startSkyCallback ],null);
	if(!isIdentified){
		var identifyParams = {};
		identifyParams[kony.sky.ConfigParamUser] = config[kony.sky.ConfigParamUser];
		identifyParams[kony.sky.ConfigParamPasswd] = config[kony.sky.ConfigParamPasswd];
		if(kony.sync.platformName == null){
			kony.sync.platformName = kony.os.deviceInfo().name;
		}
		if(kony.sync.platformName === kony.sky.BBPlatform){
			identifyParams[kony.sky.ConfigParamUsewifi] = kony.sky.TrueStr;
			if(!kony.sync.isNull(config[kony.sky.ConfigParamConnMode])){
				identifyParams[kony.sky.ConfigParamConnMode] = config[kony.sky.ConfigParamConnMode];
			}
		}
		sky.identify(identifyParams,false,identifySkySyncCallback);
	}else{		
		identifySkySyncCallback(kony.sky.EventFinish, [  ]);
	}
	function identifySkySyncCallback( event, args ){
		if(event !== kony.sky.EventStart){
			if(event === kony.sky.EventError){
				if((args !== null)){
					var params = {};
					params[kony.sky.errorCode] = args.ERRORCODE;
					params[kony.sky.errorMessage] = args.ERRORDESC;
					kony.sync.verifyAndCallClosure(config[kony.sky.errorIdentifyCallback],params);
				}
			}	
			if(event === kony.sky.EventFinish){
				kony.sync.verifyAndCallClosure(config[kony.sky.successIdentifyCallback],null);
				startSkySync();
			}
		}
		else{			
			kony.sync.verifyAndCallClosure(config[kony.sky.startIdentifyCallback],null);
		}
	}
	function startSkySync(  ){
		var isStarted = sky.isStarted();
		kony.sync.syncPrint("SkySync server status "+isStarted);
		kony.sync.verifyAndCallClosure(config[kony.sky.startSessionCallback],null);
		if((!isStarted)){			
			sky.start(startSkySyncCallback);
		}else{
			startSkySyncCallback(kony.sky.EventFinish, [  ]);
		}
	}

	function startSkySyncCallback( event, args ){
		if(event !== kony.sky.EventStart){			
			if(event === kony.sky.EventError){
				if((args !== null)){
					var params = {};
					params[kony.sky.errorCode] = args.ERRORCODE;
					params[kony.sky.errorMessage] = args.ERRORDESC;
					kony.sync.verifyAndCallClosure(config[kony.sky.errorSessionCallback],params);
				}
			}	
			if(event === kony.sky.EventFinish){	
				kony.sync.syncPrint("SkySync server started Successful");
				kony.sync.verifyAndCallClosure(config[kony.sky.successSessionCallback],null);
				kony.sync.verifyAndCallClosure(config[kony.sky.successSkyCallback],null);
			}
		}
	}	
};

kony.sky.skyEmptyFunction = function(){
};

kony.sky.getSkyGuiID = function(){
	var serviceId = sky.getParameter("SERVERID");
	var currendate = kony.os.date("mm/dd/yyyy");
	var currtime = kony.sky.replaceColon(kony.os.time());
	var datevalue = currendate.split ("/");
	var resultDate = datevalue[2] + datevalue[0] + datevalue[1] + currtime;
	var GUID = serviceId + "-" + resultDate;
	return GUID;
};

 kony.sky.replaceColon = function(currtime){
	if(kony.string.containsChars(currtime,[":"])){
		currtime = currtime.replace (":", "");
		currtime = kony.sky.replaceColon(currtime);
	}
	return currtime;
};


kony.sky.generatePKTable = function(pk){
	var i = 0;
	var pks = [];
	for (var j in pk){
		var v = pk[j];
		if(!kony.sync.isNull(v.key)){		
			pks[i] = v.key + " = " + v.value;
		}
		else{
			pks[i] = j + " = " + v;
		}
		i = i + 1;
	}
	return pks;
};

kony.sky.buildConditionSet = function(srchByTargetAttribute, targetKey){
	var conditionSet = [];
	conditionSet[ 0 ] = srchByTargetAttribute + " = " + targetKey;
	return conditionSet;
};

kony.sky.beginTransaction = function(config){
		sky.beginTransaction(config[kony.sky.successTransactionCallback]);
};

kony.sky.commitTransaction = function(config){
		sky.commitTransaction(config[kony.sky.successTransactionCallback]);
};

kony.sky.rollbackTransaction = function(config){
		sky.rollbackTransaction(config[kony.sky.successTransactionCallback]);
};

kony.sky.resetSkyEngine = function(config){	
	function resetCallback( event, args ){	
		if((event !== kony.sky.EventStart)){
			if((event === kony.sky.EventError)){
				if((args !== null)){
					var params = {};
					params[kony.sky.errorCode] = args.ERRORCODE;
					params[kony.sky.errorMessage] = args.ERRORDESC;
					kony.sync.verifyAndCallClosure(config[kony.sky.errorResetCallback],params);
				}
			}
			if((event === kony.sky.EventFinish)){				
				kony.sync.verifyAndCallClosure(config[kony.sky.successResetCallback],null);	
			}						
		}else{
			kony.sync.verifyAndCallClosure(config[kony.sky.startResetCallback],null);
		}
	}
	sky.reset(resetCallback);
};

kony.sky.stopSkyEngine = function(config){	
	function stopCallback( event, args ){	
		if((event !== kony.sky.EventStart)){
			if((event === kony.sky.EventError)){
				if((args !== null)){
					var params = {};
					params[kony.sky.errorCode] = args.ERRORCODE;
					params[kony.sky.errorMessage] = args.ERRORDESC;
					kony.sync.verifyAndCallClosure(config[kony.sky.errorStopCallback],params);
				}
			}
			if((event === kony.sky.EventFinish)){			
				if(sky.isStarted()){
					sky.stop(stopCallback);
				}else{
					kony.sync.verifyAndCallClosure(config[kony.sky.successStopCallback],null);	
				}
			}						
		}else{
			kony.sync.verifyAndCallClosure(config[kony.sky.startStopCallback],null);
		}
	}
	if(sky.isStarted()){
		sky.stop(stopCallback);
	}else{
		kony.sync.verifyAndCallClosure(config[kony.sky.successStopCallback],null);
	}

};

kony.sky.errorMessageForCode = function( errorCode ){
	var statusMsgTable = {};
	statusMsgTable["-1002"] = "ERROR_ALREADY_IDENTIFIED";
	statusMsgTable["-1003"] = "ERROR_ALREADY_PROVISIONED";
	statusMsgTable["-1004"] = "ERROR_BAD_CONDITION_SET";
	statusMsgTable["-1005"] = "ERROR_BLACKLISTED";
	statusMsgTable["-1006"] = "ERROR_CONFIGURATION";
	statusMsgTable["-1007"] = "ERROR_DATA_OBJECT_NOT_FOUND";
	statusMsgTable["-1008"] = "ERROR_DUPLICATE_ITEM";	
	statusMsgTable["-1009"] = "ERROR_ENCRYPTION_HANDSHAKE";
	statusMsgTable["-1010"] = "ERROR_ENCRYPTION_MISMATCH";
	statusMsgTable["-1001"] = "ERROR_GENERAL_FAILURE";
	statusMsgTable["-1011"] = "ERROR_HOST_IF_SETUP_ERROR";
	statusMsgTable["-1012"] = "ERROR_HOST_NOT_AVAILABLE";
	statusMsgTable["-1013"] = "ERROR_IDENTITY_FAILURE";
	statusMsgTable["-1014"] = "ERROR_INVALID_PARAMETER";
	statusMsgTable["-1015"] = "ERROR_IS_STARTED";
	statusMsgTable["-1016"] = "ERROR_MEAP_IS_DISABLED";
	statusMsgTable["-1017"] = "ERROR_NO_CONFIGURATION";
	statusMsgTable["-1018"] = "ERROR_NO_INSTANCES_SELECTED";
	statusMsgTable["-1019"] = "ERROR_NOT_IDENTIFIED";
	statusMsgTable["-1020"] = "ERROR_NOT_PROVISIONED";
	statusMsgTable["-1021"] = "ERROR_NOT_RUNNING";
	statusMsgTable["-1022"] = "ERROR_PROFILE_DEACTIVATED";
	statusMsgTable["-1023"] = "ERROR_PROFILE_NOT_FOUND";
	statusMsgTable["-1024"] = "ERROR_RETRY";
	statusMsgTable["-1025"] = "ERROR_TABLE_NOT_FOUND";
	statusMsgTable["-1026"] = "ERROR_UNCAUGHT_EXCEPTION";
	statusMsgTable["-1027"] = "ERROR_USER_NOT_FOUND";
	statusMsgTable["7101"] = "MISSING ATTRIBUTES FOR SKY";	
	var errMsg = "";
	if(statusMsgTable[errorCode] === null) {
		errMsg =  "Some unknown error";
	}else{
		errMsg =  statusMsgTable[errorCode];
	}
	return errMsg;	
};

	
kony.sky.buildSkyOrderByMap = function(orderByMap){
	var i = 0;
	var ordering = [];
	for ( var j in orderByMap ){
		var v = orderByMap[j];	
		var sortType =  v.sortType;
		var orderBy = (v.key).toString() ;
		if(sortType === "desc"){
			orderBy = orderBy +" D*";
		}else{
			orderBy = orderBy + " *";
		}
		ordering[ i ] = orderBy ;
		i = i + 1;
	}
	return ordering;
};

skySync = {
	init : kony.sky.provisionSkySync,
	startSession : kony.sky.startSkySyncSession,
	reset : kony.sky.resetSkyEngine,
	stop : kony.sky.stopSkyEngine,
	uploadDataObject  :kony.sky.uploadDataObjectSky,
	beginTransaction : kony.sky.beginTransaction,
	rollbackTransaction :kony.sky.rollbackTransaction,
	commitTransaction : kony.sky.commitTransaction,
//	quiesce : kony.sky.quiesce,
	//unquiesce : kony.sky.unquiesce
};
//  **************** End KonySyncSkyLib.js*******************


//  **************** Start KonySyncTransactionWrapper.js*******************
isSuccess_wrapper = true;
omsg_wrapper = null;

function sync_transaction_wrapper(connection, single_transaction_callback, single_transaction_error_callback, single_transaction_success_callback) {
    function sync_transaction_success() {
        isSuccess_wrapper = true;
        kony.sync.syncPrint("Setting succes :" + isSuccess_wrapper);
    }

    function sync_transaction_error(msg) {
        isSuccess_wrapper = false;
        kony.sync.syncPrint("Setting error :" + isSuccess_wrapper);
        omsg_wrapper = msg;
    }
    kony.db.transaction(connection, single_transaction_callback, sync_transaction_error, sync_transaction_success);
    kony.sync.syncPrint("is call passed :" + isSuccess_wrapper);
    if ((isSuccess_wrapper)) {
        if ((single_transaction_success_callback != null)) {
            single_transaction_success_callback();
        }
    } else {
        if ((single_transaction_error_callback != null)) {
            single_transaction_error_callback(omsg_wrapper);
        }
    }
}
//  **************** End KonySyncTransactionWrapper.js*******************


//  **************** Start KonySyncUpload.js*******************
/*Generated by Lua2JS*/
//------------Upload Functionality Starts here----------------
//function syncUploadChanges (sname, dsname, onCompletion)
kony.sync.syncUploadChanges = function(sname, dsname, onCompletion) {
    kony.sync.onUploadCompletion = onCompletion;
    kony.sync.resetuploadsessioglobals();
    kony.sync.getLastSynctimeForUpload(sname, dsname, kony.sync.syncUploadchangesGetLastSynctime);
};
//function syncUploadchangesGetLastSynctime(rowItem)	
kony.sync.syncUploadchangesGetLastSynctime = function(rowItem) {
	
    var serverblob1 = rowItem[0][kony.decrement(kony.sync.metaTableSyncTimeColumn)];
    kony.sync.syncPrint("Last Sync Time Since Upload :"+serverblob1);                 
    kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.lastSyncTimestamp)] = serverblob1;
    kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadSequenceNumber)] = kony.sync.currentSyncScopesState[kony.sync.currentScope.ScopeName]
    kony.sync.syncPrint("Current Scope Server Time Stamp" + serverblob1);
    var changeset = {
       clientid: kony.sync.getDeviceID()  
        ,
        SequenceNumber: kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)],
        serverblob: serverblob1,
        scopeName: kony.sync.currentScope[kony.sync.scopeName],
        uri: kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)],
        tables: []
    };
	
	var isError = false;

    function uploadAllTransaction(tx) {
        if(kony.sync.getChanges(tx, kony.sync.currentScope, 0, changeset)===false){
			isError = true;
		}
        //kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.sync.onUploadStart], kony.sync.currentSyncReturnParams);
    }
    
    function CallAsyncNetworkCall(tx){
		if(changeset.totalChanges > 0){
			kony.sync.konyUploadChanges(changeset,uploadAllTransactionSuccess);
		}
		else{
			kony.sync.syncPrint("Skipping Upload for Scope : " + kony.sync.currentScope[kony.sync.scopeName]);
            kony.sync.uploadCompleted();
		}
    }

    function uploadAllTransactionSuccess(otaServerChanges) {
        kony.sync.syncPrint("Upload response" + otaServerChanges);
        if ((otaServerChanges[kony.decrement("opstatus")] != null && otaServerChanges[kony.decrement("opstatus")] != 0)) {            
            //kony.sync.onUploadCompletion(true,kony.sync.getServerError(otaServerChanges["d"], "upload"));
			if (otaServerChanges.d != null) {
				kony.sync.onUploadCompletion(true, kony.sync.getServerError(otaServerChanges.d, "upload"));
			} else {                   
				kony.sync.onUploadCompletion(true, kony.sync.getServerError(otaServerChanges));
			}

            return;
        }
        if ((otaServerChanges[kony.decrement("d")][kony.decrement("error")] == "false")) {
            kony.sync.clearSyncOrder(kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.currentScope[kony.sync.scopeName], clearSyncOrderCallback);
         } else { 
            kony.sync.onUploadCompletion(true,kony.sync.getServerError(otaServerChanges["d"],"upload"));       
            return;
        }
        function clearSyncOrderCallback(){
			if ((kony.sync.currentScope[kony.sync.syncStrategy] != kony.sync.syncStrategy_OTA)) {
				kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)] = kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)] + 1;
				kony.sync.setSeqnumber(kony.sync.currentScope.ScopeName, kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)], setSeqnumberCallback);
			} else {
				kony.sync.syncPrint("OTA Changes :" + otaServerChanges);
				kony.sync.setOTAUploadResponse(otaServerChanges);
			}
		}
		
		function setSeqnumberCallback(){
			var uploadcontext = {};
				uploadcontext[kony.decrement(kony.sync.numberOfRowsUploaded)] = kony.sync.syncTotalInserts + kony.sync.syncTotalUpdates + kony.sync.syncTotalDeletes;
				uploadcontext[kony.decrement(kony.sync.numberOfRowsInserted)] = kony.sync.syncTotalInserts;
				uploadcontext[kony.decrement(kony.sync.numberOfRowsUpdated)] = kony.sync.syncTotalUpdates;
				uploadcontext[kony.decrement(kony.sync.numberOfRowsDeleted)] = kony.sync.syncTotalDeletes;
				uploadcontext[kony.sync.objectLevelInfo] = kony.sync.objectLevelInfoMap;
				kony.sync.objectLevelInfoMap={};
				kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)] = uploadcontext;
				kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onUploadSuccess)], kony.sync.currentSyncReturnParams);
				kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)] = null;
				kony.sync.onUploadCompletion(false,null);
		}
    }
	
	function uploadAllTransactionFail(){
		kony.sync.syncUploadFailed(isError);
	}
	
    var dbname = kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)];
  //  var connection = kony.db.openDatabaseSync(dbname, kony.sync.versionNumber, dbname, kony.sync.dbSize);
   // kony.db.transaction(connection, uploadAllTransaction, kony.sync.syncUploadFailed, CallAsyncNetworkCall);
	var connection = kony.sync.getConnectionOnly(dbname,dbname);
	kony.sync.startTransaction(connection, uploadAllTransaction, CallAsyncNetworkCall, uploadAllTransactionFail);
};
//function setOTAUploadResponse(serverChanges)
kony.sync.setOTAUploadResponse = function(serverChanges) {
    kony.sync.OTAChangestobeDeleted = {};
	kony.sync.OTAChangestobeDeleted["Changes"] = serverChanges;
	var isError = false;
	function setOTAUploadResponseTransaction(tx) {
		if(kony.sync.applyChanges(tx, kony.sync.currentScope, serverChanges, kony.sync.gPolicy)===false){
			isError = true;
		}
    }

    function setOTAUploadResponseTransactionSuccess(tx) {
		
		kony.sync.clearSyncOrder(kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.currentScope[kony.sync.scopeName],clearSyncOrderCallback);
       
		function clearSyncOrderCallback(){
			kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)] = kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)] + 1;
			kony.sync.setSeqnumber(kony.sync.currentScope.ScopeName, kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)], kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)], setSeqnumberCallback);
		}
		function setSeqnumberCallback(){
			var uploadcontext = {};
	        uploadcontext[kony.decrement(kony.sync.numberOfRowsUploaded)] = kony.sync.syncTotalInserts + kony.sync.syncTotalUpdates + kony.sync.syncTotalDeletes;
	        uploadcontext[kony.decrement(kony.sync.numberOfRowsInserted)] = kony.sync.syncTotalInserts;
	        uploadcontext[kony.decrement(kony.sync.numberOfRowsUpdated)] = kony.sync.syncTotalUpdates;
	        uploadcontext[kony.decrement(kony.sync.numberOfRowsDeleted)] = kony.sync.syncTotalDeletes;
	        uploadcontext[kony.decrement(kony.sync.numberOfRowsAcknowledged)] = kony.sync.serverInsertAckCount + kony.sync.serverUpdateAckCount + kony.sync.serverDeleteAckCount;
        	uploadcontext[kony.decrement(kony.sync.numberOfRowsInsertedAck)] = kony.sync.serverInsertAckCount;
        	uploadcontext[kony.decrement(kony.sync.numberOfRowsUpdatedAck)] = kony.sync.serverUpdateAckCount;
        	uploadcontext[kony.decrement(kony.sync.numberOfRowsDeletedAck)] = kony.sync.serverDeleteAckCount;
			uploadcontext[kony.sync.numberOfRowsFailedtoUpload] = kony.sync.serverFailedCount;
			uploadcontext[kony.sync.objectLevelInfo] = kony.sync.objectLevelInfoMap;
			uploadcontext[kony.sync.failedRowInfo] = kony.sync.uploadSummary
			kony.sync.objectLevelInfoMap={};
        	kony.sync.currentSyncReturnParams[kony.decrement(kony.sync.uploadContext)] = uploadcontext;
			kony.sync.verifyAndCallClosure(kony.sync.currentSyncConfigParams[kony.decrement(kony.sync.onUploadSuccess)], kony.sync.currentSyncReturnParams);
			kony.sync.onUploadCompletion(false,null);
		}
    } //syncDownloadChanges (kony.sync.currentScope[kony.sync.scopeName], kony.sync.currentScope[kony.sync.scopeDataSource]);
	
	function setOTAUploadResponseTransactionFail(){
		kony.sync.syncUploadFailed(isError);
	}
	var dbname = kony.sync.currentScope[kony.decrement(kony.sync.scopeDataSource)];
	var connection = kony.sync.getConnectionOnly(dbname,dbname);
	kony.sync.startTransaction(connection, setOTAUploadResponseTransaction, setOTAUploadResponseTransactionSuccess, setOTAUploadResponseTransactionFail);
};

kony.sync.syncUploadFailed = function(isError) {
    kony.sync.syncPrint("Upload Failed");
	if (!isError) {
		kony.sync.onUploadCompletion(true, kony.sync.getErrorTable(kony.sync.errorCodeTransaction, kony.sync.getErrorMessage(kony.sync.errorCodeTransaction), null));
	}
	else{
		kony.sync.onUploadCompletion(true, kony.sync.errorObject);
		kony.sync.errorObject = null;
	}
};

//function getChanges(tx,scope,getfkdata, set) -- getfdata=> get foreign key data  		
kony.sync.getChanges = function(tx, scope, getfkdata, changeset) {
	kony.sync.objectLevelInfoMap = {};
	kony.sync.syncPrint("Changeset formed for upload :" + changeset);
	changeset.totalChanges = 0;
    for (var i = 1;
    ((kony.sync.currentScope.ScopeTables) != null) && i <= kony.sync.currentScope.ScopeTables.length; i++) {    	
        var syncTable = kony.sync.currentScope.ScopeTables[kony.decrement(i)];
        kony.sync.syncPrint("collecting uploads for " + syncTable.Name);
		
		if(kony.sync.objectLevelInfoMap[syncTable.Name] == null){ 
			kony.sync.objectLevelInfoMap[syncTable.Name] = {};
			kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUploaded] = 0;
			kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsInserted] = 0;
			kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUpdated] = 0;
			kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsDeleted] = 0;
			
			if ((kony.sync.currentScope[kony.sync.syncStrategy] == kony.sync.syncStrategy_OTA)) {
				kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsInsertedAck] = 0;
				kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUpdatedAck]= 0;
				kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsDeletedAck] = 0;
				kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsAcknowledged] = 0;
				kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsFailedtoUpload] = 0;
			}
			
		}	
		
        var tc = null;
        if ((changeset.tables[kony.decrement(i)] == null)) {
            tc = {
                tableName: syncTable.Name,
                changes: []
            };
            changeset.tables[kony.decrement(i)] = tc;
        } else {
            tc = changeset.tables[kony.decrement(i)];
        }
        var fields = [];
        for (var j = 1;
        ((kony.sync.currentScope.ScopeTables[kony.decrement(i)].Columns) != null) && j <= kony.sync.currentScope.ScopeTables[kony.decrement(i)].Columns.length; j++) {
            var col = kony.sync.currentScope.ScopeTables[kony.decrement(i)].Columns[kony.decrement(j)];
            kony.table.insert(fields, col.Name);
        }

        function getChangesExecuteSql(tx, resultset) {
            var len = resultset.rows.length;
            var rows = [];
            for (var k = 0; k < len; k++) {
                var rowItem = kony.db.sqlResultsetRowItem(tx, resultset, k);
                kony.table.insert(rows, rowItem);
            }
            //kony.sync.syncPrint("rows :"+rows)
            for (var j = 1;
            ((rows) != null) && j <= rows.length; j++) {
            	//kony.sync.syncPrint("no :"+j+" : "+rows.length)
                var row = rows[kony.decrement(j)];
                var changeType = row[kony.decrement(kony.sync.historyTableChangeTypeColumn)] + "";
                if (((changeType == kony.sync.updateColStatus || changeType == kony.sync.insertColStatus || changeType == kony.sync.deleteColStatus) 
					&& row[kony.decrement(kony.sync.historyTableSyncVersionColumn)] + "" == "" + kony.sync.currentSyncScopesState[kony.decrement(kony.sync.currentScope.ScopeName)])) {
                    var rc = {
                        fields: [],
                        values: []
                    };
                    if (changeType == kony.sync.insertColStatus) {
                        rc.changeType = "insert";
						kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsInserted]=kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsInserted]+1;
                        kony.sync.syncTotalInserts = kony.sync.syncTotalInserts + 1;
                    } else if (changeType == kony.sync.updateColStatus) {
                        rc.changeType = "update";
						kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUpdated]=kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUpdated]+1;
                        kony.sync.syncTotalUpdates = kony.sync.syncTotalUpdates + 1;
                    } else if (changeType == kony.sync.deleteColStatus) {
                        rc.changeType = "delete";
						kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsDeleted]=kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsDeleted]+1;
                        kony.sync.syncTotalDeletes = kony.sync.syncTotalDeletes + 1;
                    }
                    var rowChanged = false;
                    for (var x = 1;
                    ((syncTable.Columns) != null) && x <= syncTable.Columns.length; x++) {
                        var column = syncTable.Columns[kony.decrement(x)];
                        if ((row[kony.decrement(column.Name)] == null)) {
                            kony.table.insert(rc.fields, column.Name);
                            kony.table.insert(rc.values, "null");
                        }
                    }
                    for (var Key in row) {
                        var Value = row[kony.decrement(Key)];
                        if ((Key != kony.sync.syncStatusColumn)) {
                            kony.table.insert(rc.fields, Key);
                            kony.table.insert(rc.values, Value);
                        }
                    }
                    kony.table.insert(tc.changes, rc);
					kony.sync.syncPrint("No of Changes to be Uploaded for this table:" + j);
					changeset.totalChanges = changeset.totalChanges + j;
                }
            }
			kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUploaded] = kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsInserted] + kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsUpdated] + kony.sync.objectLevelInfoMap[syncTable.Name][kony.sync.numberOfRowsDeleted];
        }
		var pkwcs = [];
        kony.table.insert(pkwcs, {
                        key: kony.sync.historyTableChangeTypeColumn,
                        value: "'9%'",
                        optype: "NOT LIKE"
                    });
        kony.table.insert(fields, kony.sync.historyTableChangeTypeColumn);
        kony.table.insert(fields, kony.sync.historyTableReplaySequenceColumn);
        kony.table.insert(fields, kony.sync.historyTableSyncVersionColumn);
        kony.table.insert(fields, kony.sync.historyTableHashSumColumn);
        var query = kony.sync.qb_createQuery();
        kony.sync.qb_select(query, fields);
        kony.sync.qb_from(query, syncTable.Name + kony.sync.historyTableName);
		kony.sync.qb_where(query, pkwcs);
        var query_compile = kony.sync.qb_compile(query);
        var sql = query_compile[0];
        var params = query_compile[1];
        var resultset = kony.sync.executeSql(tx, sql, params);
		if(resultset===false){
			return false;
		}
        getChangesExecuteSql(tx, resultset);
        //kony.sync.syncPrint("set formed for upload" + JSON.stringify(changeset.tables[kony.decrement(i)]));
        if ((changeset.tables[kony.decrement(i)].changes.length != 0)) {
            kony.sync.syncPrint("Changes ------>" + changeset.tables[kony.decrement(i)].changes);
        }
        kony.sync.syncPrint("Changes ------>" + JSON.stringify(changeset.tables[kony.decrement(i)].changes));
    }
    kony.sync.syncPrint("Total no. of changes to be uploaded for this scope = " + changeset.totalChanges)
};


//  **************** End KonySyncUpload.js*******************


